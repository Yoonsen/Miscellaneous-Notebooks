;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;              - NorSource -
;;; 
;;;    Copyright (c)  NorSource 1.0
;;;                     
;;;
;;;
;;;    Norwegian University of Science and Technology, 7491 Trondheim
;;;    
;;;
;;;  


;;; -*- Mode: TDL; Coding: utf-8 -*-
; DON'T DELETE!
; (setf mrs (mrs::get-mrs-string (first *parse-record*)))
; (setf *empty-semantics-lexical-entries* nil)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;             lex1.close.tdl
;;;
;;;  Definitions of closed-class lexical items 
;;;
;;; lex.close.tdl contains all closed class items, apart from spatio-temporal
;;; prepositions and adverbs. It also contains one or two specimens of each 
;;; type of open class lexical items, so as to enable this lexicon solely to
;;; serve for development of the grammar. NB: this file is ordered by
;;; category/theme, and not alphabetically.


; Order of presentation:
; - proper names
; - 'selected' prepositions of many kinds
; - prepositions much like complementizers
; - partitive prepositions
; - possessive prepositions
; - comparative and degree items
; - s-adv
; - other special adverbs
; - complementizers
; - punctuation
; - conjunction and connective items
; - measure nouns and directional nouns
; - sample regular noun and adjective types
; - pronouns
; - determiners, articles and demonstratives
; - cardinals and ordinals
; - quantifiers and degree words
; - interjections
; - samples of all verb lexeme types


;;;; 250311 MHS
;; Removed two versions of "ikke".



;Ola-abbr := mascsg-anim-proper-name-word &
; [ STEM < "O." >,
;   SYNSEM.LKEYS.KEYREL.CARG "Ola" ].

Ola-pn := mascsg-anim-proper-name-word &
 [ STEM < "Ola" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Ola" ].

Per-pn := mascsg-anim-proper-name-word &
 [ STEM < "Per" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Per" ].

Jon-pn := mascsg-anim-proper-name-word &
 [ STEM < "Jon" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Jon" ].

Ask-pn := mascsg-anim-proper-name-word &
 [ STEM < "Ask" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Ask" ].

Jens-pn := mascsg-anim-proper-name-word &
 [ STEM < "Jens" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Jens" ].

Armani-pn := mascsg-anim-proper-name-word &
 [ STEM < "Armani" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Armani" ].

Kari-pn := femsg-anim-proper-name-word &
 [ STEM < "Kari" >,
   SYNSEM.LKEYS.KEYREL.CARG "Kari" ].

Gro-pn := femsg-anim-proper-name-word &
 [ STEM < "Gro" >,
   SYNSEM.LKEYS.KEYREL.CARG "Gro" ].

Marit-pn := femsg-anim-proper-name-word &
 [ STEM < "Marit" >,
   SYNSEM.LKEYS.KEYREL.CARG "Marit" ].

Embla-pn := femsg-anim-proper-name-word &
 [ STEM < "Embla" >,
   SYNSEM.LKEYS.KEYREL.CARG "Embla" ].

Finnmark-pn := neutsg-anim-proper-name-word &
  [ STEM < "Finnmark" >,
    INFLECTION final-full-nlong,
    SYNSEM.LKEYS.KEYREL.CARG "Finnmark" ].

Østlandet-pn := neutsg-anim-proper-name-word &
  [ STEM < "Østlandet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Østlandet" ].

Stortinget-pn := neutsg-anim-proper-name-word &
  [ STEM < "Stortinget" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stortinget" ].

; "sett telefonen på Stille"
;Stille-pn := mascsg-inan-proper-name-word &
;  [ STEM < "Stille" >,
;    INFLECTION light-e,
;    SYNSEM.LKEYS.KEYREL.CARG "Stille" ].

; rather treat "opphøye" as directional verb? no
til_opphøye-til := som-n-pred-comp &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY predcomp-til ] ].

; PREP-INDIRWHQUEST
;om_indirwhquest := prep-indirwhquest-word &
;  [ STEM < "om" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_om_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-indirqu]].

;på_indirwhquest := prep-indirwhquest-word &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-indirqu]].

;angående_indirwhquest := prep-indirwhquest-word &
;  [ STEM < "angående" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_angående_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY angående-indirqu]].

; PREP-CLAUSE
på_clause := prep-clause-word &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-clse]].

om_clause := prep-clause-word &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-clse]].

over_clause := prep-clause-word &
  [ STEM < "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY over-clse]].

av_clause := prep-clause-word &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-clse]].

med_clause := prep-clause-word &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-clse]].

; not obvious that needed
;som_clause := prep-clause-word &
;  [ STEM < "som" >,
;    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD.DECL -] >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_p-subcl_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY som-clse]].

angående_clause := prep-clause-word &
  [ STEM < "angående" >,
    SYNSEM.LKEYS.KEYREL.PRED "_angående_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY angående-k]].

;;;;;;;;;;;
; redundant - prep-clause
;som_bareclause := prep-bareclause-word &
;  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY som-clse]].

på_atelop := prep-atelic-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-atelop]].

av_atelop := prep-atelic-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-atelop]].

;ved_atelop := prep-atelic-word &
;;  [ STEM < "ved" >,
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY ved-atelop]].


hvorvidt_subord := y-n-quest-subord-comp &
 [ STEM < "hvorvidt" >,
   SYNSEM.LKEYS.KEYREL.PRED "hvorvidt_rel" ].

;; should be in lex3.p-adv-full.tdl, but experiments with a use of
;; KEYS.KEY information not used in that file
;om_dir := dir-fixpoint-prep-word &
;  [ STEM < "om" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_om_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-pathconsumpt-dir]].

; PREP-SEL
om_sel := prep-word-sel &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-fct-spec ]].

mot_sel := prep-word-sel &
  [ STEM < "mot" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mot_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY mot-fct-spec ] ].


i_sel := prep-word-sel &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-fct-spec ] ].

overfor_sel := prep-word-sel &
  [ STEM < "overfor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_overfor_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY overfor-fct-spec ]].

til_sel := prep-word-sel &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-fct-spec ]].


etter_sel := prep-word-sel &
  [ STEM < "etter" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY etter-fct-spec ]].

;med_concumm-sel := prep-word-sel &
;  [ STEM < "med" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_med_p-sel_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-concumm ]].

med_sel := prep-word-sel &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-fct-spec ]].

for_sel := prep-word-sel &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-fct-spec ]].

av_sel := prep-word-sel &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-fct-spec ]].

;i_assoc-sel := prep-word-sel &
;  [ STEM < "i" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_i_p-sel_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-assoc ]].

på_sel := prep-word-sel &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-fct-spec ]].

;på_sel-basis := prep-word-sel &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p-sel_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-basis-of ]].

;på_sel-topic := prep-word-sel &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-topic-of ]].

;på_sel-assoc := prep-word-sel &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-assoc ]].

fra_sel := prep-word-sel &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fra_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY fra-fct-spec ]].

; det er hinsides/under/opp for vurdering hvorvidt...
hinsides_arg1prop-epon_p := prep-arg1prop-epon-lxm &
  [ STEM < "hinsides" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hinsides_p_rel" ].

under_arg1prop-epon_p := prep-arg1prop-epon-lxm &
  [ STEM < "under" >,
    SYNSEM.LKEYS.KEYREL.PRED "_under_p_rel" ].

opp_for_arg1prop-epon_p := prep-arg1prop-epon-lxm &
  [ STEM < "opp", "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_opp-for_p_rel" ].

; "det er for andre gang at han..."
for_arg1prop-epon_p := prep-arg1prop-epon-lxm &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p_rel" ].

; "det er som en forbannelse at han..."
som_arg1prop-epon_p := prep-arg1prop-epon-lxm &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_p_rel" ].



på_detachposs := prep-detachposs-word &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-possrais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-detch]].

i_detachposs := prep-detachposs-word &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_p-possrais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-detch]].

; for now entered as prep-word-reg; but there is obviously more to them
unntagen_reg-p := prep-word-reg &
 [ STEM < "unntagen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_unntagen_p_rel" ].

unntatt_reg-p := prep-word-reg &
 [ STEM < "unntatt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_unntatt_p_rel" ].


liksom_reg-p := prep-word-reg &
 [ STEM < "liksom" >,
   SYNSEM.LKEYS.KEYREL.PRED "_liksom_p_rel" ].


samt_reg-p := prep-word-reg &
 [ STEM < "samt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_samt_p_rel" ].

per_reg-p := prep-p-adv-word-reg &
 [ STEM < "pr", "." >,
   SYNSEM.LKEYS.KEYREL beginning-of-path-rel & [PRED "_per_p_rel" ]].



ved_advprtcl := adv-particle-word &
  [ STEM < "ved" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY ved-pcl],
    SYNSEM.LKEYS.KEYREL.PRED "_ved_pcl_rel"].

på_partcl := adv-particle-word &
  [ STEM < "på" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY på-pcl,
            LKEYS.KEYREL.PRED "_på_pcl_rel"]].

; "gå rundt og..."
rundt_partcl := adv-particle-word &
  [ STEM < "rundt" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY rundt-pcl,
            LKEYS.KEYREL.PRED "_rundt_pcl_rel"]].

med_partcl := adv-particle-word &
  [ STEM < "med" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY med-pcl,
            LKEYS.KEYREL.PRED "_med_pcl_rel"]].

ut_partcl := adv-particle-word &
  [ STEM < "ut" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY ut-pcl,
            LKEYS.KEYREL.PRED "_of-appearance_a_rel"]].

opp_partcl := adv-particle-word &
  [ STEM < "opp" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY opp-pcl,
            LKEYS.KEYREL.PRED "_opp_pcl_rel"]].

;bort_partcl := adv-particle-word &
;  [ STEM < "bort" >,
;    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY bort-pcl,
;            LKEYS.KEYREL.PRED "_bort_a_rel"]].

fram_partcl := adv-particle-word &
  [ STEM < "fram" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY frem-pcl,
            LKEYS.KEYREL.PRED "_frem_pcl_rel"]].

frem_partcl := adv-particle-word &
  [ STEM < "frem" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY frem-pcl,
            LKEYS.KEYREL.PRED "_frem_pcl_rel"]].

til_partcl := adv-particle-word &
  [ STEM < "til" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY til-pcl,
            LKEYS.KEYREL.PRED "_til_pcl_rel"]].

;inn_partcl := adv-particle-word &
;  [ STEM < "inn" >,
;    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY inn-pcl,
;            LKEYS.KEYREL.PRED "_inn_pcl_rel"]].

av_partcl := adv-particle-word &
  [ STEM < "av" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY av-pcl,
            LKEYS.KEYREL.PRED "_av_pcl_rel"]].


; COMPLEMENTIZER-LIKE PREPOSITIONS (NON-PREDSORT)

når_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel"].

da_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "da" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel"].

før_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "før" >,
    SYNSEM.LKEYS.KEYREL.PRED "_before-time_c_rel"].

etter_at_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "etter", "at" >,
    SYNSEM.LKEYS.KEYREL.PRED "_after_time_rel"].

etterat_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "etterat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_after_time_rel"].

inntil_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "inntil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_concluded_at_time-rel"].

fra_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_initiated_at_time_rel"].


da_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "da" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel"].

når_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel"].

før_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "før" >,
    SYNSEM.LKEYS.KEYREL.PRED "_before-time_c_rel"].

etter_at_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "etter", "at" >,
    SYNSEM.LKEYS.KEYREL.PRED "_after_time_rel"].

etterat_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "etterat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_after_time_rel"].

inntil_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "inntil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_concluded_at_time-rel"].

fra_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_initiated_at_time_rel"].

der_prep-plce := prep-s-word-reg-plce &
  [ STEM < "der" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_place_as_rel"].

; EAA removed for efficiency purposes. Too few constraints.
; Example: "[Hvor mange timer i uka jobber] er du?"
; reactivated LH080713
hvor_prep-plce := prep-s-word-reg-plce &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_place_as_rel"].

der_hvor_prep-plce := prep-s-word-reg-plce &
  [ STEM < "der", "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_place_as_rel"].

; "overalt der"
der_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "der" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_place_as_rel"].
; "overalt hvor"
hvor_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_place_as_rel"].
; "overalt der hvor"
der_hvor_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "der", "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_same_place_as_rel"].



hvis_prep-cond := prep-s-word-reg-cond &
 [ STEM < "hvis" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

;og_prep-vp-time := prep-vp-word-reg-time &
;  [ STEM < "og" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_before-time_c_rel"].

;men_prep-vp-time := prep-vp-word-reg-time &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_before-time_c_rel"].


; PARTITIVE PREP

av_part-spec-q := part-q-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-spec-card := part-card-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-spec-mass := part-q-mass-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-measure := part-measurenp-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-adj := part-adj-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-adj2 := part-adj-prep2-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_measure := measure-out-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-measout] ].

med_measure := measure-out-prep-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-measout] ].


;;;;;;
;av_part-spec-card-mass := part-card-mass-prep-word &
;  [ STEM < "av" > ].




; POSS-PREP 
til_poss := prep-word-poss &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-poss ] ].

av_poss := prep-word-poss &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-poss ] ].

for_poss := prep-word-poss &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-poss ] ].

;fra_poss := prep-word-poss &
;  [ STEM < "fra" >,
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY fra-poss ]].

; PREP-EXPL 
til_expl-dep := prep-expl-dep-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY til-rais]].

med_expl-dep := prep-expl-dep-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY med-rais] ].

som_prep-expl-dep := prep-expl-dep-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY som-rais]].

; to see what wrong...
som_prep-s := prep-s-expl-dep-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY som-rais] ].

; PREP-RAIS 
mot_rais := prep-rais-word &
  [ STEM < "mot" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mot-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mot_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_mot_p-rais_rel"] !>  ].

med_rais := prep-rais-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_med_p-rais_rel"] !>  ].

av_rais := prep-rais-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY av-k,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_av_p-rais_rel"] !> ].

fra_rais := prep-rais-word &
  [ STEM < "fra" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fra-k,
    SYNSEM.LKEYS.KEYREL.PRED "_fra_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_fra_p-rais_rel"] !>  ].

over_rais := prep-rais-word &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY over-k,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_over_p-rais_rel"] !>  ].

på_rais := prep-rais-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_på_p-rais_rel"] !>  ].

om_rais := prep-rais-word &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-rais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_om_p-rais_rel"] !> ].

til_rais := prep-rais-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-rais ],
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_til_p-rais_rel"] !>  ].

for_rais := prep-rais-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_p-rais_rel"] !> ].

i_rais := prep-rais-word &
  [ STEM < "i" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_i_p-rais_rel"] !> ].

for_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-rais_rel"].

etter_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "etter" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-k,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p-rais_rel"].

uten_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "uten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY uten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_uten_p-rais_rel"].



; PREP-REL 
for_rel_p := rel-prep-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-rel_rel" ].

om_rel_p := rel-prep-word &
  [ STEM < "om" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY om-k,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-rel_rel" ].

over_rel_p := rel-prep-word &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY over-k,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-rel_rel" ].

av_rel-p := rel-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY av-k,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-rel_rel" ].

med_rel-p := rel-prep-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-rel_rel" ].

på_rel_p := rel-prep-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rel_rel" ].

;på_måte_p := prep-word-reg &
;  [ STEM < "på" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
;    SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CAT.HEAD.KEYS.KEY måte-k]>,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rel_rel" ].

til_rel_p := rel-prep-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY til-k,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-rel_rel" ].

av_agent := prep-word-agent &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_performed-by_rel"  ].

#|
; "av glede, av hensyn til,..."
av_hensyn := prep-word-reg &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av-rel_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CONT.HOOK.INDEX.SORT relatum,
                                  LOCAL.CONT.HOOK.INDEX.PNG.NG sg,
                                  LOCAL.CAT.HEAD.KEYS.KEY rel-hensyn] >].

; "motta støtte fra landsmøtet" - close to agent-prep, but goes also with active
fra_p-rel := rel-prep-word &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL [PRED "_fra_p-rel_rel"]].
|#



;;;; comparatives ;;;

mer_cmpar-reg := comparative-adv-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mest_superlat := superlative-adv-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mer_vp-mod-cmpar-reg := comparative-adv-vp-mod-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mest_vp-mod-superlat := superlative-adv-vp-mod-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mer_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mer_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mere_cmpar-reg := comparative-adv-word &
  [ STEM < "mere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mere_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mere_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exceed_c_rel"].

mindre_cmpar-reg := comparative-adv-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_less-than_c_rel"].

minst_superlat := superlative-adv-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_less-than_c_rel"].

mindre_vp-mod-cmpar-reg := comparative-adv-vp-mod-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_less-than_c_rel"].

minst_vp-mod-superlat := superlative-adv-vp-mod-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_less-than_c_rel"].

mindre_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_less-than_c_rel"].

mindre_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_less-than_c_rel"].


enn_cmpardep-reg := cmpar-dep-reg-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar ].

som_cmpardep-reg := cmpar-dep-reg-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

enn_cmpardiff-n := cmpar-dep-diff-for-noun-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar ].

som_cmpareq-n := cmpar-dep-equal-for-noun-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

enn_cmpardep-close := cmpar-dep-close-word &
  [ STEM < "enn" >].

like := comparative-adv-word &
  [ STEM < "like" >,
    SYNSEM.LKEYS.KEYREL.PRED "_equate_c_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

for := comparative-adv-word &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_excessive_c_rel"].

;likedan_compar := comparative-adv-word &
;    [ STEM < "likedan" >,
;      SYNSEM.LKEYS.KEYREL.PRED "_likedan_rel" ].

;slik_compar := comparative-adv-word &
;    [ STEM < "slik" >,
;      SYNSEM.LKEYS.KEYREL.PRED "_slik_rel" ].

likedan-som_equalzr := equalizer-word &
    [ STEM < "likedan", "som" >,
      SYNSEM.LKEYS.KEYREL.PRED "_likedan-som_rel" ].

slik-som_equalzr := equalizer-word &
    [ STEM < "slik", "som" >,
      SYNSEM.LKEYS.KEYREL.PRED "_slik-som_rel" ].


;;s-adv
ikke_s-adv := s-operadv-init-word &
  [ STEM < "ikke" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_neg_adv_rel"].

slettes-ikke_s-adv := s-operadv-init-word &
  [ STEM < "slettes","ikke" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_neg_adv_rel"].

overhodet-ikke_s-adv := s-operadv-init-word &
  [ STEM < "overhodet","ikke" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_neg_adv_rel"].

ei_s-adv := s-operadv-init-word &
  [ STEM < "ei" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ei-k,
    SYNSEM.LKEYS.KEYREL.PRED "_neg_adv_rel"].

egentlig_s-adv := s-operadv-init-word &
  [ STEM < "egentlig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY egentlig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_egentlig_adv_rel"].

neppe_s-adv := s-operadv-init-word &
  [ STEM < "neppe" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY neppe-k,
    SYNSEM.LKEYS.KEYREL.PRED "_neppe_adv_rel"].

iallfall_s-adv := s-operadv-init-word &
  [ STEM < "iallfall" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY iallfall-k,
    SYNSEM.LKEYS.KEYREL.PRED "_iallfall_adv_rel"].

heller_s-adv := s-operadv-init-word &
  [ STEM < "heller" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY heller-k,
    SYNSEM.LKEYS.KEYREL.PRED "_heller_adv_rel"].

helst_s-adv := s-operadv-init-word &
  [ STEM < "helst" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY helst-k,
    SYNSEM.LKEYS.KEYREL.PRED "_helst_adv_rel"].

likeledes_s-adv := s-operadv-init-word &
  [ STEM < "likeledes" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likeledes-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likeledes_adv_rel"].

likeså_s-adv := s-operadv-init-word &
  [ STEM < "likeså" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likeså-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likeså_adv_rel"].

likså_s-adv := s-operadv-init-word &
  [ STEM < "likså" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likeså-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likså_adv_rel"].

herved_s-adv := s-operadv-init-word &
  [ STEM < "herved" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY herved-k,
    SYNSEM.LKEYS.KEYREL.PRED "_herved_adv_rel"].

ergo_s-adv := s-operadv-init-word &
  [ STEM < "ergo" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ergo-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ergo_adv_rel"].

sannsynligvis_s-adv := s-operadv-init-word &
  [ STEM < "sannsynligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY sannsynligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sannsynligvis_adv_rel"].

virkelig_s-adv := s-operadv-stnd-word &
  [ STEM < "virkelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY virkelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_virkelig_adv_rel"].

antakeligvis_s-adv := s-operadv-init-word &
  [ STEM < "antakeligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antakeligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakeligvis_adv_rel"].

antageligvis_s-adv := s-operadv-init-word &
  [ STEM < "antageligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antageligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakeligvis_adv_rel"].

nødvendigvis_s-adv := s-operadv-init-word &
  [ STEM < "nødvendigvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nødvendigvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nødvendigvis_adv_rel"].

antydningsvis_s-adv := s-operadv-init-word & 
 [ STEM < "antydningsvis" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_antydningsvis_adv_rel" ].

antagelig_s-adv := s-operadv-init-word &
  [ STEM < "antagelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antagelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakelig_adv_rel"].

antakelig_s-adv := s-operadv-init-word &
  [ STEM < "antakelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antakelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakelig_adv_rel"].

trolig_s-adv := s-operadv-init-word &
  [ STEM < "trolig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY trolig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_trolig_adv_rel"].

endatil_s-adv := s-operadv-init-word &
  [ STEM < "endatil" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY endatil-k,
    SYNSEM.LKEYS.KEYREL.PRED "_endatil_adv_rel"].

endog_s-adv := s-operadv-init-word &
  [ STEM < "endog" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY endog-k,
    SYNSEM.LKEYS.KEYREL.PRED "_endog_adv_rel"].

; special marking for the purpose of s-adv-front-noninver-x-spec-v-rule, x= kanskje, så, mon, mon tro
kanskje_s-adv := s-operadv-init-word &
  [ STEM < "kanskje" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL.PRED "_kanskje_adv_rel"].

mon_s-adv := s-operadv-init-word &
  [ STEM < "mon" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mon-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mon_adv_rel"].

mon-tro_s-adv := s-operadv-init-word &
  [ STEM < "mon", "tro" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mon-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mon-tro_adv_rel"].

må-tro_s-adv := s-operadv-init-word &
  [ STEM < "må", "tro" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mon-k,
    SYNSEM.LKEYS.KEYREL.PRED "_må-tro_adv_rel"].

må-tru_s-adv := s-operadv-init-word &
  [ STEM < "må", "tru" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mon-k,
    SYNSEM.LKEYS.KEYREL.PRED "_må-tru_adv_rel"].

så_s-adv := s-operadv-init-word &
  [ STEM < "så" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY så-k,
    SYNSEM.LKEYS.KEYREL.PRED "_så_adv_rel"].

aldri_s-adv := s-operadv-init-word &
  [ STEM < "aldri" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY aldri-k,
    SYNSEM.LKEYS.KEYREL.PRED "_aldri_adv_rel"].

muligens_s-adv := s-operadv-init-word &
  [ STEM < "muligens" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY muligens-k,
    SYNSEM.LKEYS.KEYREL.PRED "_muligens_adv_rel"].

muligvis_s-adv := s-operadv-init-word &
  [ STEM < "muligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY muligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_muligvis_adv_rel"].

riktignok_s-adv := s-operadv-init-word &
  [ STEM < "riktignok" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY riktignok-k,
    SYNSEM.LKEYS.KEYREL.PRED "_riktignok_adv_rel"].

hittil_s-adv := s-operadv-init-word &
  [ STEM < "hittil" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY hittil-k,
    SYNSEM.LKEYS.KEYREL.PRED "_hittil_adv_rel"].

alltid_s-adv := s-operadv-init-word &
  [ STEM < "alltid" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY alltid-k,
    SYNSEM.LKEYS.KEYREL.PRED "_alltid_adv_rel"].

sjelden_s-adv := s-operadv-init-final-word &
  [ STEM < "sjelden" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY sjelden-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sjelden_a_rel"].

tidligere_s-adv := s-operadv-init-final-word &
  [ STEM < "tidligere" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY tidligere-k,
    SYNSEM.LKEYS.KEYREL.PRED "_tidligere_a_rel"].

ofte_s-adv := s-operadv-init-final-word &
  [ STEM < "ofte" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ofte-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ofte_adv_rel"].

noen-ganger_s-adv := s-operadv-init-final-word &
  [ STEM < "noen", "ganger" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY noen-ganger-k,
    SYNSEM.LKEYS.KEYREL.PRED "_noen-ganger_adv_rel"].

heldigvis_s-adv := s-operadv-init-word &
  [ STEM < "heldigvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY heldigvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_heldigvis_adv_rel"].

;for-dummy-dot_s-adv := s-operadv-init-word &
;  [ STEM < "f">,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
;    SYNSEM.LKEYS.KEYREL.PRED "_for-eksempel_adv_rel"].

for-eksempel-dot_s-adv := s-operadv-init-word &
  [ STEM < "f", ".", "eks">,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-eksempel_adv_rel"].

for-eksempel-dot-dot_s-adv := s-operadv-init-word &
  [ STEM < "f", ".", "eks", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-eksempel_adv_rel"].

for-eksempel_s-adv := s-operadv-init-word &
  [ STEM < "for", "eksempel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-eksempel_adv_rel"].

nettopp_s-adv := s-operadv-stnd-word &
  [ STEM < "nettopp" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nettopp-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nettopp_adv_rel"].

akkurat_s-adv := s-operadv-stnd-word &
  [ STEM < "akkurat" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY akkurat-k,
    SYNSEM.LKEYS.KEYREL.PRED "_akkurat_adv_rel"].

også_s-adv := s-operadv-final-word &
  [ STEM < "også" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY også-k,
    SYNSEM.LKEYS.KEYREL.PRED "_også_adv_rel"].

følgelig_s-adv := s-operadv-final-word &
  [ STEM < "følgelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY følgelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_følgelig_adv_rel"].

forresten_s-adv := s-operadv-init-final-word &
  [ STEM < "forresten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forresten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forresten_adv_rel"].

fortrinnsvis_s-adv := s-operadv-init-final-word &
  [ STEM < "fortrinnsvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fortrinnsvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_fortrinnsvis_adv_rel"].

for-resten_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "resten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forresten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forresten_adv_rel"].

faktisk_s-adv := s-operadv-init-final-word &
  [ STEM < "faktisk" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY faktisk-k,
    SYNSEM.LKEYS.KEYREL.PRED "_faktisk_adv_rel"].

for-så-vidt_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "så", "vidt" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-så-vidt-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-så-vidt_adv_rel"].

just_s-adv := s-operadv-stnd-word &
  [ STEM < "just" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY just-k,
    SYNSEM.LKEYS.KEYREL.PRED "_just_adv_rel"].

nemlig_s-adv := s-operadv-stnd-word &
  [ STEM < "nemlig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nemlig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nemlig_adv_rel"].

igjen_s-adv := s-operadv-init-final-word &
  [ STEM < "igjen" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY igjen-k,
    SYNSEM.LKEYS.KEYREL.PRED "_igjen_adv_rel"].

likevel_s-adv := s-operadv-init-final-word &
  [ STEM < "likevel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likevel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likevel_adv_rel"].

naturligvis_s-adv := s-operadv-init-final-word &
  [ STEM < "naturligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY naturligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_naturligvis_adv_rel"].

selvfølgelig_s-adv := s-operadv-init-final-word &
  [ STEM < "selvfølgelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY selvfølgelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_selvfølgelig_adv_rel"].

selvsagt_s-adv := s-operadv-init-final-word &
  [ STEM < "selvsagt" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY selvsagt-k,
    SYNSEM.LKEYS.KEYREL.PRED "_selvsagt_adv_rel"].

allikevel_s-adv := s-operadv-init-final-word &
  [ STEM < "allikevel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY allikevel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_allikevel_adv_rel"].

forøvrig_s-adv := s-operadv-init-final-word &
  [ STEM < "forøvrig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forøvrig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forøvrig_adv_rel"].

for-øvrig_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "øvrig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forøvrig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forøvrig_adv_rel"].

vel_s-adv := s-operadv-init-word &
  [ STEM < "vel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_vel_adv_rel"].

derfor_s-adv := s-operadv-init-word &
  [ STEM < "derfor" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY derfor-k,
    SYNSEM.LKEYS.KEYREL.PRED "_derfor_adv_rel"].

gjerne_s-adv := s-operadv-stnd-word &
  [ STEM < "gjerne" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY gjerne-k,
    SYNSEM.LKEYS.KEYREL.PRED "_gjerne_adv_rel"].

alternativt_s-adv := s-operadv-init-final-word &
  [ STEM < "alternativt" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY alternativt-k,
    SYNSEM.LKEYS.KEYREL.PRED "_alternativt_adv_rel"].

dessverre_s-adv := s-operadv-init-final-word &
  [ STEM < "dessverre" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dessverre-k,
    SYNSEM.LKEYS.KEYREL.PRED "_dessverre_adv_rel"].

dessuten_s-adv := s-operadv-init-word &
  [ STEM < "dessuten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dessuten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_dessuten_adv_rel"].

dernest_s-adv := s-operadv-init-word &
  [ STEM < "dernest" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dernest-k,
    SYNSEM.LKEYS.KEYREL.PRED "_dernest_adv_rel"].

derimot_s-adv := s-operadv-init-final-word &
  [ STEM < "derimot" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY derimot-k,
    SYNSEM.LKEYS.KEYREL.PRED "_derimot_adv_rel"].

tydeligvis_s-adv := s-operadv-init-final-word &
  [ STEM < "tydeligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY tydeligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_tydeligvis_adv_rel"].

nok_s-adv := s-operadv-stnd-word &
  [ STEM < "nok" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nok-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_adv_rel"].

ellers_s-adv := s-operadv-stnd-word &
  [ STEM < "ellers" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ellers-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ellers_adv_rel"].

; twice
;så_s-adv := s-operadv-init-word &
;  [ STEM < "så" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY så-k,
;    SYNSEM.LKEYS.KEYREL [PRED "så_rel"]].

deriblant_s-adv := s-operadv-init-word &
  [ STEM < "deriblant" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY deriblant-k,
    SYNSEM.LKEYS.KEYREL.PRED "_deriblant_adv_rel"].

engang_s-adv := s-operadv-init-final-word &
  [ STEM < "engang" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY engang-k,
    SYNSEM.LKEYS.KEYREL.PRED "_engang_adv_rel"].

for-det-meste_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "det", "meste" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-det-meste-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-det-meste_adv_rel"].

;for-det-meste_adv-reg := adv-word-reg &
;  [ STEM < "for", "det", "meste" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-det-meste-k,
;    SYNSEM.LKEYS.KEYREL.PRED "_for-det-meste_adv_rel"].

videre_s-adv := s-operadv-init-word &
  [ STEM < "videre" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY videre-k,
    SYNSEM.LKEYS.KEYREL [PRED "_videre_rel"]].

deretter_s-adv := s-operadv-init-final-word &
  [ STEM < "deretter" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY deretter-k,
    SYNSEM.LKEYS.KEYREL [PRED "deretter_rel"]].

halvveis_s-adv := s-operadv-init-final-word &
  [ STEM < "halvveis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY halvveis-k,
    SYNSEM.LKEYS.KEYREL [PRED "halvveis_rel"]].

imidlertid_s-adv := s-operadv-init-word &
  [ STEM < "imidlertid" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY imidlertid-k,
    SYNSEM.LKEYS.KEYREL [PRED "_imidlertid_rel"]].

dog_s-adv := s-operadv-init-word &
  [ STEM < "dog" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dog-k,
    SYNSEM.LKEYS.KEYREL [PRED "_dog_rel"]].

istedet_s-adv := s-operadv-init-word &
  [ STEM < "istedet" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY istedet-k,
    SYNSEM.LKEYS.KEYREL [PRED "_istedet_rel"]].

i-stedet_s-adv := s-operadv-init-word &
  [ STEM < "i", "stedet" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY istedet-k,
    SYNSEM.LKEYS.KEYREL [PRED "_istedet_rel"]].

isteden_s-adv := s-operadv-init-word &
  [ STEM < "isteden" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY istedet-k,
    SYNSEM.LKEYS.KEYREL [PRED "_isteden_rel"]].

ingenlunde_s-adv := s-operadv-init-word &
  [ STEM < "ingenlunde" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ingenlunde-k,
    SYNSEM.LKEYS.KEYREL [PRED "_ingenlunde_rel"]].

dermed_s-adv := s-operadv-init-word &
  [ STEM < "dermed" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dermed-k,
    SYNSEM.LKEYS.KEYREL [PRED "_dermed_rel"]].

slik_s-adv := s-operadv-init-word &
  [ STEM < "slik" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY slik-k,
    SYNSEM.LKEYS.KEYREL [PRED "_slik_rel"]].



;; m-adv ('manner'
alvorlig_m-adv := m-adv-word &
  [ STEM < "alvorlig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alvorlig_adv_rel"].

sammen_m-adv := adv-word-reg &
  [ STEM < "sammen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sammen_adv_rel"].

alene_m-adv := adv-word-reg &
  [ STEM < "alene" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alene_adv_rel"].

rett_adv := adv-word-reg &
  [ STEM < "rett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_rett_adv_rel"].

lett_adv := adv-word-reg &
  [ STEM < "lett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lett_adv_rel"].

greit_adv := adv-word-reg &
  [ STEM < "greit" >,
    SYNSEM.LKEYS.KEYREL.PRED "_greit_adv_rel"].

mye_adv := adv-word-vp-mod &
  [ STEM < "mye" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_adv_rel"].

lite_adv := adv-word-vp-mod &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_adv_rel"].

litt_adv := adv-word-vp-mod &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_adv_rel"].

litt-til_adv := adv-word-vp-mod &
  [ STEM < "litt", "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt-til_adv_rel"].



;; refl-adv
selv_refl := refl-adv-word &
  [ STEM < "selv" > ].

selv_regadv := adv-word-reg &
  [ STEM < "selv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_selv_adv_rel" ].

sjølv_refl := refl-adv-word &
  [ STEM < "sjølv" > ].

sjølv_regadv := adv-word-reg &
  [ STEM < "sjølv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sjølv_adv_rel" ].

sjøl_refl := refl-adv-word &
  [ STEM < "sjøl" > ].

sjøl_regadv := adv-word-reg &
  [ STEM < "sjøl" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sjøl_adv_rel" ].


hvor_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_at-which-place_adv_rel"].

hvori_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvori" >,
    SYNSEM.LKEYS.KEYREL.PRED "_in-what_adv_rel"].

hvoriblant_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvoriblant" >,
    SYNSEM.LKEYS.KEYREL.PRED "_in-which-assembly_adv_rel"].

; very old form
hvo_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_at-which-place_adv_rel"].

når_wh-regadv := wh-adv-word-reg &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_at-which-time_adv_rel"].

hvorfor_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorfor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for-which-reason_adv_rel"].

; very old form
hvi_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for-which-reason_adv_rel"].

hvordan_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvordan" >,
    SYNSEM.LKEYS.KEYREL.PRED "_in-which-manner_adv_rel"].

hvorledes_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorledes" >,
    SYNSEM.LKEYS.KEYREL.PRED "_in-which-manner_adv_rel"].

kossen_wh-regadv := wh-adv-word-reg &
  [ STEM < "kossen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_in-which-manner_adv_rel"].

åssen_wh-regadv := wh-adv-word-reg &
  [ STEM < "åssen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_in-which-manner_adv_rel"].

korsen_wh-regadv := wh-adv-word-reg &
  [ STEM < "korsen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_in-which-manner_adv_rel"].

hvor_wh-orientadv := wh-orient-adv-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_at-which-place_adv_rel"].

hvortil_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvortil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_to-which-place_adv_rel"].

hvor-til_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvor", "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_to-which-place_adv_rel"].

hvorhen_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvorhen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_to-which-place_adv_rel"].

hvorimot_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvorimot" >,
    SYNSEM.LKEYS.KEYREL.PRED "_towards-which-place_adv_rel"].

hvor-hen_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvor", "hen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_to-which-place_adv_rel"].

hvorfra_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvorfra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_from-which-place_adv_rel"].

hvor-fra_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvor", "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_from-which-place_adv_rel"].

hvoretter_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvoretter" >,
    SYNSEM.LKEYS.KEYREL.PRED "_along-what_adv_rel"].

hvorav_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorav" >,
    SYNSEM.LKEYS.KEYREL.PRED "_from-what_adv_rel"].

hvormed_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorav" >,
    SYNSEM.LKEYS.KEYREL.PRED "_with-what_adv_rel"].

hvorom_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_about-what_adv_rel"].

hvorpå_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorpå" >,
    SYNSEM.LKEYS.KEYREL.PRED "_on-what_adv_rel"].

hvorvidt_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorvidt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_to-what-extent_adv_rel"].


;;;;;;; COMPLEMENTIZERS, SELECTED PREPOSITIONS and more

å_inf-comp := inf-comp &
  [ STEM < "å" >].

å_arb-inf-comp := inf-arbref-comp &
  [ STEM < "å" >].

at_subord := decl-subord-comp &
  [ STEM < "at" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-at,
    SYNSEM.LKEYS.KEYREL.PRED "_at_comp_rel"].

; NB: correct entry, but rarely used, and doubles parses all the time
;at_main-subord := subord-maincl-comp &
;  [ STEM < "at" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_at_comp_rel"].

det_subord := pre-subord-comp &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "_det_comp_rel"].

; "virke som om"
som-om_subord := decl-subord-comp &
  [ STEM < "som", "om" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_som-om_rel"].

; "virke som"
som_subord := decl-subord-comp &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_som_rel"].

; "virke som"
likesom_subord := decl-subord-comp &
  [ STEM < "likesom" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_likesom_rel"].

; "virke som"
liksom_subord := decl-subord-comp &
  [ STEM < "liksom" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_liksom_rel"].

om_y-n-subord := y-n-quest-subord-comp &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_comp_rel"].

; from large na-lexicon
; TODO: wrong to have these as prepositions
best-som__prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "best", "som" >,
   SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel" ].

dersom_comp := prep-s-word-reg-cond &
 [ STEM < "dersom" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

enskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "enskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

ennskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "ennskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

omennskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "omennskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

uaktet_comp := prep-s-word-reg-cond &
 [ STEM < "uaktet" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

etter_som_comp := prep-s-word-reg-cond &
 [ STEM < "etter", "som" >,
   SYNSEM.LKEYS.KEYREL.PRED "cause-of_rel" ].

ettersom_comp := prep-s-word-reg-cond &
 [ STEM < "ettersom" >,
   SYNSEM.LKEYS.KEYREL.PRED "cause-of_rel" ].

;; sbu, pos i norsource: [p]
best-som_comp := prep-s-word-reg-cond & 
 [ STEM < "best","som" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_best-som_rel" ].

for_at_comp := prep-s-word-reg-cond &
 [ STEM < "for", "at" >,
   SYNSEM.LKEYS.KEYREL.PRED "purpose-of_rel" ].

forat_comp := prep-s-word-reg-cond &
 [ STEM < "forat" >,
   SYNSEM.LKEYS.KEYREL.PRED "purpose-of_rel" ].


fordi_comp := prep-s-word-reg-cond &
 [ STEM < "fordi" >,
   SYNSEM.LKEYS.KEYREL.PRED "cause-of_rel" ].

for-di_comp := prep-s-word-reg-cond &
 [ STEM < "for", "di" >,
   SYNSEM.LKEYS.KEYREL.PRED "cause-of_rel" ].

for_comp := prep-s-word-reg-cond &
 [ STEM < "for" >,
   SYNSEM.LKEYS.KEYREL.PRED "cause-of_rel" ].

siden_comp := prep-s-word-reg-cond &
 [ STEM < "siden" >,
   SYNSEM.LKEYS.KEYREL.PRED "cause-of_rel" ].

før-enn_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "før", "enn" >,
   SYNSEM.LKEYS.KEYREL.PRED "_before-time_c_rel" ].

førenn_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "førenn" >,
   SYNSEM.LKEYS.KEYREL.PRED "_before-time_c_rel" ].

i_fall_comp := prep-s-word-reg-cond &
 [ STEM < "i", "fall" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

ifall_comp := prep-s-word-reg-cond &
 [ STEM < "ifall" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

idet__prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "idet" >,
   SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel" ].

i-det__prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "i", "det" >,
   SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel" ].

med-mindre_comp := prep-s-word-reg-cond &
 [ STEM < "med", "mindre" >,
   SYNSEM.LKEYS.KEYREL.PRED "unless_rel" ].

om-enn_comp := prep-s-word-reg-cond &
 [ STEM < "om", "enn" >,
   SYNSEM.LKEYS.KEYREL.PRED "om-enn_rel" ].

mens_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "mens" >,
   SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel" ].

imens_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "imens" >,
   SYNSEM.LKEYS.KEYREL.PRED "_same_time_c_rel" ].

om_comp_cond := prep-s-word-reg-cond &
 [ STEM < "om" >,
   SYNSEM.LKEYS.KEYREL.PRED "om-rel" ].

omenn_comp := prep-s-word-reg-cond &
 [ STEM < "omenn" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

omenskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "omenskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

selv_om_comp := prep-s-word-reg-cond &
 [ STEM < "selv", "om" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

sjøl_om_comp := prep-s-word-reg-cond &
 [ STEM < "sjøl", "om" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

skjønt_comp := prep-s-word-reg-cond &
 [ STEM < "skjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "notwithstanding_rel" ].

så_framt_comp := prep-s-word-reg-cond &
 [ STEM < "så", "framt" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

så_fremt_comp := prep-s-word-reg-cond &
 [ STEM < "så", "fremt" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

såframt_comp := prep-s-word-reg-cond &
 [ STEM < "såframt" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

såfremt_comp := prep-s-word-reg-cond &
 [ STEM < "såfremt" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].

viss_comp := prep-s-word-reg-cond &
 [ STEM < "viss" >,
   SYNSEM.LKEYS.KEYREL.PRED "depend-on_rel" ].


jo_correl_cmpr_antec := some-word &
 [ STEM < "jo" >,
   SYNSEM.LKEYS.KEYREL.PRED "jo_rel" ].

jo_correl_cmpr_cons := some-word &
 [ STEM < "jo" >,
   SYNSEM.LKEYS.KEYREL.PRED "jo_rel" ].

dess_correl_cmpr_antec := some-word &
 [ STEM < "dess" >,
   SYNSEM.LKEYS.KEYREL.PRED "dess_rel" ].

dess_correl_cmpr_cons := some-word &
 [ STEM < "dess" >,
   SYNSEM.LKEYS.KEYREL.PRED "dess_rel" ].

desto_correl_cmpr_antec := some-word &
 [ STEM < "desto" >,
   SYNSEM.LKEYS.KEYREL.PRED "desto_rel" ].

desto_correl_cmpr_cons := some-word &
 [ STEM < "desto" >,
   SYNSEM.LKEYS.KEYREL.PRED "desto_rel" ].




; the "som" that sits in COMP. Combines with N by 
som_fillerrelpron := som_filler-relpron &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-fillerrelprn ].

hvilket_fillerrelpron := hvilket_filler-relpron &
  [ STEM < "hvilket" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY hvilket-fillerrelprn ].

; the "som" that sits in subject position. Combines with N by 
som_subjrelpron := som_subj-relpron &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-subjrelprn ].

hvilket_subjrelpron := hvilket_subj-relpron &
  [ STEM < "hvilket" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY hvilket-subjrelprn ].

som_subjgap := som-resumpt-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-subjgap ].

; not really used - not even grammatical
;som_anse-som-å := som-or-for-comp &
;  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-inf,
;   SYNSEM.LOCAL.CONT.RELS <! [PRED "_som_eq_rel"] !>,
;   SYNSEM.LOCAL.CONT.HCONS <!  !>].

;for_anse-for-å := som-or-for-comp &
for_anse-for-å := for-comp &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-pred-inf,
   SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_eq_rel"] !>,
   SYNSEM.LOCAL.CONT.HCONS <!  !>].

som-om_adj-pred-clse := som-adj-pred-clse-comp &
  [ STEM < "som", "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-om-pred-adj ].

som_adj-pred-clse := som-adj-pred-clse-comp &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-adj ].

som_stille-som-n := som-n-pred-comp &
  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-n ].

som_synes-som-a := som-adj-pred-pp-comp &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-adj ].


;;; punctuation

p-adv-comma := p-adv-connect-punctuation &
  [ STEM < "," > ].

p-clse-comma := p-clse-connect-punctuation &
  [ STEM < "," > ].

vcond-comma := vcond-connect-punctuation &
  [ STEM < "," > ].

vcond-hvis-comma := vcond-hvis-punctuation &
  [ STEM < "," > ].

interjct-comma := interject-connect-punctuation &
  [ STEM < "," > ].

adj-interjct-comma := adj-interject-connect-punctuation &
  [ STEM < "," > ].

direct-speech-comma := quotation-connect-punctuation &
  [ STEM < "," > ].

relcl-comma := rel-cl-connect-punctuation &
  [ STEM < "," > ].

relcl-nonrestr-comma := rel-cl-nonrestr-punctuation &
  [ STEM < "," > ].

app-comma := app-punctuation &
  [ STEM < "," >,
     SYNSEM.LKEYS.KEYREL.PRED "_punctuated_c_rel" ].

app-nonrestr-comma := app-nonrestr-punctuation &
  [ STEM < "," > ].

app-parenthesis := app-punctuation &
  [ STEM < ")" > ].

app-nonrestr-parenthesis := app-nonrestr-punctuation &
  [ STEM < "(" > ].

start-parenthesis := parenthesis-opener &
  [ STEM < "(" > ].
end-parenthesis := parenthesis-closer &
  [ STEM < ")" > ].
start-quotation := quotation-opener &
  [ STEM < "'" > ].
end-quotation := quotation-closer &
  [ STEM < "'" > ].
start-bracket := parenthesis-opener &
  [ STEM < "[" > ].
end-bracket := parenthesis-closer &
  [ STEM < "]" > ].
start-curlybracket := parenthesis-opener &
  [ STEM < "{" > ].
end-curlybracket := parenthesis-closer &
  [ STEM < "}" > ].
start-angledbracket := parenthesis-opener &
  [ STEM < "<" > ].
end-angledbracket := parenthesis-closer &
  [ STEM < ">" > ].


period := decl-end-punct &
  [ STEM < "." > ].

period-interjct := interjct-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_interjct-punctuated_rel" ] ].

;clause-comma := end-punct &
;  [ STEM < "," > ].

quest-mark := quest-end-punct &
  [ STEM < "?" > ].

quest-interjct := interjct-end-punct &
  [ STEM < "?" >,
     SYNSEM.LOCAL.CAT.HEAD [ MOD <[ LOCAL [ CONT.HOOK.INDEX.SF ques ]] > ],
     SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].

exclam-mark := commd-end-punct &
  [ STEM < "!" > ].

period-n := n-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_period-punctuated_rel" ] ].
period-adj-or-adv := adj-or-adv-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_period-punctuated_rel" ] ].
period-prep := prep-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_period-punctuated_rel" ] ].
quest-noun := n-end-punct &
  [ STEM < "?" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].
exclam-noun := n-end-punct &
  [ STEM < "!" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_exclam-punctuated_rel" ] ].
quest-prep := prep-end-punct &
  [ STEM < "?" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].
exclam-prep := prep-end-punct &
  [ STEM < "!" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_exclam-punctuated_rel" ] ].
quest-adj-or-adv := adj-or-adv-end-punct &
  [ STEM < "?" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].
exclam-adj-or-adv := adj-or-adv-end-punct &
  [ STEM < "!" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_exclam-punctuated_rel" ] ].


colon := colon-end-punct &
  [ STEM < ":" > ].

semicolon := semicolon-end-punct &
  [ STEM < ";" > ].

subordcolon := subord-colon &
  [ STEM < ":" > ].

gedankenstrech := gedankenstrech-end-punct &
  [ STEM < "-" > ].

; slashes - provisional in their category
slash := gedankenstrech-end-punct &
  [ STEM < "/" > ].

;backslash := gedankenstrech-end-punct &
;  [ STEM < "\" > ].


; conjunctions and connectives

videre_connect := p-adv-connect-adv-word &
  [ STEM < "videre" >,
    SYNSEM.LKEYS.KEYREL [PRED "_videre_conn_rel"],
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY videre-conn ]].

så_connect := p-adv-connect-adv-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL [PRED "_and-then_conn_rel"],
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY så-conn ]].

deretter_connect := p-adv-connect-adv-word &
  [ STEM < "deretter" >,
    SYNSEM.LKEYS.KEYREL [PRED "_deretter_conn_rel"],
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY deretter-conn ]].

; parse proliferation damage
og_p-adv-connect := p-adv-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og_rel"]].

og-comma_p-adv-connect := p-adv-connect-word &
  [ STEM < ",", "og" >].

og_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og_rel"]].

og-comma_p-dir-adv-connect := p-adv-dir-connect-word &
  [ STEM < ",", "og" >].

og_v-connect := v-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og_rel"]].

og-comma_v-connect := v-connect-word &
  [ STEM < ",", "og" >].

og_a-connect := a-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og_rel"]].

og-comma_a-connect := a-connect-word &
  [ STEM < ",", "og" >].

;is this ever used?  'og lykke til!'
og_interject-connect := interject-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og_rel"]].

;og_n-connect := n-connect-coord-word &
;  [ STEM < "og" >,
;;    SYNSEM.LKEYS.KEYREL [PRED "_and_rel"],
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY og-conn ]].

og_n-connect := n-connect-word &
  [ STEM < "og" >].

og-comma_n-connect := n-connect-word &
  [ STEM < ",", "og" >].

comma_n-connect := n-connect-comma &
  [ STEM < "," >].

men_v-connect := v-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men_rel"]].

men_a-connect := a-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men_rel"]].

men_n-connect := n-connect-word &
  [ STEM < "men" >].

eller_p-adv-connect := p-adv-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller-comma_p-adv-connect := p-adv-connect-word &
  [ STEM < ",", "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller-comma_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < ",", "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_v-connect := v-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller-comma_v-connect := v-connect-word &
  [ STEM < ",", "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_a-connect := a-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller-comma_a-connect := a-connect-word &
  [ STEM < ",", "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_n-connect := n-connect-word &
  [ STEM < "eller" >].

eller-comma_n-connect := n-connect-word &
  [ STEM < ",", "eller" >].

minus_n-connect := n-connect-word &
  [ STEM < "minus" >].

minus_n-connect-symb := n-connect-word &
  [ STEM < "-" >].

plus_n-connect := n-connect-word &
  [ STEM < "plus" >].

pluss_n-connect := n-connect-word &
  [ STEM < "pluss" >].

pluss_n-connect-symb := n-connect-word &
  [ STEM < "+" >].

ganger_n-connect := n-connect-word &
  [ STEM < "ganger" >].

ganget-med_n-connect := n-connect-word &
  [ STEM < "ganget", "med" >].

multiplisert-med_n-connect := n-connect-word &
  [ STEM < "multiplisert", "med" >].

multiplisert-med_n-connect-symb := n-connect-word &
  [ STEM < "x" >].

dividert-med_n-connect := n-connect-word &
  [ STEM < "dividert", "med" >].

dividert-på_n-connect := n-connect-word &
  [ STEM < "dividert", "på" >].

delt-på_n-connect := n-connect-word &
  [ STEM < "delt", "på" >].

delt-på_n-connect-symb := n-connect-word &
  [ STEM < ":" >].



;; I have altered some of the following entries to avoid generating "og", "men" og "så" at the same time.
;; Hopefully I have done so for all the relevant entries, but perhaps some have been left out by a mistake. EAA. 01.04.11

; LH020513  yielding to the 'connect'-flow
;og_n-coord := coordinating-pos-n-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

;og_card-coord := coordinating-card-card-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"], [] !> ].

;og_adv-p-coord := coordinating-pos-adv-pp-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

; LH020513  yielding to the 'connect'-flow
;og_v-coord := coordinating-pos-v-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

;og_v-dir-coord := coordinating-pos-v-dir-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

; LH 120711: seems always covered by 'og_v-coord'
;og_relclause-coord := coordinating-relcl-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

; LH020513  yielding to the 'connect'-flow
;og_adj-coord := coordinating-pos-adj-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

;eller_n-coord := coordinating-neg-n-word &
;  [ STEM < "eller" > ].

;eller_adv-p-coord := coordinating-neg-adv-pp-word &
;  [ STEM < "eller" > ].

;eller_v-coord := coordinating-neg-v-word &
;  [ STEM < "eller" > ].

;eller_adj-coord := coordinating-neg-adj-word &
;  [ STEM < "eller" > ].

; not correct, of course
;men_v-coord := coordinating-pos-v-word &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel",
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_men_conjunction_rel"] !> ].

;så_v-coord := coordinating-pos-v-word &
;  [ STEM < "så" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel",
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_så_conjunction_rel"] !> ].

; "..., for han har ikke ..."
;for_v-coord := coordinating-pos-v-word &
;  [ STEM < "for" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_conjunction_rel"] !> ].

;men_adj-coord := coordinating-neg-adj-word &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;men_adv-p-coord := coordinating-neg-adv-pp-word &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_n_coord := coordinating-n-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_adv-p-coord := coordinating-adv-pp-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_v-coord := coordinating-v-comma &
comma_v-connect := v-connect-comma &
  [ STEM < "," >,
    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_adjective-coord := coordinating-adj-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

; not obvious for what - overlaps with coordinating-v-comma, so tentatively take out
;comma_pre-coord-coord := coordinating-coord-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;både_corrcoord := correl-pos-coord-word &
;  [ STEM < "både" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_set-asserted_rel" ].

;enten_corrcoord := correl-pos-coord-word &
;  [ STEM < "enten" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_set-asserted_rel" ].

;hverken_corrcoord := correl-neg-coord-word &
;  [ STEM < "hverken" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_set-denied_rel" ].

både_corrconnect := correl-pos-connect-word &
  [ STEM < "både" >,
    SYNSEM.LKEYS.KEYREL.PRED "_set-asserted_rel" ].

enten_corrconnect := correl-pos-connect-word &
  [ STEM < "enten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_set-asserted_rel" ].

hverken_corrconnect := correl-neg-connect-word &
  [ STEM < "hverken" >,
    SYNSEM.LKEYS.KEYREL.PRED "_set-denied_rel" ].

verken_corrconnect := correl-neg-connect-word &
  [ STEM < "verken" >,
    SYNSEM.LKEYS.KEYREL.PRED "_set-denied_rel" ].



;; 'SPECIAL' COMMON NOUNS

; for a version of "gå":
fløyten_masc-inh := masc-inher-noun-lxm &
 [ INFLECTION final-full,
   STEM < "fløyten" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fløyten-k,
   SYNSEM.LKEYS.KEYREL.PRED "_fløyten_n_rel" ].

; for "få has på" - use in "få"
has_neut-inh := neut-inher-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "has" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY has-k,
   SYNSEM.LKEYS.KEYREL.PRED "_has_n_rel" ].

måte_masc := masc-relinan-noun-lxm &
	[STEM <"måte">,
	INFLECTION light-e,
	MORPH-SPLIT <"=måte=">,
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY måte-k,
	SYNSEM.LKEYS.KEYREL.PRED "_måte_n_rel"].



fare_noun-rel := masc-relinan-noun-lxm &
 [ INFLECTION light-e,
   STEM < "fare" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fare-k,
   SYNSEM.LKEYS.KEYREL.PRED "_fare_n_rel" ].


fare_noun-obl-decl  :=  masc-relinan-obl-decl-noun-lxm &
                  [ INFLECTION light-e,
                    STEM < "fare" >,
                    SYNSEM.LKEYS.KEYREL.PRED "_fare_n_rel",
                    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fare-k,
                    SYNSEM.LOCAL.KEY-SPEC for-k ].

fare_noun-obl-inf  :=  masc-relinan-obl-inf-noun-lxm &
                  [ INFLECTION light-e,
                    STEM < "fare" >,
                    SYNSEM.LKEYS.KEYREL.PRED "_fare_n_rel",
                    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fare-k,
                    SYNSEM.LOCAL.KEY-SPEC for-k ].

; this word can only be used in the connection "min/sin neste"
neste_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "neste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neste_n_rel",
            LOCAL.CAT.VAL.SPR 1-list,
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].



kone_mascorfem := mascorfem-reganim-noun-lxm &
  [ INFLECTION light-e,
    STEM < "kone" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reganim,
    SYNSEM.LKEYS.KEYREL.PRED "_kone_n_rel"].

mot_relinan := neut-relinan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "mot" >,
   SYNSEM.LKEYS.KEYREL.PRED "_mot_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY rel-mot ].

mot_relinan-obl-inf := neut-relinan-obl-inf-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "mot" >,
   SYNSEM.LKEYS.KEYREL.PRED "_mot_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY rel-mot,
   SYNSEM.LOCAL.KEY-SPEC til-k  ].

; think more about these TODO
;nei_relinan := neut-relinan-noun-lxm &
; [ INFLECTION final-full-nshort,
;   STEM < "nei" >,
;   SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG sg,
;   SYNSEM.LKEYS.KEYREL.PRED "_nei_n_rel" ].

;ja_relinan := re-noun-lxm &
; [ INFLECTION final-full-nshort,
;   STEM < "ja" >,
;   SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
;   SYNSEM.LKEYS.KEYREL.PRED "_ja_n_rel" ].

bak_relinan := masc-relinan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "bak" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bak_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY rel-bak ].

under_relinan := neut-relinan-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "under" >,
   SYNSEM.LKEYS.KEYREL.PRED "_under_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY rel-under  ].

;parse-prolif-problem 'ved siden av'
;ved_reginan := masc-reginan-noun-lxm &
; [ INFLECTION final-full,
;   STEM < "ved" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_ved_n_rel",
;   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reg-ved ].

utforskning_n_mascrel := masc-relinan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "utforskning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utforskning_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].





hundre_numb := neut-measure-amount-noun-lxm &
 [ INFLECTION light-e-nshort,
   STEM < "hundre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hundre_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

;hundre-og_numb := neut-measure-amount-noun-lxm &
; [ STEM < "hundre", "og" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_hundre_n_rel",
;   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

; "tre tusen"
tusen_numb := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "tusen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tusen_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

;tusen_neutnoun := neut-noun-lxm &
; [ INFLECTION n1-n2-n6-n7,
;   STEM < "tusen" >,
;   SYNSEM.LKEYS.KEYREL.PRED "tusen-rel" ].

; measure etc. nouns

par_neut-meas := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "par" >,
   SYNSEM.LKEYS.KEYREL.PRED "_par_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc].

dusin_neut-meas := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "dusin" >,
   SYNSEM.LKEYS.KEYREL.PRED "_dusin_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

antall_neut-meas := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "antall" >,
   SYNSEM.LKEYS.KEYREL.PRED "_antall_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

;tall_n_neut := neut-re-noun-lxm &
; [ INFLECTION infl_nshort,
;   STEM < "tall" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_tall_n_rel",
;            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

del_masc-meas := masc-measure-amount-noun-lxm &
 [ STEM < "del" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_del_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

stykk_neut-meas := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "stykk" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stykk_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-sg-spc ].

stykke_neut-meas := neut-measure-amount-noun-lxm &
 [ INFLECTION light-e-nlong,
   STEM < "stykke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stykke_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-sg-spc ].

kilo_neut-meas := mascorneut-measure-weight-noun-lxm &
  [ INFLECTION infl_m_nshort,
   STEM < "kilo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kilo_n_rel"].

kg_neut-meas := mascorneut-measure-weight-noun-lxm &
  [ INFLECTION infl_m_nshort,
   STEM < "kg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kilo_n_rel"].

sekk_masc-meas := masc-measure-vol-noun-lxm &
  [ STEM < "sekk" >,
    INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_sekk_n_rel"].

kopp_masc-meas := masc-measure-vol-noun-lxm &
 [ STEM < "kopp" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_kopp_n_rel" ].

flaske_mascorfem-meas := mascorfem-measure-vol-noun-lxm &
 [ INFLECTION light-e,
   STEM < "flaske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flaske_n_rel"] ].

glass_neut-meas := neut-measure-vol-noun-lxm &
 [ STEM < "glass" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_glass_n_rel" ].

grad_masc-meas := masc-measure-length-noun-lxm &
  [ STEM < "grad" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_grad_n_rel"].

potet_masc-reginan := masc-reginan-noun-lxm &
  [ STEM < "potet" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_potet_n_rel"].

time_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "time" >,
    INFLECTION light-e,
    SYNSEM.LKEYS.KEYREL.PRED "_time_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY timeperiod-noun].

type_meas_n_masc := masc-measure-vol-noun-lxm &
 [ INFLECTION light-e,
   STEM < "type" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY measurnoun ] ].

minutt_neut-meas := neut-measure-time-noun-lxm &
 [ STEM < "minutt" >,
   INFLECTION final-full-nlong,
   SYNSEM.LKEYS.KEYREL.PRED "_minutt_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY timeperiod-noun ].

sekund_n_neut := neut-measure-time-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "sekund" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sekund_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY timeperiod-noun ] ].

uke_n_mascorfem := mascorfem-measure-time-noun-lxm &
 [ INFLECTION light-e,
   STEM < "uke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uke_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY week-noun ] ].

år_neut-meas := neut-measure-time-noun-lxm &
 [ STEM < "år" >,
   INFLECTION final-full-nshort,
   SYNSEM.LKEYS.KEYREL.PRED "_år_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY year-noun ].

sommer_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "sommer" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_sommer_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY timemeas-noun ].

tiendejunitotusenogåtte := masc-measure-specifictime-noun-lxm &
  [ STEM < "tiendejunitotusenogåtte" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_10-06-2008_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

søndag_masc-meas := masc-measure-specifictime-noun-lxm &
  [ STEM < "søndag" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_søndag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

mandag_meas := masc-measure-specifictime-noun-lxm &
 [ STEM < "mandag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_mandag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

tirsdag_meas := masc-measure-specifictime-noun-lxm &
 [ STEM < "tirsdag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_tirsdag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

onsdag_meas := masc-measure-specifictime-noun-lxm &
 [ STEM < "onsdag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_onsdag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

torsdag_meas := masc-measure-specifictime-noun-lxm &
 [ STEM < "torsdag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_torsdag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

fredag_meas := masc-measure-specifictime-noun-lxm &
 [ STEM < "fredag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_fredag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

lørdag_meas := masc-measure-specifictime-noun-lxm &
 [ STEM < "lørdag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_lørdag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

dag_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "dag" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_dag_n_rel" ].

døgn_neut-meas := neut-measure-time-noun-lxm &
  [ STEM < "døgn" >,
    INFLECTION final-full-nshort,
    SYNSEM.LKEYS.KEYREL.PRED "_døgn_n_rel" ].

;morgen_meas := masc-measure-time-noun-lxm &
;,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun
;morgen_meas := masc-relinan-noun-lxm &
; [ STEM < "morgen" >,
;   INFLECTION final-full,
;   SYNSEM.LKEYS.KEYREL.PRED "_morgen_n_rel" ].

morgen_meas := masc-measure-time-noun-lxm &
 [ STEM < "morgen" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_morgen_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].

morges_meas := masc-measure-time-noun-lxm &
 [ STEM < "morges" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_morgen_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].
 
kveld_meas := masc-measure-time-noun-lxm &
 [ STEM < "kveld" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_kveld_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].

middag_meas := masc-measure-time-noun-lxm &
 [ STEM < "middag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_middag_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY day-and-meal ].

ettermiddag_meas := masc-measure-time-noun-lxm &
 [ STEM < "ettermiddag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_ettermiddag_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].

formiddag_meas := masc-measure-time-noun-lxm &
 [ STEM < "formiddag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_formiddag_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].

midnatt_meas := masc-measure-time-noun-lxm &
 [ STEM < "midnatt" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_midnatt_n_rel" ].

natt_meas := mascorfem-measure-time-noun-lxm &
 [ STEM < "natt" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_natt_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].

gang_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "gang" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_gang_n_rel" ].

helg_n_mascorfem-meas := masc-measure-time-noun-lxm &
 [ INFLECTION final-full,
   STEM < "helg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helg_n_rel" ] ].

kilometer_masc-meas := masc-measure-length-noun-lxm &
 [ STEM < "kilometer" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_kilometer_n_rel" ].

km_masc-meas := masc-measure-length-noun-lxm &
 [ STEM < "km" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_kilometer_n_rel" ].

meter_masc-meas := masc-measure-length-noun-lxm &
 [ STEM < "meter" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_meter_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-sg-spc ].


centimeter_masc-meas := masc-measure-length-noun-lxm &
  [ STEM < "centimeter" >,
    INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_centimeter_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-sg-spc ].

mil_mascorfem-meas := mascorfem-measure-length-noun-lxm &
  [ STEM < "mil" >,
    INFLECTION infl_m_fshort,
   SYNSEM.LKEYS.KEYREL.PRED "_mil_n_rel"].

; to be developed, like 'fot' TODO
;mann_meas := masc-measure-amount-noun-lxm &
;  [ STEM < "mann" >,
;    INFLECTION final-full,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY measurnoun,
;    SYNSEM.LKEYS.KEYREL.PRED "_mann_n_rel"].

krone_meas := mascorfem-measure-amount-noun-lxm &
 [ STEM < "krone" >,
   INFLECTION light-e,
   SYNSEM.LKEYS.KEYREL.PRED "_krone_n_rel" ].

; this is an 'absolutive' small clause. We cannot declare every noun for this type.
; as in "en krone tilbake"
;krone_dir := mascorfem-dir-noun-lxm &
; [ STEM < "krone" >,
;   INFLECTION light-e,
;   SYNSEM.LKEYS.KEYREL.PRED "_krone_n_rel" ].

vei_masc-dirnoun := masc-dir-noun-lxm &
  [ STEM < "vei" >,
    INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_vei_n_rel"].

reise_masc-dirnoun := mascorfem-dir-noun-lxm &
  [ STEM < "reise" >,
    INFLECTION light-e,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_n_rel"].

; had  one-dim-thing-vehicle, but then clash for 'hun går til bussen'. funny. Well, trying it again ...
buss_masc-dirnoun := masc-dir-noun-lxm &
  [ STEM < "buss" >,
    INFLECTION final-full,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT one-dim-thing-vehicle,
    SYNSEM.LKEYS.KEYREL.PRED "_buss_n_rel"].

flybuss_masc-dirnoun := masc-dir-noun-lxm &
  [ STEM < "flybuss" >,
    INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_flybuss_n_rel"].

;vei_regnoun := masc-noun-lxm &
;  [ STEM < "vei" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_vei_n_rel"].

vin_masc-reginan := masc-reginan-noun-lxm &
  [ STEM < "vin" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_vin_n_rel"].

;;; examples common nouns

gutt_masc-reganim := masc-reganim-noun-lxm &
  [ STEM < "gutt" >,
    INFLECTION final-full,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reganim,
    SYNSEM.LKEYS.KEYREL.PRED "_gutt_n_rel"].

ball_masc-reginan := masc-reginan-noun-lxm &
 [ STEM < "ball" >,
   INFLECTION final-full,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reginan,
   SYNSEM.LKEYS.KEYREL.PRED "_ball_n_rel" ].

mann_masc-reganim := masc-reganim-noun-lxm &
  [ STEM < "mann" >,
    INFLECTION final-full,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reganim,
    SYNSEM.LKEYS.KEYREL.PRED "_mann_n_rel"].


;;adjectives

vid_stnrd := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "vid" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_vid_a_rel" ].

forsiktig_regadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "forsiktig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_forsiktig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

kvalifisert_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "kvalifisert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kvalifisert_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

sjelden_regadj := stnd-adj-lxm &
  [ STEM < "sjelden" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sjelden_a_rel"].

tidligere_regadj := stnd-adj-lxm &
  [ STEM < "tidligere" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_tidligere_a_rel"].

blikk-stille_adj := stnd-adj-lxm & 
 [ STEM < "blikk", "stille" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_blikk-stille_adv_rel" ].

blottende-ung_adj := stnd-adj-lxm & 
 [ STEM < "blottende", "ung" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_blottende-ung_adj_rel" ].

bom-stille_adj := stnd-adj-lxm & 
 [ STEM < "bom","stille" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_bom-stille_adj_rel" ].

forsiktig_regobladj := stnd-obl-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "forsiktig" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forsiktig_a_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-assoc ]]>,
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

redd_regobladj := stnd-obl-adj-lxm &
 [ INFLECTION finstr,
   STEM < "redd" >,
   SYNSEM.LKEYS.KEYREL.PRED "_redd_a_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY for-assoc ]]>,
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

redd_tr-adj := trans-adj-lxm &
 [ INFLECTION finstr,
   STEM < "redd" >,
   SYNSEM.LKEYS.KEYREL.PRED "_redd_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

; see lang_abs
;langt_dirobladj := stnd-dir-obl-adj-lxm &
; [ INFLECTION finstr,
;   STEM < "langt" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_langt_a_rel",
;   SYNSEM.LOCAL.AGR.PNG.NG neutsg,
;   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY dir ]]>,
;   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

velkommen_dirobladj := stnd-dir-obl-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "velkommen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_velkommen_a_rel" ] ].


; this adjective need not inflect in plural.
opptatt_regobladj := stnd-obl-adj-lxm &
 [ INFLECTION finstr,
   STEM < "opptatt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_opptatt_a_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY av-assoc ]]>,
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

glad_regobladj := stnd-obl-adj-lxm &
 [ INFLECTION finstr,
   STEM < "glad" >,
   SYNSEM.LKEYS.KEYREL.PRED "_glad_a_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY i-assoc ]]>,
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

gift_regobladj := stnd-obl-adj-lxm &
 [ INFLECTION finstr,
   STEM < "gift" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gift_a_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-assoc ]]>,
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

sist_adv := adv-word-reg &
 [ STEM < "sist" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sist_adv_rel" ].

til_sammen_adv := adv-word-reg &
 [ STEM < "til", "sammen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_til_sammen_adv_rel" ].

;i_stykker_adv := adv-word-reg &
i_stykker_regadj := stnd-adj-lxm &
 [ STEM < "i", "stykker" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_i_stykker_adj_rel" ].

istykker_regadj := stnd-adj-lxm &
 [ STEM < "istykker" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_i_stykker_adj_rel" ].



; preliminary - "annen" and "samme" are non-adjectives (and mutually different)
annen_regadj := stnd-adj-lxm &
 [ STEM < "annen" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_annen_a_rel" ].

hyggelig_regadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "hyggelig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs := abs0-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

som-bestilt_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "som", "bestilt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-bestilt_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

som-bønnhørt_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "som", "bønnhørt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-bønnhørt_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

som-besattt_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "som", "besattt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-besatt_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

som-bestilt_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "som", "bestilt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-bestilt_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

som-bønnhørt_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "som", "bønnhørt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-bønnhørt_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

som-besattt_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "som", "besatt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-besatt_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs-epon-inf := abs-adj-epon-infin-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

;hyggelig_tough := tough-adj-lxm &
hyggelig_tough := abs-adj-tough-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

vanskelig_abs-epon-inf := abs-adj-epon-infin-lxm &
 [ INFLECTION nonfstr,
   STEM < "vanskelig" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vanskelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

vanskelig_tough := abs-adj-tough-lxm &
 [ INFLECTION nonfstr,
   STEM < "vanskelig" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vanskelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

herlig_tough := abs-adj-tough-lxm &
 [ INFLECTION nonfstr,
   STEM < "herlig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herlig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY absadj0 ] ].

morsom_abs := abs0-adj-lxm &
 [ INFLECTION finstr,
   STEM < "morsom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morsom_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ] ].

morsom_abs-epon-dcl := abs-adj-epon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "morsom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morsom_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ] ].

morsom_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "morsom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morsom_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ] ].

morsom_tough := abs-adj-tough-lxm &
 [ INFLECTION finstr,
   STEM < "morsom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morsom_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY absadj0 ] ].

morsom_abs-epon-inf := abs-adj-epon-infin-lxm &
 [ INFLECTION finstr,
   STEM < "morsom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morsom_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY absadj0 ] ].

synd_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "synd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_synd_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

synd_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "synd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_synd_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

synd_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "synd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_synd_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

appetittelig_tough := abs-adj-tough-lxm &
 [ INFLECTION nonfstr,
   STEM < "appetittelig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appetittelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ] ].

interessant_abs := abs0-adj-lxm &
 [ INFLECTION finstr,
   STEM < "interessant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interessant_a_rel"],
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

interessant_abs-epon-dcl := abs-adj-epon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "interessant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interessant_a_rel" ],
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

interessant_abs-epon-inf := abs-adj-epon-infin-lxm &
 [ INFLECTION finstr,
   STEM < "interessant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interessant_a_rel" ],
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

interessant_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "interessant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interessant_a_rel" ],
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

interessant_tough := abs-adj-tough-lxm &
 [ INFLECTION finstr,
   STEM < "interessant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interessant_a_rel"],
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

billig_abs := abs0-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "billig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_billig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

gratis_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "gratis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gratis_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].


#|
ofte_stnd-adj := stnd-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "ofte" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ofte_a_rel" ].
|#

trist_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "trist" >,
    SYNSEM.LKEYS.KEYREL.PRED "_trist_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

mulig_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

mulig_tough := abs-adj-tough-lxm &
  [ INFLECTION nonfstr,
    STEM < "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

umulig_tough := abs-adj-tough-lxm &
  [ INFLECTION nonfstr,
    STEM < "umulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_umulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

lenge_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "lenge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lenge_a_rel" ].

; is really plur of "annen"
;andre_stnd := stnd-adj-lxm &
; [ INFLECTION inflection,
;   STEM < "andre" >,
;   SYNSEM.LKEYS.KEYREL.PRED "andre-rel" ].

;finest := adj-lxm &
;  [ STEM < "finest" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_finest_a_rel" ].

fin_regadj := stnd-adj-lxm &
  [ INFLECTION finstr,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs-epon-inf := abs-adj-epon-infin-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

uviss_regadj := stnd-adj-lxm &
  [ INFLECTION finstr,
    STEM < "uviss" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_uviss_a_rel" ].

uviss_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "uviss" >,
    SYNSEM.LKEYS.KEYREL.PRED "_uviss_a_rel" ].

uviss_abs-epon-qst := abs-adj-epon-quest-lxm &
  [ INFLECTION finstr,
    STEM < "uviss" >,
    SYNSEM.LKEYS.KEYREL.PRED "_uviss_a_rel" ].

uviss_abs-nonepon-qst := abs-adj-nonepon-quest-lxm &
  [ INFLECTION finstr,
    STEM < "uviss" >,
    SYNSEM.LKEYS.KEYREL.PRED "_uviss_a_rel" ].

;hack:
som_bestilt_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "som", "bestilt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_bestilt_a_rel" ].

;hack:
som_utgjort_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "som", "utgjort" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_utgjort_a_rel" ].

;hack: TODO: gets ignored
som_en_drøm_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "som", "en", "drøm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_en_drøm_a_rel" ].

;hack: TODO: gets forced to undergo nominalization rule
som_en_forbannelse_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "som", "en", "forbannelse" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_en_forbannelse_a_rel" ].


ren_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "ren" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ren_a_rel" ].

varm_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "varm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_varm_a_rel" ].

kald_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "kald" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kald_a_rel" ].




; a placeholder, for "det er langt til Larvik" - see end of test-v-stnd
lang_abs-obl := abs-obl-adj-lxm &
  [ INFLECTION finstr,
    STEM < "lang" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lang_a_rel" ].

sunn_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "sunn" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sunn_a_rel" ].

overraskende_abs := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "overraskende" >,
    SYNSEM.LKEYS.KEYREL.PRED "_overraskende_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

kjedelig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "kjedelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kjedelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

ny_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "ny" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ny_a_rel" ].

høy_regadj := stnd-adj-lxm &
  [ STEM < "høy" >,
    INFLECTION finstr,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_høy_a_rel" ].

gul_regadj := stnd-adj-lxm &
  [ STEM < "gul" >,
    INFLECTION finstr,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY color,
    SYNSEM.LKEYS.KEYREL.PRED "_gul_a_rel" ].



; PRONOUNS
jeg_perspron := 1st-sg-nom-pers-pron &
  [ STEM < "jeg" >].

meg_perspron := 1st-sg-acc-pers-pron &
  [ STEM < "meg" >].

vi_perspron := 1st-pl-nom-pers-pron &
  [ STEM < "vi" >].
oss_perspron := 1st-pl-acc-pers-pron &
  [ STEM < "oss" >].

du_perspron := 2nd-sg-nom-pers-pron &
  [ STEM < "du" >].
deg_perspron := 2nd-sg-acc-pers-pron &
  [ STEM < "deg" >].
dere_perspron := 2nd-pl-pers-pron &
  [ STEM < "dere" >].

han_perspron := 3rd-sg-masc-nom-pers-pron &
  [ STEM < "han" >,
    SYNSEM.LKEYS.KEYREL.PRED "han_pron_rel" ].
hun_perspron := 3rd-sg-fem-nom-pers-pron &
  [ STEM < "hun" >,
    SYNSEM.LKEYS.KEYREL.PRED "hun_pron_rel" ].
; gives 12 extra parses for "Ola er den høyeste av guttene"... but we will
; need to split sup-adj-cum-part-lxm into two, for weak and strong adj-form,
; and then the determiner "den" will be required by the weak form "høyeste"
;LH160613 the card-to-n rules suffice
en_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "en" >,
    SYNSEM.LKEYS.KEYREL.PRED "en_pron_rel" ].
man_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "man" >,
    SYNSEM.LKEYS.KEYREL.PRED "man_pron_rel" ].
den_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "den" >,
    SYNSEM.LKEYS.KEYREL.PRED "den_pron_rel" ].
det_perspron := 3rd-sg-neut-neutsg-pers-pron &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "det_pron_rel" ].
denne_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "denne" >,
    SYNSEM.LKEYS.KEYREL.PRED "denne_pron_rel" ].
dette_perspron := 3rd-sg-neut-neutsg-pers-pron &
  [ STEM < "dette" >,
    SYNSEM.LKEYS.KEYREL.PRED "dette_pron_rel" ].
disse_perspron := 3rd-pl-pers-pron &
  [ STEM < "disse" >,
    SYNSEM.LKEYS.KEYREL.PRED "disse_pron_rel" ].
ham_perspron := 3rd-sg-masc-acc-pers-pron &
  [ STEM < "ham" >,
    SYNSEM.LKEYS.KEYREL.PRED "han_pron_rel" ].
han_perspron-acc := 3rd-sg-masc-acc-pers-pron &
  [ STEM < "han" >,
    SYNSEM.LKEYS.KEYREL.PRED "han_pron_rel" ].
henne_perspron := 3rd-sg-fem-acc-pers-pron &
  [ STEM < "henne" >,
    SYNSEM.LKEYS.KEYREL.PRED "hun_pron_rel" ].
de_perspron := 3rd-pl-nom-pers-pron &
  [ STEM < "de" >,
    SYNSEM.LKEYS.KEYREL.PRED "de_pron_rel" ].
dem_perspron := 3rd-pl-acc-pers-pron &
  [ STEM < "dem" >,
    SYNSEM.LKEYS.KEYREL.PRED "dem_pron_rel" ].

meg_refl := 1st-sg-seg-pron &
  [ STEM < "meg" >].
oss_refl := 1st-pl-seg-pron &
  [ STEM < "oss" >].
deg_refl := 2nd-sg-seg-pron &
  [ STEM < "deg" >].
dere_refl := 2nd-pl-seg-pron &
  [ STEM < "dere" >].
seg_refl := 3rd-seg-pron &
  [ STEM < "seg" >].

hverandre_refl := reciproc-pron &
  [ STEM < "hverandre" >].
hinannen_refl := reciproc-pron &
  [ STEM < "hinannen" >].



min_pre-poss := 1st-mascsg-poss-pron-pre &
  [ STEM < "min" >].

min_post-poss := 1st-mascsg-poss-pron-post &
  [ STEM < "min" >].

mi_pre-poss := 1st-sg-fem-poss-pron-pre &
  [ STEM < "mi" >].

mi_post-poss := 1st-sg-fem-poss-pron-post &
  [ STEM < "mi" >].

mitt_pre-poss := 1st-sg-neut-poss-pron-pre &
  [ STEM < "mitt" >].

mitt_post-poss := 1st-sg-neut-poss-pron-post &
  [ STEM < "mitt" >].

mine_pre-poss := 1st-sg-plur-poss-pron-pre &
  [ STEM < "mine" >].

mine_post-poss := 1st-sg-plur-poss-pron-post &
  [ STEM < "mine" >].

vår_pre-poss := 1st-pl-masc-or-fem-sg-poss-pron-pre &
  [ STEM < "vår" >].

vår_post-poss := 1st-pl-masc-or-fem-sg-poss-pron-post &
  [ STEM < "vår" >].

vårt_pre-poss := 1st-pl-neut-poss-pron-pre &
  [ STEM < "vårt" >].

vårt_post-poss := 1st-pl-neut-poss-pron-post &
  [ STEM < "vårt" >].

våre_pre-poss := 1st-pl-plur-poss-pron-pre &
  [ STEM < "våre" >].

våre_post-poss := 1st-pl-plur-poss-pron-post &
  [ STEM < "våre" >].

din_pre-poss := 2nd-mascsg-poss-pron-pre &
  [ STEM < "din" >].

din_post-poss := 2nd-mascsg-poss-pron-post &
  [ STEM < "din" >].

di_pre-poss := 2nd-sg-fem-poss-pron-pre &
  [ STEM < "di" >].

di_post-poss := 2nd-sg-fem-poss-pron-post &
  [ STEM < "di" >].

ditt_pre-poss := 2nd-sg-neut-poss-pron-pre &
  [ STEM < "ditt" >].

ditt_post-poss := 2nd-sg-neut-poss-pron-post &
  [ STEM < "ditt" >].

dine_pre-poss := 2nd-sg-plur-poss-pron-pre &
  [ STEM < "dine" >].

dine_post-poss := 2nd-sg-plur-poss-pron-post &
  [ STEM < "dine" >].

deres_2pl-pre-poss := 2nd-pl-poss-pron-pre &
  [ STEM < "deres" > ].

deres_2pl-post-poss := 2nd-pl-poss-pron-post &
  [ STEM < "deres" > ].

hans_pre-poss := 3rd-sg-masc-poss-pron-pre &
  [ STEM < "hans" > ].

hans_post-poss := 3rd-sg-masc-poss-pron-post &
  [ STEM < "hans" > ].

hennes_pre-poss := 3rd-sg-fem-poss-pron-pre &
  [ STEM < "hennes" > ].

hennes_post-poss := 3rd-sg-fem-poss-pron-post &
  [ STEM < "hennes" > ].

dens_pre-poss := 3rd-sg-neut-msc-poss-pron-pre &
  [ STEM < "dens" > ].

dens_post-poss := 3rd-sg-neut-msc-poss-pron-post &
  [ STEM < "dens" > ].

dets_pre-poss := 3rd-sg-neut-nt-poss-pron-pre &
  [ STEM < "dets" > ].

dets_post-poss := 3rd-sg-neut-nt-poss-pron-post &
  [ STEM < "dets" > ].

deres_3pl-pre-poss := 3rd-plural-poss-pron-pre &
  [ STEM < "deres" > ].

deres_3pl-post-poss := 3rd-plural-poss-pron-post &
  [ STEM < "deres" > ].

hvis_3-quest-poss := 3rd-quest-poss-word &
  [ STEM < "hvis" > ].

hvis_3-rel-poss := 3rd-rel-poss-word &
  [ STEM < "hvis" > ].

; Reflexive possessives
;;;;;; REFL: commented out until the reflexives machinery is in place,
;; with Principle B-effects for non-reflexive possessives
;; (for now they only give idle double parses)
#|
min_refl-preposs := 1st-mascsg-poss-refl-pron-pre &
  [ STEM < "min" >].

min_refl-postposs := 1st-mascsg-poss-refl-pron-post &
  [ STEM < "min" >].

mi_refl-preposs := 1st-sg-fem-poss-refl-pron-pre &
  [ STEM < "mi" >].

mi_refl-postposs := 1st-sg-fem-poss-refl-pron-post &
  [ STEM < "mi" >].

mitt_refl-preposs := 1st-sg-neut-poss-refl-pron-pre &
  [ STEM < "mitt" >].

mitt_refl-postposs := 1st-sg-neut-poss-refl-pron-post &
  [ STEM < "mitt" >].

mine_refl-preposs := 1st-sg-plur-poss-refl-pron-pre &
  [ STEM < "mine" >].

mine_refl-postposs := 1st-sg-plur-poss-refl-pron-post &
  [ STEM < "mine" >].

vår_refl-preposs := 1st-pl-masc-or-fem-sg-poss-refl-pron-pre &
  [ STEM < "vår" >].

vår_refl-postposs := 1st-pl-masc-or-fem-sg-poss-refl-pron-post &
  [ STEM < "vår" >].

vårt_refl-preposs := 1st-pl-neut-poss-refl-pron-pre &
  [ STEM < "vårt" >].

vårt_refl-postposs := 1st-pl-neut-poss-refl-pron-post &
  [ STEM < "vårt" >].

våre_refl-preposs := 1st-pl-plur-poss-refl-pron-pre &
  [ STEM < "våre" >].

våre_refl-postposs := 1st-pl-plur-poss-refl-pron-post &
  [ STEM < "våre" >].

din_refl-preposs := 2nd-mascsg-poss-refl-pron-pre &
  [ STEM < "din" >].

din_refl-postposs := 2nd-mascsg-poss-refl-pron-post &
  [ STEM < "din" >].

di_refl-preposs := 2nd-sg-fem-poss-refl-pron-pre &
  [ STEM < "di" >].

di_refl-postposs := 2nd-sg-fem-poss-refl-pron-post &
  [ STEM < "di" >].

ditt_refl-preposs := 2nd-sg-neut-poss-refl-pron-pre &
  [ STEM < "ditt" >].

ditt_refl-postposs := 2nd-sg-neut-poss-refl-pron-post &
  [ STEM < "ditt" >].

dine_refl-preposs := 2nd-sg-plur-poss-refl-pron-pre &
  [ STEM < "dine" >].

dine_refl-postposs := 2nd-sg-plur-poss-refl-pron-post &
  [ STEM < "dine" >].

deres_refl-preposs := 2nd-pl-poss-refl-pron-pre &
  [ STEM < "deres" > ].

deres_refl-postposs := 2nd-pl-poss-refl-pron-post &
  [ STEM < "deres" > ].
|#

sin_refl-preposs := 3rd-mascsg-poss-refl-pron-pre &
  [ STEM < "sin" >].

sin_refl-postposs := 3rd-mascsg-poss-refl-pron-post &
  [ STEM < "sin" >].

si_refl-preposs := 3rd-sg-fem-poss-refl-pron-pre &
  [ STEM < "si" >].

si_refl-postposs := 3rd-sg-fem-poss-refl-pron-post &
  [ STEM < "si" >].

sitt_refl-preposs := 3rd-sg-neut-poss-refl-pron-pre &
  [ STEM < "sitt" >].

sitt_refl-postposs := 3rd-sg-neut-poss-refl-pron-post &
  [ STEM < "sitt" >].

sine_refl-preposs := 3rd-plur-poss-refl-pron-pre &
  [ STEM < "sine" >].

sine_refl-postposs := 3rd-plur-poss-refl-pron-post &
  [ STEM < "sine" >].


sin_possparticle := poss-mascsg-particle-word &
  [ STEM < "sin" >].

si_possparticle := poss-femsg-particle-word &
  [ STEM < "si" >].
;
sitt_possparticle := poss-neutsg-particle-word &
  [ STEM < "sitt" >].

sine_possparticle := poss-plur-particle-word &
  [ STEM < "sine" >].

s_possparticle := poss-particle-word &
  [ STEM < "s" >].

quote_possparticle := poss-particle-word &
  [ STEM < "'s" >].

hvem_interrpron := interrog-pron-word &
  [ STEM < "hvem" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_which_person_q_rel"].

hva_interrpron := interrog-pron-word &
  [ STEM < "hva" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_what_q_rel"].

; "hvor kommer du fra", "hvor er dette?"
hvor_interrpron := interrog-pron-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_which_place_q_rel"].

; "når kommer du fra", "når er dette?"
når_interrpron := interrog-pron-word &
  [ STEM < "når" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_which_time_q_rel"].

;,
;    SYNSEM.LKEYS.KEYREL.PRED "explet_pron_rel"
det_expl := explet-pron-word &
  [ STEM < "det" > ].


; DETERMINERS & DEMONSTRATIVES
; correct items, but dem-word includes them in gross distrib, so by commenting away we halfen parse-amount
;den_def-art := det-fam-masc-or-fem-sg-word &
;  [ STEM < "den" >].

;det_def-art := det-fam-neutsg-word &
;  [ STEM < "det" >].

;de_def-art := det-fam-pl-word &
;  [ STEM < "de" >].


den_dem := dem-masc-or-fem-sg-word &
  [ STEM < "den" >,
    SYNSEM.LKEYS.KEYREL.PRED "_commsg_deict_rel"].

; gives funny generations
;hin_dem := dem-masc-or-fem-sg-word &
;  [ STEM < "hin" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_commsg_deict_rel"].

det_dem := dem-neutsg-word &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "_neutsg_deict_rel"].

de_dem := dem-pl-word &
  [ STEM < "de" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pl_deict_rel"].

; correct, but parse-costly
;den_def-q := def-q-masc-or-fem-sg-word &
;  [ STEM < "den" >].

;det_def-q := def-q-neutsg-word &
;  [ STEM < "det" >].

;de_def-q := def-q-pl-word &
;  [ STEM < "de" >].


denne_dem := dem-masc-or-fem-sg-word &
  [ STEM < "denne" >,
    SYNSEM.LKEYS.KEYREL.PRED "_proxim_deict_rel"].

dette_dem := dem-neutsg-word &
  [ STEM < "dette" >,
    SYNSEM.LKEYS.KEYREL.PRED "_proxim_deict_rel"].

disse_dem := dem-pl-word &
  [ STEM < "disse" >,
    SYNSEM.LKEYS.KEYREL.PRED "_proxim_deict_rel"].

;trying this commented out, and leaving all cases for the cardinal "en"
en_indef-art := art-mascsg-word &
  [ STEM < "en" > ].

et_indef-art := art-neutsg-word &
  [ STEM < "et" > ].

ei_indef-art := art-femsg-word &
  [ STEM < "ei" > ].

; CARDINALS

ersatz_card := plur-cardinal-word &
  [ STEM < "OneDigitErsatz" >].

2ersatz_card := plur-cardinal-word &
  [ STEM < "TwoDigitErsatz" >].

3ersatz_card := plur-cardinal-word &
  [ STEM < "ThreeDigitErsatz" >].

4ersatz_card := plur-cardinal-word &
  [ STEM < "FourDigitErsatz" >].

5ersatz_card := plur-cardinal-word &
  [ STEM < "FiveDigitErsatz" >].

;; since en_card and en_indef-art seem to overlap nearly completely, great gain in parse reduction is gotten by commenting out. én would still be card
;en_card := sg-cardinal-word &
;  [ STEM < "en" >,
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
;    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].


generic_card_ne := plur-cardinal-word &
  [ STEM < "_generic_card_ne_" >,
    TOKENS.+LIST < [ +CLASS card_ne ] > ].

; needed alongside article for 'Frode Rinnans vei en", and 'en uke senere mjauet katten'
en_card := sg-strong-cardinal-word &
  [ STEM < "en" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

én_card := sg-strong-cardinal-word &
  [ STEM < "én" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

; needed alongside article for 'in uke senere mjauet katten'
ei_card := sg-strong-cardinal-word &
  [ STEM < "ei" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG fem-sg,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

ett_card := sg-strong-cardinal-word &
  [ STEM < "ett" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

null_card := plur-cardinal-word &
  [ STEM < "null" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

null_card_dig := plur-cardinal-word &
  [ STEM < "0" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

zero_card := plur-cardinal-word &
  [ STEM < "zero" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

zero_card_dig := plur-cardinal-word &
  [ STEM < "0" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

halvannen_card := sg-strong-cardinal-word &
  [ STEM < "halvannen" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-comma-5-rel"].

halvannet_card := sg-strong-cardinal-word &
  [ STEM < "halvannet" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-comma-5-rel"].

halvanna_card := sg-strong-cardinal-word &
  [ STEM < "halvanna" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG fem-sg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-comma-5-rel"].

to_card := plur-cardinal-word &
  [ STEM < "to" >,
    SYNSEM.LKEYS.KEYREL.CARG "2-rel"].

tre_card := plur-cardinal-word &
  [ STEM < "tre" >,
    SYNSEM.LKEYS.KEYREL.CARG "3-rel"].

fire_card := plur-cardinal-word &
  [ STEM < "fire" >,
    SYNSEM.LKEYS.KEYREL.CARG "4-rel"].

fem_card := plur-cardinal-word &
  [ STEM < "fem" >,
    SYNSEM.LKEYS.KEYREL.CARG "5-rel"].

seks_card := plur-cardinal-word &
  [ STEM < "seks" >,
    SYNSEM.LKEYS.KEYREL.CARG "6-rel"].

syv_card := plur-cardinal-word &
  [ STEM < "syv" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

sju_card := plur-cardinal-word &
  [ STEM < "sju" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

åtte_card := plur-cardinal-word &
  [ STEM < "åtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "8-rel"].

ni_card := plur-cardinal-word &
  [ STEM < "ni" >,
    SYNSEM.LKEYS.KEYREL.CARG "9-rel"].

ti_card := plur-cardinal-word &
  [ STEM < "ti" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-rel"].

elleve_card := plur-cardinal-word &
  [ STEM < "elleve" >,
    SYNSEM.LKEYS.KEYREL.CARG "11-rel"].

tolv_card := plur-cardinal-word &
  [ STEM < "tolv" >,
    SYNSEM.LKEYS.KEYREL.CARG "12-rel"].

tretten_card := plur-cardinal-word &
  [ STEM < "tretten" >,
    SYNSEM.LKEYS.KEYREL.CARG "13-rel"].

fjorten_card := plur-cardinal-word &
  [ STEM < "fjorten" >,
    SYNSEM.LKEYS.KEYREL.CARG "14-rel"].

femten_card := plur-cardinal-word &
  [ STEM < "femten" >,
    SYNSEM.LKEYS.KEYREL.CARG "15-rel"].

; for 'NoW'
ti-femten_card := plur-cardinal-word &
  [ STEM < "ti-femten" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-15-rel"].

seksten_card := plur-cardinal-word &
  [ STEM < "seksten" >,
    SYNSEM.LKEYS.KEYREL.CARG "16-rel"].

sytten_card := plur-cardinal-word &
  [ STEM < "sytten" >,
    SYNSEM.LKEYS.KEYREL.CARG "17-rel"].

atten_card := plur-cardinal-word &
  [ STEM < "atten" >,
    SYNSEM.LKEYS.KEYREL.CARG "18-rel"].

nitten_card := plur-cardinal-word &
  [ STEM < "nitten" >,
    SYNSEM.LKEYS.KEYREL.CARG "19-rel"].

tyve_card := plur-cardinal-word &
  [ STEM < "tyve" >,
    SYNSEM.LKEYS.KEYREL.CARG "20-rel"].

tjue_card := plur-cardinal-word &
  [ STEM < "tjue" >,
    SYNSEM.LKEYS.KEYREL.CARG "20-rel"].

tjueen_card := plur-cardinal-word &
  [ STEM < "tjueen" >,
    SYNSEM.LKEYS.KEYREL.CARG "21-rel"].

tjueett_card := plur-cardinal-word &
  [ STEM < "tjueett" >,
    SYNSEM.LKEYS.KEYREL.CARG "21-rel"].

tjueto_card := plur-cardinal-word &
  [ STEM < "tjueto" >,
    SYNSEM.LKEYS.KEYREL.CARG "22-rel"].

tjuetre_card := plur-cardinal-word &
  [ STEM < "tjuetre" >,
    SYNSEM.LKEYS.KEYREL.CARG "23-rel"].

tjuefire_card := plur-cardinal-word &
  [ STEM < "tjuefire" >,
    SYNSEM.LKEYS.KEYREL.CARG "24-rel"].

tjuefem_card := plur-cardinal-word &
  [ STEM < "tjuefem" >,
    SYNSEM.LKEYS.KEYREL.CARG "25-rel"].

tjueseks_card := plur-cardinal-word &
  [ STEM < "tjueseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "26-rel"].

tjuesju_card := plur-cardinal-word &
  [ STEM < "tjuesju" >,
    SYNSEM.LKEYS.KEYREL.CARG "27-rel"].

tjuesyv_card := plur-cardinal-word &
  [ STEM < "tjuesyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "27-rel"].

tjueåtte_card := plur-cardinal-word &
  [ STEM < "tjueåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "28-rel"].

tjueni_card := plur-cardinal-word &
  [ STEM < "tjueni" >,
    SYNSEM.LKEYS.KEYREL.CARG "29-rel"].

tretti_card := plur-cardinal-word &
  [ STEM < "tretti" >,
    SYNSEM.LKEYS.KEYREL.CARG "30-rel"].

trettien_card := plur-cardinal-word &
  [ STEM < "trettien" >,
    SYNSEM.LKEYS.KEYREL.CARG "31-rel"].

trettito_card := plur-cardinal-word &
  [ STEM < "trettito" >,
    SYNSEM.LKEYS.KEYREL.CARG "32-rel"].

trettitre_card := plur-cardinal-word &
  [ STEM < "trettitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "33-rel"].

trettifire_card := plur-cardinal-word &
  [ STEM < "trettifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "34-rel"].

trettifem_card := plur-cardinal-word &
  [ STEM < "trettifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "35-rel"].

trettiseks_card := plur-cardinal-word &
  [ STEM < "trettiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "36-rel"].

trettisju_card := plur-cardinal-word &
  [ STEM < "trettisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "37-rel"].

trettisyv_card := plur-cardinal-word &
  [ STEM < "trettisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "37-rel"].

trettiåtte_card := plur-cardinal-word &
  [ STEM < "trettiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "38-rel"].

trettini_card := plur-cardinal-word &
  [ STEM < "trettini" >,
    SYNSEM.LKEYS.KEYREL.CARG "39-rel"].


førti_card := plur-cardinal-word &
  [ STEM < "førti" >,
    SYNSEM.LKEYS.KEYREL.CARG "40-rel"].

førtien_card := plur-cardinal-word &
  [ STEM < "førtien" >,
    SYNSEM.LKEYS.KEYREL.CARG "41-rel"].

førtito_card := plur-cardinal-word &
  [ STEM < "førtito" >,
    SYNSEM.LKEYS.KEYREL.CARG "42-rel"].

førtitre_card := plur-cardinal-word &
  [ STEM < "førtitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "43-rel"].

førtifire_card := plur-cardinal-word &
  [ STEM < "førtifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "44-rel"].

førtifem_card := plur-cardinal-word &
  [ STEM < "førtifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "45-rel"].

førtiseks_card := plur-cardinal-word &
  [ STEM < "førtiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "46-rel"].

førtisju_card := plur-cardinal-word &
  [ STEM < "førtisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "47-rel"].

førtisyv_card := plur-cardinal-word &
  [ STEM < "førtisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "47-rel"].

førtiåtte_card := plur-cardinal-word &
  [ STEM < "førtiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "48-rel"].

førtini_card := plur-cardinal-word &
  [ STEM < "førtini" >,
    SYNSEM.LKEYS.KEYREL.CARG "49-rel"].

femti_card := plur-cardinal-word &
  [ STEM < "femti" >,
    SYNSEM.LKEYS.KEYREL.CARG "50-rel"].

halvhundre_card := plur-cardinal-word &
  [ STEM < "halvhundre" >,
    SYNSEM.LKEYS.KEYREL.CARG "50-rel"].

femtien_card := plur-cardinal-word &
  [ STEM < "femtien" >,
    SYNSEM.LKEYS.KEYREL.CARG "51-rel"].

femtito_card := plur-cardinal-word &
  [ STEM < "femtito" >,
    SYNSEM.LKEYS.KEYREL.CARG "52-rel"].

femtitre_card := plur-cardinal-word &
  [ STEM < "femtitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "53-rel"].

femtifire_card := plur-cardinal-word &
  [ STEM < "femtifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "54-rel"].

femtifem_card := plur-cardinal-word &
  [ STEM < "femtifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "55-rel"].

femtiseks_card := plur-cardinal-word &
  [ STEM < "femtiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "56-rel"].

femtisju_card := plur-cardinal-word &
  [ STEM < "femtisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "57-rel"].

femtiåtte_card := plur-cardinal-word &
  [ STEM < "femtiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "58-rel"].

femtini_card := plur-cardinal-word &
  [ STEM < "femtini" >,
    SYNSEM.LKEYS.KEYREL.CARG "59-rel"].

seksti_card := plur-cardinal-word &
  [ STEM < "seksti" >,
    SYNSEM.LKEYS.KEYREL.CARG "60-rel"].

sekstien_card := plur-cardinal-word &
  [ STEM < "sekstien" >,
    SYNSEM.LKEYS.KEYREL.CARG "61-rel"].

sekstito_card := plur-cardinal-word &
  [ STEM < "sekstito" >,
    SYNSEM.LKEYS.KEYREL.CARG "62-rel"].

sekstitre_card := plur-cardinal-word &
  [ STEM < "sekstitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "63-rel"].

sekstifire_card := plur-cardinal-word &
  [ STEM < "sekstifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "64-rel"].

sekstifem_card := plur-cardinal-word &
  [ STEM < "sekstifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "65-rel"].

sekstiseks_card := plur-cardinal-word &
  [ STEM < "sekstiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "66-rel"].

sekstisju_card := plur-cardinal-word &
  [ STEM < "sekstisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "67-rel"].

sekstisyv_card := plur-cardinal-word &
  [ STEM < "sekstisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "67-rel"].

sekstiåtte_card := plur-cardinal-word &
  [ STEM < "sekstiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "68-rel"].

sekstini_card := plur-cardinal-word &
  [ STEM < "sekstini" >,
    SYNSEM.LKEYS.KEYREL.CARG "69-rel"].


sytti_card := plur-cardinal-word &
  [ STEM < "sytti" >,
    SYNSEM.LKEYS.KEYREL.CARG "70-rel"].


syttien_card := plur-cardinal-word &
  [ STEM < "syttien" >,
    SYNSEM.LKEYS.KEYREL.CARG "71-rel"].

syttito_card := plur-cardinal-word &
  [ STEM < "syttito" >,
    SYNSEM.LKEYS.KEYREL.CARG "72-rel"].

syttitre_card := plur-cardinal-word &
  [ STEM < "syttitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "73-rel"].

syttifire_card := plur-cardinal-word &
  [ STEM < "syttifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "74-rel"].

syttifem_card := plur-cardinal-word &
  [ STEM < "syttifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "75-rel"].

syttiseks_card := plur-cardinal-word &
  [ STEM < "syttiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "76-rel"].

syttisju_card := plur-cardinal-word &
  [ STEM < "syttisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "77-rel"].

syttisyv_card := plur-cardinal-word &
  [ STEM < "syttisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "77-rel"].

syttiåtte_card := plur-cardinal-word &
  [ STEM < "syttiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "78-rel"].

syttini_card := plur-cardinal-word &
  [ STEM < "syttini" >,
    SYNSEM.LKEYS.KEYREL.CARG "79-rel"].


åtti_card := plur-cardinal-word &
  [ STEM < "åtti" >,
    SYNSEM.LKEYS.KEYREL.CARG "80-rel"].

åttien_card := plur-cardinal-word &
  [ STEM < "åttien" >,
    SYNSEM.LKEYS.KEYREL.CARG "81-rel"].

åttito_card := plur-cardinal-word &
  [ STEM < "åttito" >,
    SYNSEM.LKEYS.KEYREL.CARG "82-rel"].

åttitre_card := plur-cardinal-word &
  [ STEM < "åttitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "83-rel"].

åttifire_card := plur-cardinal-word &
  [ STEM < "åttifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "84-rel"].

åttifem_card := plur-cardinal-word &
  [ STEM < "åttifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "85-rel"].

åttiseks_card := plur-cardinal-word &
  [ STEM < "åttiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "86-rel"].

åttisju_card := plur-cardinal-word &
  [ STEM < "åttisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "87-rel"].

åttisyv_card := plur-cardinal-word &
  [ STEM < "åttisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "87-rel"].

åttiåtte_card := plur-cardinal-word &
  [ STEM < "åttiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "88-rel"].

åttini_card := plur-cardinal-word &
  [ STEM < "åttini" >,
    SYNSEM.LKEYS.KEYREL.CARG "89-rel"].

nitti_card := plur-cardinal-word &
  [ STEM < "nitti" >,
    SYNSEM.LKEYS.KEYREL.CARG "90-rel"].

nittien_card := plur-cardinal-word &
  [ STEM < "nittien" >,
    SYNSEM.LKEYS.KEYREL.CARG "91-rel"].

nittito_card := plur-cardinal-word &
  [ STEM < "nittito" >,
    SYNSEM.LKEYS.KEYREL.CARG "92-rel"].

nittitre_card := plur-cardinal-word &
  [ STEM < "nittitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "93-rel"].

nittifire_card := plur-cardinal-word &
  [ STEM < "nittifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "94-rel"].

nittifem_card := plur-cardinal-word &
  [ STEM < "nittifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "95-rel"].

nittiseks_card := plur-cardinal-word &
  [ STEM < "nittiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "96-rel"].

nittisju_card := plur-cardinal-word &
  [ STEM < "nittisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "97-rel"].

nittisyv_card := plur-cardinal-word &
  [ STEM < "nittisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "97-rel"].

nittiåtte_card := plur-cardinal-word &
  [ STEM < "nittiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "98-rel"].

nittini_card := plur-cardinal-word &
  [ STEM < "nittini" >,
    SYNSEM.LKEYS.KEYREL.CARG "99-rel"].


hundre_card := plur-cardinal-word &
  [ STEM < "hundre" >,
    SYNSEM.LKEYS.KEYREL.CARG "100-rel"].

tusen_card := plur-cardinal-word &
  [ STEM < "tusen" >,
    SYNSEM.LKEYS.KEYREL.CARG "1000-rel"].

tusen_card-dig := plur-cardinal-word &
  [ STEM < "1000" >,
    SYNSEM.LKEYS.KEYREL.CARG "1000-rel"].

tusen-og-tredve_card-dig := plur-cardinal-word &
  [ STEM < "1030" >,
    SYNSEM.LKEYS.KEYREL.CARG "1030-rel"].


;number-ersatz := n_proper_le &
; [ STEM < "numberersatz" > ].

#|
number-ersatz := proper-name-word &
 [ STEM < "numberersatz" > ].
numvalcard1digit := plur-cardinal-word &
 [ STEM < "onedigitersatz" > ].
numvalcard2digit := plur-cardinal-word &
 [ STEM < "twodigitersatz" > ].
numvalcard3digit := plur-cardinal-word &
 [ STEM < "ThreeDigitErsatz" > ].
|#

null_card-dig := plur-cardinal-word &
  [ STEM < "0" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

en_card-dig := plur-cardinal-word &
  [ STEM < "1" >,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

to_card-dig := plur-cardinal-word &
  [ STEM < "2" >,
    SYNSEM.LKEYS.KEYREL.CARG "2-rel"].

tre_card-dig := plur-cardinal-word &
  [ STEM < "3" >,
    SYNSEM.LKEYS.KEYREL.CARG "3-rel"].

fire_card-dig := plur-cardinal-word &
  [ STEM < "4" >,
    SYNSEM.LKEYS.KEYREL.CARG "4-rel"].

fem_card-dig := plur-cardinal-word &
  [ STEM < "5" >,
    SYNSEM.LKEYS.KEYREL.CARG "5-rel"].

seks_card-dig := plur-cardinal-word &
  [ STEM < "6" >,
    SYNSEM.LKEYS.KEYREL.CARG "6-rel"].

sju_card-dig := plur-cardinal-word &
  [ STEM < "7" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

åtte_card-dig := plur-cardinal-word &
  [ STEM < "8" >,
    SYNSEM.LKEYS.KEYREL.CARG "8-rel"].

ni_card-dig := plur-cardinal-word &
  [ STEM < "9" >,
    SYNSEM.LKEYS.KEYREL.CARG "9-rel"].

;ti_card-dig := plur-cardinal-word &
;  [ STEM < "10" >,
;    SYNSEM.LKEYS.KEYREL.CARG "10-rel"].

ti_card-dig := plur-cardinal-word &
  [ STEM < "10" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-rel"].

elleve_card-dig := plur-cardinal-word &
  [ STEM < "11" >,
    SYNSEM.LKEYS.KEYREL.CARG "11-rel"].

tolv_card-dig := plur-cardinal-word &
  [ STEM < "12" >,
    SYNSEM.LKEYS.KEYREL.CARG "12-rel"].

tretten_card-dig := plur-cardinal-word &
  [ STEM < "13" >,
    SYNSEM.LKEYS.KEYREL.CARG "13-rel"].

fjorten_card-dig := plur-cardinal-word &
  [ STEM < "14" >,
    SYNSEM.LKEYS.KEYREL.CARG "14-rel"].

femten_card-dig := plur-cardinal-word &
  [ STEM < "15" >,
    SYNSEM.LKEYS.KEYREL.CARG "15-rel"].

; for 'NoW'
ti-femten_card-dig := plur-cardinal-word &
  [ STEM < "10-15" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-15-rel"].

seksten_card-dig := plur-cardinal-word &
  [ STEM < "16" >,
    SYNSEM.LKEYS.KEYREL.CARG "16-rel"].

sytten_card-dig := plur-cardinal-word &
  [ STEM < "17" >,
    SYNSEM.LKEYS.KEYREL.CARG "17-rel"].

atten_card-dig := plur-cardinal-word &
  [ STEM < "18" >,
    SYNSEM.LKEYS.KEYREL.CARG "18-rel"].

nitten_card-dig := plur-cardinal-word &
  [ STEM < "19" >,
    SYNSEM.LKEYS.KEYREL.CARG "19-rel"].

tyve_card-dig := plur-cardinal-word &
  [ STEM < "20" >,
    SYNSEM.LKEYS.KEYREL.CARG "20-rel"].

tjueen_card-dig := plur-cardinal-word &
  [ STEM < "21" >,
    SYNSEM.LKEYS.KEYREL.CARG "21-rel"].

tjueto_card-dig := plur-cardinal-word &
  [ STEM < "22" >,
    SYNSEM.LKEYS.KEYREL.CARG "22-rel"].

tjuetre_card-dig := plur-cardinal-word &
  [ STEM < "23" >,
    SYNSEM.LKEYS.KEYREL.CARG "23-rel"].

tjuefire_card-dig := plur-cardinal-word &
  [ STEM < "24" >,
    SYNSEM.LKEYS.KEYREL.CARG "24-rel"].

tjuefem_card-dig := plur-cardinal-word &
  [ STEM < "25" >,
    SYNSEM.LKEYS.KEYREL.CARG "25-rel"].

tjueseks_card-dig := plur-cardinal-word &
  [ STEM < "26" >,
    SYNSEM.LKEYS.KEYREL.CARG "26-rel"].

tjuesju_card-dig := plur-cardinal-word &
  [ STEM < "27" >,
    SYNSEM.LKEYS.KEYREL.CARG "27-rel"].

tjueåtte_card-dig := plur-cardinal-word &
  [ STEM < "28" >,
    SYNSEM.LKEYS.KEYREL.CARG "28-rel"].

tjueni_card-dig := plur-cardinal-word &
  [ STEM < "29" >,
    SYNSEM.LKEYS.KEYREL.CARG "29-rel"].

tretti_card-dig := plur-cardinal-word &
  [ STEM < "30" >,
    SYNSEM.LKEYS.KEYREL.CARG "30-rel"].

trettien_card-dig := plur-cardinal-word &
  [ STEM < "31" >,
    SYNSEM.LKEYS.KEYREL.CARG "31-rel"].

trettito_card-dig := plur-cardinal-word &
  [ STEM < "32" >,
    SYNSEM.LKEYS.KEYREL.CARG "32-rel"].

trettitre_card-dig := plur-cardinal-word &
  [ STEM < "33" >,
    SYNSEM.LKEYS.KEYREL.CARG "33-rel"].

trettifire_card-dig := plur-cardinal-word &
  [ STEM < "34" >,
    SYNSEM.LKEYS.KEYREL.CARG "34-rel"].

trettifem_card-dig := plur-cardinal-word &
  [ STEM < "35" >,
    SYNSEM.LKEYS.KEYREL.CARG "35-rel"].

trettiseks_card-dig := plur-cardinal-word &
  [ STEM < "36" >,
    SYNSEM.LKEYS.KEYREL.CARG "36-rel"].

trettisju_card-dig := plur-cardinal-word &
  [ STEM < "37" >,
    SYNSEM.LKEYS.KEYREL.CARG "37-rel"].

trettiåtte_card-dig := plur-cardinal-word &
  [ STEM < "38" >,
    SYNSEM.LKEYS.KEYREL.CARG "38-rel"].

trettini_card-dig := plur-cardinal-word &
  [ STEM < "39" >,
    SYNSEM.LKEYS.KEYREL.CARG "39-rel"].


førti_card-dig := plur-cardinal-word &
  [ STEM < "40" >,
    SYNSEM.LKEYS.KEYREL.CARG "40-rel"].

førtien_card-dig := plur-cardinal-word &
  [ STEM < "41" >,
    SYNSEM.LKEYS.KEYREL.CARG "41-rel"].

førtito_card-dig := plur-cardinal-word &
  [ STEM < "42" >,
    SYNSEM.LKEYS.KEYREL.CARG "42-rel"].

førtitre_card-dig := plur-cardinal-word &
  [ STEM < "43" >,
    SYNSEM.LKEYS.KEYREL.CARG "43-rel"].

førtifire_card-dig := plur-cardinal-word &
  [ STEM < "44" >,
    SYNSEM.LKEYS.KEYREL.CARG "44-rel"].

førtifem_card-dig := plur-cardinal-word &
  [ STEM < "45" >,
    SYNSEM.LKEYS.KEYREL.CARG "45-rel"].

førtiseks_card-dig := plur-cardinal-word &
  [ STEM < "46" >,
    SYNSEM.LKEYS.KEYREL.CARG "46-rel"].

førtisju_card-dig := plur-cardinal-word &
  [ STEM < "47" >,
    SYNSEM.LKEYS.KEYREL.CARG "47-rel"].

førtiåtte_card-dig := plur-cardinal-word &
  [ STEM < "48" >,
    SYNSEM.LKEYS.KEYREL.CARG "48-rel"].

førtini_card-dig := plur-cardinal-word &
  [ STEM < "49" >,
    SYNSEM.LKEYS.KEYREL.CARG "49-rel"].

femti_card-dig := plur-cardinal-word &
  [ STEM < "50" >,
    SYNSEM.LKEYS.KEYREL.CARG "50-rel"].

femtien_card-dig := plur-cardinal-word &
  [ STEM < "51" >,
    SYNSEM.LKEYS.KEYREL.CARG "51-rel"].

femtito_card-dig := plur-cardinal-word &
  [ STEM < "52" >,
    SYNSEM.LKEYS.KEYREL.CARG "52-rel"].

femtitre_card-dig := plur-cardinal-word &
  [ STEM < "53" >,
    SYNSEM.LKEYS.KEYREL.CARG "53-rel"].

femtifire_card-dig := plur-cardinal-word &
  [ STEM < "54" >,
    SYNSEM.LKEYS.KEYREL.CARG "54-rel"].

femtifem_card-dig := plur-cardinal-word &
  [ STEM < "55" >,
    SYNSEM.LKEYS.KEYREL.CARG "55-rel"].

femtiseks_card-dig := plur-cardinal-word &
  [ STEM < "56" >,
    SYNSEM.LKEYS.KEYREL.CARG "56-rel"].

femtisju_card-dig := plur-cardinal-word &
  [ STEM < "57" >,
    SYNSEM.LKEYS.KEYREL.CARG "57-rel"].

femtiåtte_card-dig := plur-cardinal-word &
  [ STEM < "58" >,
    SYNSEM.LKEYS.KEYREL.CARG "58-rel"].

femtini_card-dig := plur-cardinal-word &
  [ STEM < "59" >,
    SYNSEM.LKEYS.KEYREL.CARG "59-rel"].

seksti_card-dig := plur-cardinal-word &
  [ STEM < "60" >,
    SYNSEM.LKEYS.KEYREL.CARG "60-rel"].

sekstien_card-dig := plur-cardinal-word &
  [ STEM < "61" >,
    SYNSEM.LKEYS.KEYREL.CARG "61-rel"].

sekstito_card-dig := plur-cardinal-word &
  [ STEM < "62" >,
    SYNSEM.LKEYS.KEYREL.CARG "62-rel"].

sekstitre_card-dig := plur-cardinal-word &
  [ STEM < "63" >,
    SYNSEM.LKEYS.KEYREL.CARG "63-rel"].

sekstifire_card-dig := plur-cardinal-word &
  [ STEM < "64" >,
    SYNSEM.LKEYS.KEYREL.CARG "64-rel"].

sekstifem_card-dig := plur-cardinal-word &
  [ STEM < "65" >,
    SYNSEM.LKEYS.KEYREL.CARG "65-rel"].

sekstiseks_card-dig := plur-cardinal-word &
  [ STEM < "66" >,
    SYNSEM.LKEYS.KEYREL.CARG "66-rel"].

sekstisju_card-dig := plur-cardinal-word &
  [ STEM < "67" >,
    SYNSEM.LKEYS.KEYREL.CARG "67-rel"].

sekstiåtte_card-dig := plur-cardinal-word &
  [ STEM < "68" >,
    SYNSEM.LKEYS.KEYREL.CARG "68-rel"].

sekstini_card-dig := plur-cardinal-word &
  [ STEM < "69" >,
    SYNSEM.LKEYS.KEYREL.CARG "69-rel"].


sytti_card-dig := plur-cardinal-word &
  [ STEM < "70" >,
    SYNSEM.LKEYS.KEYREL.CARG "70-rel"].


syttien_card-dig := plur-cardinal-word &
  [ STEM < "71" >,
    SYNSEM.LKEYS.KEYREL.CARG "71-rel"].

syttito_card-dig := plur-cardinal-word &
  [ STEM < "72" >,
    SYNSEM.LKEYS.KEYREL.CARG "72-rel"].

syttitre_card-dig := plur-cardinal-word &
  [ STEM < "73" >,
    SYNSEM.LKEYS.KEYREL.CARG "73-rel"].

syttifire_card-dig := plur-cardinal-word &
  [ STEM < "74" >,
    SYNSEM.LKEYS.KEYREL.CARG "74-rel"].

syttifem_card-dig := plur-cardinal-word &
  [ STEM < "75" >,
    SYNSEM.LKEYS.KEYREL.CARG "75-rel"].

syttiseks_card-dig := plur-cardinal-word &
  [ STEM < "76" >,
    SYNSEM.LKEYS.KEYREL.CARG "76-rel"].

syttisju_card-dig := plur-cardinal-word &
  [ STEM < "77" >,
    SYNSEM.LKEYS.KEYREL.CARG "77-rel"].

syttiåtte_card-dig := plur-cardinal-word &
  [ STEM < "78" >,
    SYNSEM.LKEYS.KEYREL.CARG "78-rel"].

syttini_card-dig := plur-cardinal-word &
  [ STEM < "79" >,
    SYNSEM.LKEYS.KEYREL.CARG "79-rel"].


åtti_card-dig := plur-cardinal-word &
  [ STEM < "80" >,
    SYNSEM.LKEYS.KEYREL.CARG "80-rel"].

åttien_card-dig := plur-cardinal-word &
  [ STEM < "81" >,
    SYNSEM.LKEYS.KEYREL.CARG "81-rel"].

åttito_card-dig := plur-cardinal-word &
  [ STEM < "82" >,
    SYNSEM.LKEYS.KEYREL.CARG "82-rel"].

åttitre_card-dig := plur-cardinal-word &
  [ STEM < "83" >,
    SYNSEM.LKEYS.KEYREL.CARG "83-rel"].

åttifire_card-dig := plur-cardinal-word &
  [ STEM < "84" >,
    SYNSEM.LKEYS.KEYREL.CARG "84-rel"].

åttifem_card-dig := plur-cardinal-word &
  [ STEM < "85" >,
    SYNSEM.LKEYS.KEYREL.CARG "85-rel"].

åttiseks_card-dig := plur-cardinal-word &
  [ STEM < "86" >,
    SYNSEM.LKEYS.KEYREL.CARG "86-rel"].

åttisju_card-dig := plur-cardinal-word &
  [ STEM < "87" >,
    SYNSEM.LKEYS.KEYREL.CARG "87-rel"].

åttiåtte_card-dig := plur-cardinal-word &
  [ STEM < "88" >,
    SYNSEM.LKEYS.KEYREL.CARG "88-rel"].

åttini_card-dig := plur-cardinal-word &
  [ STEM < "89" >,
    SYNSEM.LKEYS.KEYREL.CARG "89-rel"].

nitti_card-dig := plur-cardinal-word &
  [ STEM < "90" >,
    SYNSEM.LKEYS.KEYREL.CARG "90-rel"].

nittien_card-dig := plur-cardinal-word &
  [ STEM < "91" >,
    SYNSEM.LKEYS.KEYREL.CARG "91-rel"].

nittito_card-dig := plur-cardinal-word &
  [ STEM < "92" >,
    SYNSEM.LKEYS.KEYREL.CARG "92-rel"].

nittitre_card-dig := plur-cardinal-word &
  [ STEM < "93" >,
    SYNSEM.LKEYS.KEYREL.CARG "93-rel"].

nittifire_card-dig := plur-cardinal-word &
  [ STEM < "94" >,
    SYNSEM.LKEYS.KEYREL.CARG "94-rel"].

nittifem_card-dig := plur-cardinal-word &
  [ STEM < "95" >,
    SYNSEM.LKEYS.KEYREL.CARG "95-rel"].

nittiseks_card-dig := plur-cardinal-word &
  [ STEM < "96" >,
    SYNSEM.LKEYS.KEYREL.CARG "96-rel"].

nittisju_card-dig := plur-cardinal-word &
  [ STEM < "97" >,
    SYNSEM.LKEYS.KEYREL.CARG "97-rel"].

nittiåtte_card-dig := plur-cardinal-word &
  [ STEM < "98" >,
    SYNSEM.LKEYS.KEYREL.CARG "98-rel"].

nittini_card-dig := plur-cardinal-word &
  [ STEM < "99" >,
    SYNSEM.LKEYS.KEYREL.CARG "99-rel"].

hundre_card-dig := plur-cardinal-word &
  [ STEM < "100" >,
    SYNSEM.LKEYS.KEYREL.CARG "100-rel"].

to-hundre_card-dig := plur-cardinal-word &
  [ STEM < "200" >,
    SYNSEM.LKEYS.KEYREL.CARG "200-rel"].

tre-hundre_card-dig := plur-cardinal-word &
  [ STEM < "300" >,
    SYNSEM.LKEYS.KEYREL.CARG "300-rel"].

fire-hundre_card-dig := plur-cardinal-word &
  [ STEM < "400" >,
    SYNSEM.LKEYS.KEYREL.CARG "400-rel"].

fem-hundre_card-dig := plur-cardinal-word &
  [ STEM < "500" >,
    SYNSEM.LKEYS.KEYREL.CARG "500-rel"].

seks-hundre_card-dig := plur-cardinal-word &
  [ STEM < "600" >,
    SYNSEM.LKEYS.KEYREL.CARG "600-rel"].

syv-hundre_card-dig := plur-cardinal-word &
  [ STEM < "700" >,
    SYNSEM.LKEYS.KEYREL.CARG "700-rel"].

åtte-hundre_card-dig := plur-cardinal-word &
  [ STEM < "800" >,
    SYNSEM.LKEYS.KEYREL.CARG "800-rel"].

ni-hundre_card-dig := plur-cardinal-word &
  [ STEM < "900" >,
    SYNSEM.LKEYS.KEYREL.CARG "900-rel"].



ene_card-weak := sg-weak-cardinal-word &
  [ STEM < "ene" >,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].


klokka_det := klokka-word &
  [ STEM < "klokka" >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

klokken_det := klokka-word &
  [ STEM < "klokken" >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

kl_det := klokka-word &
  [ STEM < "kl" >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

kl_period_det := klokka-word &
  [ STEM < "kl", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

anno_det := klokka-word &
  [ STEM < "anno" >,
    SYNSEM.LKEYS.KEYREL.PRED "year-number-rel"  ].

; applies in "nr tolv brenner", with 'tolv' as post-head specifier (card-mod-head-initial-indefinite-rule)
nummer_det := klokka-word &
  [ STEM < "nummer" >,
    SYNSEM.LKEYS.KEYREL.PRED "number-in-order-rel"  ].

nr-dot_det := klokka-word &
  [ STEM < "nr", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "number-in-order-rel"  ].

nr_det := klokka-word &
  [ STEM < "nr" >,
    SYNSEM.LKEYS.KEYREL.PRED "number-in-order-rel"  ].

;tidlig_det := klokka-bare-word &
;  [ STEM < "tidlig" >,
;    SYNSEM.LKEYS.KEYREL.PRED "tidlig-rel" ].

; new approach - 'nummer' like indef-card-quantifier-word-sup
; applies in "bygg nr tolv brenner", as a specifier relative to 'tolv' (head-spec-det-rule)
;nummer_param-word := numerical-parameter-word &
;  [ STEM < "nummer" >,
;    SYNSEM.LKEYS.KEYREL.PRED "number-in-order_q_rel"  ].

;nr_param-word := numerical-parameter-word &
;  [ STEM < "nr" >,
;    SYNSEM.LKEYS.KEYREL.PRED "number-in-order_q_rel"  ].

;nr_period_param-word := numerical-parameter-word &
;  [ STEM < "nr." >,
;    SYNSEM.LKEYS.KEYREL.PRED "number-in-order_q_rel"  ].



; ORDINALS

første_ordinal := ordinal-word &
  [ STEM < "første" >,
    SYNSEM.LKEYS.KEYREL.CARG "1st-rel"].

medio_ordinal := ordinal-word &
  [ STEM < "medio" >,
    SYNSEM.LKEYS.KEYREL.CARG "medio-rel"].

primo_ordinal := ordinal-word &
  [ STEM < "primo" >,
    SYNSEM.LKEYS.KEYREL.CARG "primo-rel"].

ultimo_ordinal := ordinal-word &
  [ STEM < "ultimo" >,
    SYNSEM.LKEYS.KEYREL.CARG "ultimo-rel"].

;eneste_ordinal := ordinal-word &
;  [ STEM < "eneste" >,
;    SYNSEM.LKEYS.KEYREL.CARG "only-rel"].

;neste_ordinal := ordinal-word &
;  [ STEM < "neste" >,
;    SYNSEM.LKEYS.KEYREL.CARG "next-rel"].

siste_ordinal := ordinal-word &
  [ STEM < "siste" >,
    SYNSEM.LKEYS.KEYREL.CARG "last-rel"].

annen_ordinal := ordinal-word &
  [ STEM < "annen" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg, 
    SYNSEM.LKEYS.KEYREL.CARG "2nd-rel"].

annet_ordinal := ordinal-word &
  [ STEM < "annet" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg, 
    SYNSEM.LKEYS.KEYREL.CARG "2nd-rel"].

; out for the NoW-application, since there is an "Anna" in the NoW cast
;anna_ordinal := ordinal-word &
;  [ STEM < "anna" >,
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG fem-sg, 
;    SYNSEM.LKEYS.KEYREL.CARG "2nd-rel"].

andre_ordinal := ordinal-word &
  [ STEM < "andre" >,
    SYNSEM.LKEYS.KEYREL.CARG "2nd-rel"].

tredje_ordinal := ordinal-word &
  [ STEM < "tredje" >,
    SYNSEM.LKEYS.KEYREL.CARG "3rd-rel"].

fjerde_ordinal := ordinal-word &
  [ STEM < "fjerde" >,
    SYNSEM.LKEYS.KEYREL.CARG "4th-rel"].

femte_ordinal := ordinal-word &
  [ STEM < "femte" >,
    SYNSEM.LKEYS.KEYREL.CARG "5th-rel"].

sjette_ordinal := ordinal-word &
  [ STEM < "sjette" >,
    SYNSEM.LKEYS.KEYREL.CARG "6th-rel"].

syvende_ordinal := ordinal-word &
  [ STEM < "syvende" >,
    SYNSEM.LKEYS.KEYREL.CARG "7th-rel"].

sjuende_ordinal := ordinal-word &
  [ STEM < "sjuende" >,
    SYNSEM.LKEYS.KEYREL.CARG "7th-rel"].

åttende_ordinal := ordinal-word &
  [ STEM < "åttende" >,
    SYNSEM.LKEYS.KEYREL.CARG "8th-rel"].

niende_ordinal := ordinal-word &
  [ STEM < "niende" >,
    SYNSEM.LKEYS.KEYREL.CARG "9th-rel"].

tiende_ordinal := ordinal-word &
  [ STEM < "tiende" >,
    SYNSEM.LKEYS.KEYREL.CARG "10th-rel"].

; to be developed, as a kind of comparative
samme_dem := dem-word &
    [ STEM < "samme" >,
      SYNSEM.LKEYS.KEYREL.PRED "_samme_rel" ].

samme_def-q := def-q-word &
    [ STEM < "samme" > ].

samme_adj := freestnding-weak-adj-word &
    [ STEM < "samme" > ].

; QUANTITY-WORDS
mange_adj := stnd-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "mange" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

få_adj := stnd-adj-lxm &
  [ INFLECTION finstr,
    STEM < "få" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LOCAL.AGR.PNG.NG pl,
    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

;flere_cmpar-count := cmpar-count-quantity-word &
;  [ STEM < "flere" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

;færre_cmpar-count := cmpar-count-quantity-word &
;  [ STEM < "færre" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

mer_cmpar-mass3 := cmpar-mass-quantity-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

;mindre_cmpar-mass := cmpar-mass-quantity-word &
;  [ STEM < "mindre" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_lite_rel"].

mer_cmpar-mass := quant-indef-adjcard-sg-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mindre_cmpar-mass := quant-indef-adjcard-sg-word &
 [ STEM < "mindre" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

mer_cmpar-mass2 := quant-indef-adjcard2-sg-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mindre_cmpar-mass2 := quant-indef-adjcard2-sg-word &
 [ STEM < "mindre" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

flest_superlat-str-count := superlat-count-strong-quantity-word &
  [ STEM < "flest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

flest_superlat-post-count := superlat-count-post-quantity-word &
  [ STEM < "flest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

færrest_superlat-str-count := superlat-count-strong-quantity-word &
  [ STEM < "færrest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

mest_superlat-str-mass := superlat-mass-strong-quantity-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

minst_superlat-str-mass := superlat-mass-strong-quantity-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_rel"].

fleste_superlat-wk-count := superlat-count-weak-quantity-word &
  [ STEM < "fleste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

færreste_superlat-wk-count := superlat-count-weak-quantity-word &
  [ STEM < "færreste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

meste_superlat-wk-mass := superlat-mass-weak-quantity-word &
  [ STEM < "meste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

minste_superlat-wk-mass := superlat-mass-weak-quantity-word &
  [ STEM < "minste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_rel"].

; seem not needed. and semantics wrong anyway
;fleste_superlat-cum-part-count := superlat-cum-part-count-quantity-word &
;  [ STEM < "fleste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

;færreste_superlat-cum-part-count := superlat-cum-part-count-quantity-word &
;  [ STEM < "færreste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

;meste_superlat-cum-part-mass := superlat-cum-part-mass-quantity-word &
;  [ STEM < "meste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

;minste_superlat-cum-part-mass := superlat-cum-part-mass-quantity-word &
;  [ STEM < "minste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_lite_rel"].



ingen_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "ingen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_no_q_rel" ].

ingen_indef-quant-sg := quant-indef-nonpart-masc-or-fem-sg-word &
  [ STEM < "ingen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_no_q_rel" ].

intet_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "intet" >,
    SYNSEM.LKEYS.KEYREL.PRED "_no_q_rel" ].

mang-en_indef-quant-sg := quant-indef-nonpart-masc-or-fem-sg-word &
  [ STEM < "mang","en" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mang-en_q_rel" ].

mangt-et_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "mangt","et" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mangt-et_q_rel" ].

mangt_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "mangt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mangt_q_rel" ].

; should really be an 'np'-item, but provisionally:
ingenting_indef-quant-sg := quant-indef-card-mascsg-word &
  [ STEM < "ingenting" >,
    SYNSEM.LKEYS.KEYREL.PRED "_no_q_rel" ].

hver_indef-quant-sg := quant-indef-part-masc-or-fem-sg-word &
  [ STEM < "hver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel" ].

enhver_indef-quant-sg := quant-indef-part-masc-or-fem-sg-word &
  [ STEM < "enhver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel" ].

annenhver_indef-quant-sg := quant-indef-part-masc-or-fem-sg-word &
  [ STEM < "annenhver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel" ].

hvert_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "hvert" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel" ].

noen_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "noen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_some_q_rel"].

somme_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "somme" >,
    SYNSEM.LKEYS.KEYREL.PRED "_some_q_rel"].

noe_indef-quant-sg := quant-indef-ncard-sg-word &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_some_q_rel"].

somt_indef-quant-sg := quant-indef-ncard-sg-word &
  [ STEM < "somt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_some_q_rel"].

;to enable "vil du ha noe å spise" - better for "den er noe bedre" (= litt)TODO
noe_degcmpar := degreecmpar-spec-word &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_some_q_rel"].

enkelte_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "enkelte" >,
    SYNSEM.LKEYS.KEYREL.PRED "_some_q_rel"].

mange_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "mange" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_q_rel"].

ørten_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "ørten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ørten_q_rel"].

få_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "få" >,
    SYNSEM.LKEYS.KEYREL.PRED "_få_q_rel"].

flere_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "flere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_q_rel"].

flere_indef-cmpar-quant-pl := quant-indef-cmpar-card-pl-word &
  [ STEM < "flere" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_pos-dim-quant_q_rel"].

færre_indef-cmpar-quant-pl := quant-indef-cmpar-card-pl-word &
  [ STEM < "færre" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_neg-dim-quant_q_rel"].





; "litt vin"
litt_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "litt" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

noe_indef-quant2-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "noe" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel",
    SYNSEM.LOCAL.CAT.VAL.SPEC < [LOCAL.CAT.HEAD.ACCUSATIVE +]>].

; "litt større/flere"
litt_degcmpar := degreecmpar-spec-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt-diff-amount_rel"].

; "litt større/flere"
enda_degcmpar := degreecmpar-spec-word &
  [ STEM < "enda" >,
    SYNSEM.LKEYS.KEYREL.PRED "_enda-diff-amount_rel"].

; "litt stor"
litt_degrpos := degreepos-spec-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

lite_degrpos := degreepos-spec-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

tett_degrpos := degreepos-spec-word &
  [ STEM < "tett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tett_q_rel"].

; "svært mye", "hvor mye"
mye_modble := quant-indef-adjcard-sg-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mye_modble-abs := quant-indef-adjcard-sg-abs-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

; "mye vin"
mye_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

;; adv, pos i norsource: []
bitte-lite-grann_indef-quant-sg := quant-indef-adjcard2-sg-word & 
 [ STEM < "bitte", "lite", "grann" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_bitte-lite-grann_adv_rel" ].


; "mye større/flere"
; with than-clause
mye_degcmpar := degreecmpar-spec-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye-diff-amount_rel"].

; LH060513: with no than-clause. so far only for 'mye' - see norsk.tdl for comment
;LH230713 - seems little of use, so comment out
;mye_degcmpar-abs := degreecmpar-spec-word-2 &
;  [ STEM < "mye" >,
;    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
;    SYNSEM.LKEYS.KEYREL.PRED "_large-diff-amount_rel"].

; "mange flere"
mange_degcmpar := degreecmpar-spec-word &
  [ STEM < "mange" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange-diff-amount_rel",
    SYNSEM.LOCAL.CAT.VAL [ SPEC < [LOCAL.CONT.HOOK.INDEX.PNG.NG pl ] >],
    SYNSEM.LOCAL.CAT.VAL [ SPEC < [LOCAL.CAT.HEAD adj-quant & [KEYS.KEY adjquant-pre]]>]].

; "meget større"
meget_degcmpar := degreecmpar-spec-word &
  [ STEM < "meget" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_meget-diff-amount_rel"].

; "meget stor"
meget_degpos := degreepos-spec-word &
  [ STEM < "meget" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_meget_q_rel"].

veldig_degpos := degreepos-spec-word &
  [ STEM < "veldig" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_veldig_q_rel"].

; "svært stor", "svært mange"
svært_degpos := degreepos-spec-word &
  [ STEM < "svært" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_svært_q_rel"].

; "ganske stor"
ganske_degpos := degreepos-spec-word &
  [ STEM < "ganske" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ganske_q_rel"].

; "så stor"
så_degpos := degreepos-spec-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL.PRED "_så_q_rel"].

nokså_degpos := degreepos-spec-word &
  [ STEM < "nokså" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nokså_q_rel"].

; "likså stor som"
likså_degpos := degreepos-spec-word &
  [ STEM < "likså" >,
    SYNSEM.LKEYS.KEYREL.PRED "_likså_q_rel"].

; "likeså stor som"
likeså_degpos := degreepos-spec-word &
  [ STEM < "likeså" >,
    SYNSEM.LKEYS.KEYREL.PRED "_likeså_q_rel"].

; "like stor som"
like_degpos := degreepos-spec-word &
  [ STEM < "like" >,
    SYNSEM.LKEYS.KEYREL.PRED "_like_q_rel"].

; "alt i alt vellykket"
alt-i-alt_degpos := degreepos-spec-word &
  [ STEM < "alt", "i", "alt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alt-i-alt_q_rel"].

; "tilstrekkelig stor"
tilstrekkelig_degpos := degreepos-spec-word &
  [ STEM < "tilstrekkelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tilstrekkelig_q_rel"].

; "hvor stor"
hvor_wh-degpos := degreewh-spec-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-mye_rel"].

;hvor_wh-degpos := wh-degrpos-spec-word &
;  [ STEM < "hvor" >].

;hvor-mye_wh-degcmpar := wh-sg-degreecmpar-spec-word &
;  [ STEM < "hvor", "mye" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_which-diff-amount_c_rel"].

;hvor-mange_wh-degcmpar := wh-pl-degreecmpar-spec-word &
;  [ STEM < "hvor", "mange" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_which-diff-amount_c_rel"].

; "*nok stor, stor nok"
nok_degpos := degreepos-post-spec-word &
  [ STEM < "nok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_q_rel"].

; "langt større"
langt_degcmpar := degreecmpar-spec-word &
  [ STEM < "langt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_langt-diff-amount_c_rel"].

; "atskillig større"
atskillig_degcmpar := degreecmpar-spec-word &
  [ STEM < "atskillig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_atskillig-diff-amount_a_rel"].

; "aller størst"
aller_degcmpar := degreesup-spec-word &
  [ STEM < "aller" >,
    SYNSEM.LKEYS.KEYREL.PRED "_aller_c_rel"].

; "aller størst"
helt_degcmpar := degreesup-spec-word &
  [ STEM < "helt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_helt_c_rel"].

; "nesten fem"
nesten_cardspec := cardspec-word &
  [ STEM < "nesten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nesten_c_rel"].
     
; "bare fem"
bare_cardspec := cardspec-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bare_c_rel"].

bare_indefspec := indefspec-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bare_c_rel"].


nesten_qualifadv := qualifadv-word &
  [ STEM < "nesten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nesten_c_rel"].

omtrent_cardspec := cardspec-word &
  [ STEM < "omtrent" >,
    SYNSEM.LKEYS.KEYREL.PRED "_omtrent_c_rel"].

nøyaktig_cardspec := cardspec-word &
  [ STEM < "nøyaktig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nøyaktig_c_rel"].
presis_cardspec := cardspec-word &
  [ STEM < "presis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_presis_c_rel"].
halv_cardspec := cardspec-word &
  [ STEM < "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_halv_c_rel"].
kvart-på_cardspec := cardspec-word &
  [ STEM < "kvart", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kvart-på_c_rel"].
kvart-over_cardspec := cardspec-word &
  [ STEM < "kvart", "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kvart-over_c_rel"].
fem-på_cardspec := cardspec-word &
  [ STEM < "fem", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-på_c_rel"].
ti-på_cardspec := cardspec-word &
  [ STEM < "ti", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-på_c_rel"].
fem-på-halv_cardspec := cardspec-word &
  [ STEM < "fem", "på", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-på_c_rel"].
ti-på-halv_cardspec := cardspec-word &
  [ STEM < "ti", "på", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-på_c_rel"].
tjue-på_cardspec := cardspec-word &
  [ STEM < "tjue", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tjue-på_c_rel"].
fem-over_cardspec := cardspec-word &
  [ STEM < "fem", "over">,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-over_c_rel"].
ti-over_cardspec := cardspec-word &
  [ STEM < "ti", "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-over_c_rel"].
fem-over-halv_cardspec := cardspec-word &
  [ STEM < "fem", "over", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-over_c_rel"].
ti-over-halv_cardspec := cardspec-word &
  [ STEM < "ti", "over", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-over_c_rel"].
tjue-over_cardspec := cardspec-word &
  [ STEM < "tjue", "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tjue-over_c_rel"].
ca-dot_cardspec := cardspec-word &
  [ STEM < "ca", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
ca_cardspec := cardspec-word &
  [ STEM < "ca" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
cirka_cardspec := cardspec-word &
  [ STEM < "cirka" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
sirka_cardspec := cardspec-word &
  [ STEM < "sirka" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
over_cardspec := cardspec-word &
  [ STEM < "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_over_c_rel"].

høyst_cardspec := cardspec-word &
  [ STEM < "høyst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_høyst_c_rel"].

max_cardspec := cardspec-word &
  [ STEM < "max" >,
    SYNSEM.LKEYS.KEYREL.PRED "_max_c_rel"].

min_cardspec := cardspec-word &
  [ STEM < "min" >,
    SYNSEM.LKEYS.KEYREL.PRED "_min_c_rel"].

;;; dummy

millioninntekt := some-word &
  [  STEM < "millioninntekt" >, 
;     SYNSEM [ LKEYS.KEYREL.PRED "millioninntekt_n_rel" ].
     SYNSEM.LKEYS.KEYREL.CARG "millioninntekt" ].


#|
ikke_qualadv := qualifadv-word &
  [ STEM < "ikke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ikke_c_rel"].
|#

bortimot_cardspec := cardspec-word &
  [ STEM < "bortimot" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bortimot_c_rel"].
langtfra_cardspec := cardspec-word &
  [ STEM < "langtfra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_langtfra_c_rel"].
#|

ikke_focqualadv := focqualifadv-word &
  [ STEM < "ikke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-ikke_c_rel"].
|#

selv_focqualadv := focqualifadv-word &
  [ STEM < "selv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-selv_c_rel"].
bare_focqualadv := focqualifadv-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-bare_c_rel"].
til-og-med_focqualadv := focqualifadv-word &
  [ STEM < "til", "og", "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-til-og-med_c_rel"].
; real enough, but not good for parsewood
;også_focqualadv := focqualifadv-word &
;  [ STEM < "også" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_focal-også_c_rel"].




; "hvor lite"
lite_modble := quant-indef-adjcard-sg-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_little_q_rel"].

; "lite vin renner"
lite__indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_little_q_rel"].

; "nok vin"
nok_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "nok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sufficient_q_rel"].

; for "alle gutter"
alle_indef-quant-pl := quant-indef-card-univ-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel"].

all_indef-quant-sg := quant-indef-nonpart-masc-or-fem-sg-word &
  [ STEM < "all" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel"].

alt_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "alt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel"].

allting_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "allting" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel"].

hva_som_helst-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "hva", "som", "helst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel"].

begge_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ2_q_rel"].

samtlige_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "samtlige" >,
    SYNSEM.LKEYS.KEYREL.PRED "_univ_q_rel"].


hvilke_interr-quant := interrog-quant-pl-word &
  [ STEM < "hvilke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_which_pl_q_rel"].

hvilken_interr-quant := interrog-quant-masc-or-fem-sg-word &
  [ STEM < "hvilken" >,
    SYNSEM.LKEYS.KEYREL.PRED "_which_commsg_q_rel" ].

hvilket_interr-quant := interrog-quant-neutsg-word &
  [ STEM < "hvilket" >,
    SYNSEM.LKEYS.KEYREL.PRED "_which_neutsg_q_rel" ].


; in cooperation with head-quant-comp-phrase, this word category
; applies uniquely to "alle" and "begge" preceding a definite N-bar
alle_defquant-pl :=  univquant1-part-pl-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel"].

all_defquant-sg :=  univquant1-part-masc-or-fem-sg-word &
  [ STEM < "all" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel"].

hele_defquant-sg :=  univquant1-part-sg-word &
  [ STEM < "hele" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel"].

alt_defquant-sg :=  univquant1-part-neutsg-word &
  [ STEM < "alt" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel" ].

begge_defquant-pl := univquant1-part-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ2_q_rel" ].


; in cooperation with head-quant-gen-comp-phrase, this word category
; applies uniquely to "alle" and "begge" preceding a genitive
all_defquant-sg-poss :=  univquant2-part-masc-or-fem-sg-word &
  [ STEM < "all" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel"].

hele_defquant-sg-poss :=  univquant2-part-sg-word &
  [ STEM < "hele" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel"].

alt_defquant-sg-poss :=  univquant2-part-neutsg-word &
  [ STEM < "alt" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel"].

alle_defquant-pl-poss :=  univquant2-part-pl-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ_q_rel"].

begge_defquant-pl-poss := univquant2-part-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_univ2_q_rel"].

;;;;;;

ja_interj := interjection-word &
  [ STEM < "ja" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ja_rel"].

jo_interj := interjection-word &
  [ STEM < "jo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jo_rel"].

nåja_interj := interjection-word &
  [ STEM < "nåja" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nåja_rel"].

unnskyld_interj := interjection-word &
  [ STEM < "unnskyld" >,
    SYNSEM.LKEYS.KEYREL.PRED "_unnskyld_rel"].

velkommen_interj := interjection-word &
  [ STEM < "velkommen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_velkommen_rel"].

et-øyeblikk_interj := interjection-word &
  [ STEM < "et", "øyeblikk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_et-øyeblikk_rel"].

nå-ja_interj := interjection-word &
  [ STEM < "nå", "ja" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nå-ja_rel"].

;god-tur_interj := interjection-word &
;  [ STEM < "god", "tur" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_god-tur_rel"].

;takk_interj := interjection-word &
;  [ STEM < "takk" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_takk_rel"].

takk-skal-du-ha_interj := interjection-word &
  [ STEM < "takk", "skal", "du", "ha" >,
    SYNSEM.LKEYS.KEYREL.PRED "_takk-skal-du-ha_rel"].

;flott_interj := interjection-word &
;  [ STEM < "flott" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_flott_rel"].

;bra_interj := interjection-word &
;  [ STEM < "bra" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_bra_rel"].

;fint_interj := interjection-word &
;  [ STEM < "fint" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_fint_rel"].

;godt_interj := interjection-word &
;  [ STEM < "godt" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_godt_rel"].

hm_interj := interjection-word &
  [ STEM < "hm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hm_rel"].

forresten_interj := interjection-word &
  [ STEM < "forresten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_forresten_rel"].

;tusen-takk_interj := interjection-word &
;  [ STEM < "tusen", "takk" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_tusen-takk_rel"].

;mange-takk_interj := interjection-word &
;  [ STEM < "mange", "takk" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_mange-takk_rel"].

nei-takk_interj := interjection-word &
  [ STEM < "nei", "takk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nei-takk_rel"].

ja-takk_interj := interjection-word &
  [ STEM < "ja", "takk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ja-takk_rel"].

nei_interj := interjection-word &
  [ STEM < "nei" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nei_rel"].

vel_interj := interjection-word &
  [ STEM < "vel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vel_rel"].

hei_interj := interjection-word &
  [ STEM < "hei" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hei_rel"].

greit_interj := interjection-word &
  [ STEM < "greit" >,
    SYNSEM.LKEYS.KEYREL.PRED "_greit_rel"].

jøss_interj := interjection-word &
  [ STEM < "jøss" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jøss_rel"].

jøje-meg_interj := interjection-word &
  [ STEM < "jøje", "meg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jøje-meg_rel"].

hør-her_interj := interjection-word &
  [ STEM < "hør", "her" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hør-her_rel"].

hør_interj := interjection-word &
  [ STEM < "hør" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hør_rel"].

kanskje_interj := interjection-word &
  [ STEM < "kanskje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kanskje_rel"].

å_interj := interjection-word &
  [ STEM < "å" >,
    SYNSEM.LKEYS.KEYREL.PRED "_å_rel"].

vent_interj := interjection-word &
  [ STEM < "vent" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vent_rel"].

oj_interj := interjection-word &
  [ STEM < "oj" >,
    SYNSEM.LKEYS.KEYREL.PRED "_oj_rel"].

ok_interj := interjection-word &
  [ STEM < "ok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ok_rel"].

si-meg_interj := interjection-word &
  [ STEM < "si", "meg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_si-meg_rel"].

dullan-deisi_interj := interjection-word &
  [ STEM < "dullan", "deisi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dullan-deisi_rel"].

ja_menn_interj := interjection-word &
 [ STEM < "ja", "menn" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-menn_rel" ].

ja_så_menn_interj := interjection-word &
 [ STEM < "ja", "så", "menn" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-så-menn_rel" ].

jo_så_menn_interj := interjection-word &
 [ STEM < "jo", "så", "menn" >,
   SYNSEM.LKEYS.KEYREL.PRED "jo-så-menn_rel" ].

ja_vel_interj := interjection-word &
 [ STEM < "ja", "vel" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-vel_rel" ].

ja_visst_interj := interjection-word &
 [ STEM < "ja", "visst" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-visst_rel" ].

jo_visst_interj := interjection-word &
 [ STEM < "jo", "visst" >,
   SYNSEM.LKEYS.KEYREL.PRED "jo-visst_rel" ].

lykke-til_interj := interjection-word &
 [ STEM < "lykke", "til" >,
   SYNSEM.LKEYS.KEYREL.PRED "lykke-til_rel" ].

;men_interj := interjection-word &
; [ STEM < "men" >,
;   SYNSEM.LKEYS.KEYREL.PRED "men_rel" ].

; these are in the way...
;så_interj := interjection-word &
; [ STEM < "så" >,
;   SYNSEM.LKEYS.KEYREL.PRED "så_rel" ].

;også_interj := interjection-word &
; [ STEM < "også" >,
;   SYNSEM.LKEYS.KEYREL.PRED "også_rel" ].

;og_interj := interjection-word &
; [ STEM < "og" >,
;   SYNSEM.LKEYS.KEYREL.PRED "og_rel" ].


; about 33 entires with KEYS.KEY specification of a complement, not reflected in type, although also not systematically for distinguishing entries, but for selecting right complements. Unclear how bad that is. In lex4.v-lrge this applies to 1260 entries (under 'KEY-SPEC')
;;;;;;;; VERBS 
;; test-v
sove_intr := v-intr &
  [ STEM < "sove" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sove_v-intr_rel"]].

sove_tr-eventunit := v-tr-obEventunit &
  [ STEM < "sove" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sove_v-tr_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY søvn-inhcmp ]]>].

;gripe_intr := v-intr &
;  [ STEM < "gripe" >,
;    INFLECTION v17,
;    SYNSEM [LKEYS.KEYREL.PRED "_gripe_v_rel"]].

;føre_intr := v-tr-obDir &
;  [ STEM < "føre" >,
;    INFLECTION v17,
;    SYNSEM [LKEYS.KEYREL.PRED "_føre_v_rel"]].

; perhaps not necessary?
;ligge_intrObl := v-intrObl-oblLoc &
;  [ INFLECTION nonfstr,
;    STEM < "ligge" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_ligge_v_rel" ].

ligge_intr := v-intr &
  [ INFLECTION nonfstr-strong,
    STEM < "ligge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ligge_v-intr_rel" ].

ligge_subj-pres := v-intrPresnt &
  [ INFLECTION nonfstr-strong,
    STEM < "ligge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ligge_v-intrPresnt_rel" ].

;; test-v
regne_impers-pres := v-intrImpers &
  [ STEM < "regne" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL [ PRED "_regne_v-intrImpers_rel" ] ]].

;; test-v
sitte_subj-pres := v-intrPresnt &
  [ STEM < "sitte" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sitte_v-intrPresnt_rel"]].

;; test-v
rusle_intr-dir := v-intr-suDir &
  [ STEM < "rusle" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL [ PRED "_rusle_v-intr_rel" ] ]].

;has near-equivalent counterpart in lex4.v-lrg - namely v-trPath-obRefl_obDir
liste_seg := v-trNrf-suDir_obReflExpl &
 [ INFLECTION nonfstr-et,
   STEM < "liste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_liste_v-trNrf_rel" ].


; en mann smyger seg (frem)
smyge_seg := v-trNrf-suDir_obReflExpl &
	[STEM <"smyge">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_smyge_v-trNrf_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

; det smyger seg en mann (frem)
smyge_seg_pres := v-trNrfPresnt-obRefl_presDir &
	[STEM <"smyge">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_smyge_v-trNrfPresnt_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

; det smyger seg frem en mann
smyge_seg_pres_path := v-trNrfPresntPathShft-obRefl_presDir &
	[STEM <"smyge">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_smyge_v-trNrfPresntPathShft_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

; en mann sniker seg (frem)
snike_seg := v-trNrf-suDir_obReflExpl &
	[STEM <"snike">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_snike_v-trNrf_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

; det sniker seg en mann (frem)
snike_seg_pres := v-trNrfPresnt-obRefl_presDir &
	[STEM <"snike">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_snike_v-trNrfPresnt_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

; det sniker seg frem en mann
snike_seg_pres_path := v-trNrfPresntPathShft-obRefl_presDir &
	[STEM <"snike">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_snike_v-trNrfPresntPathShft_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

rusle_subjdir-pres := v-intrPresnt-presDir &
  [ STEM < "rusle" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL [ PRED "_rusle_v-intrPresnt_rel" ] ]].

løpe_subjdir-pres := v-intrPresnt-presDir &
  [ STEM < "løpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL [ PRED "_løpe_v-intrPresnt_rel" ] ]].

løpe_subjdir-pres-path := v-intrPresntPathShft-presDir &
  [ STEM < "løpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL [ PRED "_løpe_v-intrPresntPathShft_rel" ] ]].

springe_iv-pres := v-intrPresnt-presDir &
 [ INFLECTION nonfstr-strong,
   STEM < "springe" >,
   SYNSEM.LKEYS.KEYREL.PRED "_springe_v-intrPresnt_rel" ].

rulle_subjdir-pres := v-intrPresnt-presDir &
 [ INFLECTION nonfstr-et,
   STEM < "rulle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v-intrPresnt_rel" ].



;; test-v
; klarne opp
klarne_telicpart := v-intrImpersPrtcl &
  [ STEM < "klarne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LOCAL.KEY-SPEC opp-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_klarne_v-intrImpersPrtcl_rel" ] ]].

; det kommer inn en mann
komme_present-telicpart := v-intrPresntPathShft-presDir &
  [ STEM < "komme" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_komme_v-intrPresntPathShft_rel" ] ]].

komme_intr-obl := v-intrObl-oblN &
  [ STEM < "komme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL [ PRED "_komme_v-intrObl_rel" ] ]].


;; test-v
; koke opp
koke_telicpart := v-intrPrtcl-COMPLETEDACTIVITY &
  [ STEM < "koke" >,
    INFLECTION nonfstr-te,
    SYNSEM.LOCAL.KEY-SPEC pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_koke_v-intrPrtcl_rel" ] ]].

;; test-v
; fiffe seg opp
fiffe_refl-telicpart := v-trPrtcl-obRefl &
  [ STEM < "fiffe" >,
    INFLECTION nonfstr-et,
    SYNSEM.LOCAL.KEY-SPEC opp-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_fiffe_v-trPrtcl_rel" ] ]].

; muntre opp
muntre_telicpart := v-trPrtcl-COMPLETEDACTIVITY &
  [ STEM < "muntre" >,
    INFLECTION nonfstr-et,
    SYNSEM.LOCAL.KEY-SPEC opp-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_muntre_v-trPrtcl_rel" ] ]].

fylle_tr-prtcl := v-trPrtcl &
 [ INFLECTION nonfstr-te,
   STEM < "fylle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fylle_v-trPrtcl_rel",
            LOCAL.KEY-SPEC ut-pcl ] ].

fylle_tr-prtclShft := v-trPrtclShft &
 [ INFLECTION nonfstr-te,
   STEM < "fylle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fylle_v-trPrtclShft_rel",
            LOCAL.KEY-SPEC ut-pcl ] ].

; replaced-by  vise_particleshift
;vise_tr-prtclShft := v-trPrtclShft & 
;  [ STEM < "vise" >,
;    INFLECTION nonfstr-te,
;    SYNSEM.LOCAL.KEY-SPEC frem-pcl,
;    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trPrtclShft_rel"]].

vise_tr-prtcl := v-trPrtcl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM.LOCAL.KEY-SPEC frem-pcl,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trPrtcl_rel"]].



; holde på å   is still missing
; holde på
holde_atelicpart := v-intrPrtcl-SUSTAINEDACTIVITY &
  [ STEM < "holde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC på-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_holde_v-intrPrtcl_rel" ] ]].

vare_atelicpart := v-intrPrtcl-SUSTAINEDACTIVITY &
 [ INFLECTION nonfstr-te,
   STEM < "vare" >,
   SYNSEM.LOCAL.KEY-SPEC ved-pcl,
    SYNSEM.LKEYS.KEYREL.PRED "_vare_v-intrPrtcl_rel" ].

holde_telicpart := v-intrPrtcl-COMPLETEDACTIVITY &
  [ STEM < "holde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC opp-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_holde_v-intrPrtcl_rel" ] ]].

slappe_iv-prtcl := v-intrPrtcl &
 [ INFLECTION nonfstr-et,
   STEM < "slappe" >,
   SYNSEM.LOCAL.KEY-SPEC av-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_slappe_v-intrPrtcl_rel" ].

finne_iv-prtcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
;   SYNSEM.LOCAL.KEY-SPEC ut-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-intrPrtcl_rel" ].

drive_iv := v-intrSubcoord &
 [ INFLECTION nonfstr-strong,
   STEM < "drive" >,
   SYNSEM.LKEYS.KEYREL.PRED "_drive_v-tr_rel" ].


; driver (og...)
; no supporting analysis yet TODO
;drive_atelic-intr := v-intrSubcoord &
;  [ STEM < "drive" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL [ PRED "_drive_v_rel" ] ]].

; drive på (og...)
; no supporting analysis yet  TODO
;drive_atelicpart := v-intrPrtcl-SUSTAINEDACTIVITY &
;  [ STEM < "drive" >,
;    INFLECTION nonfstr,
;    SYNSEM.LOCAL.KEY-SPEC på-pcl,
;    SYNSEM [LKEYS.KEYREL [ PRED "_drive_v_rel" ] ]].

; drive med å
drive_atel-equi := v-intrObl-oblEqSuInf-SUSTAINEDACTIVITY &
  [ STEM < "drive" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC med-rais,
    SYNSEM [LKEYS.KEYREL [ PRED "_drive_v-intrObl_rel" ] ]].

holde_atel-prtcl-pp-equi := v-intrPrtclObl-oblEqSuInf &
  [ STEM < "holde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.ALT-SPEC på-pcl,
    SYNSEM.LOCAL.KEY-SPEC med-rais,
    SYNSEM [LKEYS.KEYREL [ PRED "_holde_v-intrPrtclObl_rel" ] ]].

; drive på å   is still missing
; drive på med å
drive_atel-prtcl-pp-equi := v-intrPrtclObl-oblEqSuInf &
  [ STEM < "drive" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.ALT-SPEC på-pcl,
    SYNSEM.LOCAL.KEY-SPEC med-rais,
    SYNSEM [LKEYS.KEYREL [ PRED "_drive_v-intrPrtclObl_rel" ] ]].

; hjelpe til med å
hjelpe_atel-prtcl-pp-equi := v-intrPrtclObl-oblEqSuInf &
  [ STEM < "hjelpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.ALT-SPEC til-pcl,
    SYNSEM.LOCAL.KEY-SPEC med-rais,
    SYNSEM [LKEYS.KEYREL [ PRED "_hjelpe_v-intrPrtclObl_rel" ] ]].

;; test-v
; oppføre seg bra
oppføre_obladv-refl := v-trAdv-obRefl &
  [ INFLECTION nonfstr-te,
    STEM < "oppføre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_oppføre_v-trAdv_rel" ].

peke_intr-orient := v-intrPath-suDir-PUREORIENTATION &
  [ STEM < "peke" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_peke_v-intrPath_rel"]].

sette_particleshift := v-trScprShft-obDir_scObArgCsd &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-trScprShft_rel"]].

vise_particleshift := v-trScprShft-obDir_scObArgCsd &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-v-trScprShft_rel"]].

;overgå_trans := v-tr &
;  [ STEM < "overgå" >,
;    INFLECTION finstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_overgå_v_rel",
;	    LKEYS.KEYREL.ARG1.ROLE cmpare-top  &
;			     [ C.COMPARE-INST #cmp ],
;	    LKEYS.KEYREL.ARG2.ROLE cmpare-ref  &
;			     [ C.COMPARE-INST #cmp ]]].

; TODO - make a type of this
; lean vs - cf compare-status in predsort.tdl
overgå_trans := v-tr &
  [ STEM < "overgå" >,
    INFLECTION finstr,
    SYNSEM [LKEYS.KEYREL.PRED "_overgå_v-tr_rel",
	    LKEYS.KEYREL.ARG1.ROLE compare-top  &
			     [ COMPARE-INSTNCE #cmp ],
	    LKEYS.KEYREL.ARG2.ROLE compare-ref  &
			     [ COMPARE-INSTNCE #cmp ]]].

sette_seg := v-tr-obRefl &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-tr_rel"]].

sette_ditr-refl := v-ditr-iobRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sette_v-ditr_rel",
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY mål-k].

gi_ditr-refl := v-ditr-iobRefl &
  [ INFLECTION finstr-tt,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gi_v-ditr_rel" ].


;; test-v
sette_pres-refl := v-trNrfPresnt-obRefl &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-trNrfPresnt_rel"]].

sette_pres-refl-locobl := v-trPresntLoc-obRefl &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-trPresntLoc_rel"]].

;,
;    SYNSEM.LOCAL.CAT.HEAD prep-or-adv 
sette_scpr := v-trScpr-scObArgCsd_scLoc &
  [ INFLECTION nonfstr-strong,
    STEM < "sette" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sette_v-trScpr_rel"].

;; deact for Göttingen
;; test-v
kaste_tr-dir := v-tr-obDir &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-tr_rel",
   SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator ].

flytte_tr-dir := v-tr-obDir &
 [ INFLECTION nonfstr-et,
   STEM < "flytte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_flytte_v-intr_rel" ].


videresende_tr-dir := v-tr-obDir &
  [ INFLECTION nonfstr-te,
    STEM < "videresende" >,
    SYNSEM.LKEYS.KEYREL.PRED "_videresende_v-tr_rel" ].

avhenge_subj-equi-pp := v-intrObl-oblEqSuInf &
  [ INFLECTION nonfstr-strong,
    STEM < "avhenge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel" ].

; for Now, leave out
ta_tr-subjdir := v-tr-suDir &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v_rel" ].

gå_road-or-trip := v-tr-suDir &
 [ INFLECTION nonfstr-strong,
   STEM < "gå" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CONT.HOOK.INDEX.SORT one-dim-thing-path,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-tr_rel" ].


;hoppe_dir-length := v-tr-suDir_obLengthunit &
;  [ STEM < "hoppe" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_hoppe_v_rel"]].

;dreie_dir-length := v-tr-suDir_obLengthunit &
;  [ STEM < "dreie" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_dreie_v_rel"]].

;; test-v
hoppe_secpred := v-trScpr-scObNrgCsd &
  [ STEM < "hoppe" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_hoppe_v-trScpr_rel"]].

;; test-v
løpe_secpred-refl := v-trScpr-scObNrgCsd_obRefl &
  [ STEM < "løpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_løpe_v-trScpr_rel"]].

hoppe_secpred-refl := v-trScpr-scObNrgCsd_obRefl &
  [ STEM < "hoppe" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_hoppe_v-trScpr_rel"]].

skamme_seg := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "skamme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skamme_v-tr_rel" ].

;; test-v
vaske_seg := v-tr-obRefl &
  [ STEM < "vaske" >,
    INFLECTION nonfstr-et,
    SYNSEM [ LKEYS.KEYREL.PRED "_vaske_v-tr_rel"]].

vaske_tr := v-tr &
  [ STEM < "vaske" >,
    INFLECTION nonfstr-et,
    SYNSEM [ LKEYS.KEYREL.PRED "_vaske_v-tr_rel"]].

;; test-v
fortære_tr := v-tr &
  [ STEM < "fortære" >,
    INFLECTION nonfstr-te,
    SYNSEM [ LKEYS.KEYREL.PRED "_fortære_v-tr_rel"]].

alliere_tr-obl-refl := v-trObl-obRefl_oblN &
  [ INFLECTION nonfstr-te,
    STEM < "alliere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alliere_v-trObl_rel",
    SYNSEM.LOCAL.KEY-SPEC med-assoc ].

;; test-v
;alliere-tr-obl-refl := v-trObl-obRefl_oblN &
;  [ INFLECTION v2,
;    STEM < "alliere" >,
;    SYNSEM.LKEYS.KEYREL.PRED "alliere-rel",
;    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-assoc ]]> ].

alliere-tr-obl := v-trObl &
  [ INFLECTION nonfstr-te,
    STEM < "alliere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alliere_v-trObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-assoc ]]> ].

;; test-v
sammenligne_tr-obl := v-trObl &
  [ INFLECTION nonfstr-et,
    STEM < "sammenligne" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sammenligne_v-trObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-assoc ]]> ].

spyle_tr-arg12-secpred := v-trScpr-scObNrgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "spyle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spyle_v-trScpr_rel" ].

synge_tr-arg12-secpred := v-trScpr-scObNrgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-trScpr_rel" ].

synge_secpred-refl := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-trScpr_rel" ].

synge_tr-particleshift := v-trScprShft-obDir_scObNrgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-trScprShft_rel" ].

synge_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-tr_rel",
   SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD.KEYS.KEY sang-k] > ].



;; test-v
sparke_secpred := v-trScpr-scObArgCsd_scEndpt &
  [ STEM < "sparke" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-trScpr_rel"].

;sparke_secpred-refl := v-trScpr-obRefl_scObArgCsd &
;  [ STEM < "sparke" >,
;    INFLECTION nonfstr,
;    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v_rel"].

;; test-v
piske_secpred-refl := v-trScpr-obRefl_scObArgCsd &
  [ STEM < "piske" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_piske_v-trScpr_rel"].

sparke_particleshift := v-trScprShft-obDir_scObArgCsd &
  [ STEM < "sparke" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-trScprShft_rel"].

sparke_adjshift := v-trScprAdjShft-scObArgCsd_scAdj &
  [ STEM < "sparke" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-trScprShft_rel"].

legge_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-trScprShft_rel" ].

;; test-v
lempe_particleshift := v-trScprShft-obDir_scObArgCsd &
  [ STEM < "lempe" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_lempe_v-trScprShft_rel"].

fryse_detachposs := v-intrObl-oblPRTOFsu &
 [ INFLECTION nonfstr-strong,
   STEM < "fryse" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fryse_v-intrObl_rel" ].

tørke_detachposs-refl := v-trObl-obRefl_oblPRTOFob &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-trObl_rel" ].

tørke_detachposs := v-trObl-oblPRTOFob &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-trObl_rel" ].

tørke_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-tr_rel" ].

;; test-v
skrubbe_detachposs := v-trObl-oblPRTOFob &
  [ STEM < "skrubbe" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_skrubbe_v-trObl_rel"].

;; test-v
klø_detachposs-refl := v-trObl-obRefl_oblPRTOFob &
  [ STEM < "klø" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_klø_v-trObl_rel"].

skrubbe_detachposs-refl := v-trObl-obRefl_oblPRTOFob &
  [ STEM < "skrubbe" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_skrubbe_v-trObl_rel"].

;; test-v
kyle_detachposs := v-ditrObl-oblPRTOFiob-PARTWHOLE_AFFECTING &
  [ STEM < "kyle" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_kyle_v-ditrObl_rel"].

kaste_detachposs := v-ditrObl-oblPRTOFiob-PARTWHOLE_AFFECTING &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-ditrObl_rel",
   SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator ].

;; test-v
velte_tr-obl-refl := v-trObl-obRefl_oblN &
  [ STEM < "velte" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_velte_v-trObl_rel"].

;; test-v
kare_tr-secpr-dir-refl := v-trScpr-obDir_obRefl_scObNrgCsd &
  [ STEM < "kare" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_kare_v-trScpr_rel"].

; v29-v29a
komme_tr-secpr-dir-refl := v-trScpr-obDir_obRefl_scObNrgCsd &
  [ STEM < "komme" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_komme_v-trScpr_rel"].


;; test-v
prøve_subj-equi := v-tr-obEqInf &
  [ STEM < "prøve" >,
    INFLECTION nonfstr-de,
    SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-tr_rel"].

prøve_pp-equi := v-intrObl-oblEqSuInf &
  [ STEM < "prøve" >,
    INFLECTION nonfstr-de,
    SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-rais ]]>].

; TODO: working on the 'få'-constraint - use RELS, second member, after 'å' ..
;be_subj-eq-pp := v-intrObl-oblEqSuInf &
;  [ STEM < "be" >,
;    INFLECTION finstr-dd,
;    SYNSEM [LKEYS.KEYREL.PRED "_be_v-intrObl_rel"],
;    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-rais ],;
;
;				   LOCAL.CAT.QVAL.DOBJECT.LKEYS.KEYREL.PRED "_få_v-intrAuxmodComp_rel" ]>].

vurdere_absinf := v-tr-obAbsinf &
  [ STEM < "vurdere" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_vurdere_v-tr_rel"].


;; test-v
tillate_obj-equi := v-ditr-obEqIobInf &
  [ STEM < "tillate" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_tillate_v-ditr_rel"]].

;; test-v
tillate_obj-eq-refl := v-ditr-iobRefl_obEqIobInf &
  [ STEM < "tillate" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_tillate_v-ditr_rel"]].

;; test-v
forplikte_obj-eq-pp-refl-til := v-trObl-obRefl_oblEqObInf &
  [ STEM < "forplikte" >,
    INFLECTION nonfstr-et,
    SYNSEM.LOCAL.ALT-SPEC til-k,
    SYNSEM [LKEYS.KEYREL.PRED "_forplikte_v-trObl_rel"]].

finne_obj-eq-pp-refl-i := v-trObl-obRefl_oblEqObInf &
  [ STEM < "finne" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.ALT-SPEC i-k,
    SYNSEM [LKEYS.KEYREL.PRED "_finne_v-trObl_rel"]].

finne_tr-obl-decl-refl := v-trObl-obRefl_oblDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LOCAL.KEY-SPEC i-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trObl_rel" ].



;; test-v
be_obj-equi := v-ditr-obEqIobBareinf &
  [ STEM < "be" >,
    INFLECTION finstr-dd,
    SYNSEM [LKEYS.KEYREL.PRED "_be_v-ditr_rel"]].

be_obj-eq-pp := v-trObl-oblEqObInf &
  [ STEM < "be" >,
    INFLECTION finstr-dd,
    SYNSEM [LKEYS.KEYREL.PRED "_be_v-trObl_rel"],
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-rais ]]>].

la-obj-equi := v-ditr-obEqIobBareinf &
  [ INFLECTION finstr-tt,
    STEM < "la" >,
    SYNSEM.LKEYS.KEYREL.PRED "_la_v-ditr_rel" ].

la-subjrais-middle := v-trNrfScpr-obReflExpl_scSuNrg_scBareinf_suRAISsuMob &
  [ INFLECTION finstr-tt,
    STEM < "la" >,
    SYNSEM.LKEYS.KEYREL.PRED "_la_v-ditr_rel" ].

la-objrais-middle := v-trScpr-scObNrg_scBareinf_obRAISsuMob &
  [ INFLECTION finstr-tt,
    STEM < "la" >,
    SYNSEM.LKEYS.KEYREL.PRED "_la_v-ditr_rel" ].

hjelpe_obj-equi := v-ditr-obEqIobInf &
  [ STEM < "hjelpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_hjelpe_v-ditr_rel"]].

holde_secpred := v-trScpr-scObArgCsd_scLoc &
  [ INFLECTION nonfstr-te,
    STEM < "holde" >,
    SYNSEM.LKEYS.KEYREL.PRED "_holde_v-trScpr_rel" ].

avtegne_tr-refl-obl := v-trObl-obRefl_oblN &
  [ INFLECTION nonfstr-et,
    STEM < "avtegne" >,
    SYNSEM.LKEYS.KEYREL.PRED "avtegne_v-trObl_rel" ].

;; test-v
anmode_obj-eq-pp := v-trObl-oblEqObInf &
  [ STEM < "anmode" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_anmode_v-trObl_rel"],
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-rais ]]>].

;; test-v
be_subj-eq-pp := v-intrObl-oblEqSuInf &
  [ STEM < "be" >,
    INFLECTION finstr-dd,
    SYNSEM.LOCAL.KEY-SPEC om-rais,
    SYNSEM [LKEYS.KEYREL.PRED "_be_v-intrObl_rel"]].

håpe_subj-eq-pp := v-intrObl-oblEqSuInf &
  [ STEM < "håpe" >,
    INFLECTION nonfstr-te,
    SYNSEM.LOCAL.KEY-SPEC på-rais,
    SYNSEM [LKEYS.KEYREL.PRED "_håpe_v-intrObl_rel"]].

argumentere_subj-eq-pp := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr-te,
   STEM < "argumentere" >,
   SYNSEM.LOCAL.KEY-SPEC mot-rais,
    SYNSEM.LKEYS.KEYREL.PRED "_argumentere_v-intrObl_rel" ].

;; test-v
love_obj-equi := v-ditr-obEqSuInf &
  [ STEM < "love" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_love_v-ditr_rel"]].

; INFLECTION v139-v140
;; test-v
vite_subord := v-tr-obDECL &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-tr_rel"]].

vite_obV := v-tr-obDECL_obV &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-tr_rel"]].

; INFLECTION v139-v140
;; test-v
vite_intr := v-intr &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-intr_rel"]].

; INFLECTION v139-v140,
;; test-v
vite_interr := v-intrComp-compINTERR &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-intrComp_rel"]].

gjette_interr := v-intrComp-compINTERR &
 [ INFLECTION nonfstr-et,
   STEM < "gjette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gjette_v-intrComp_rel" ].

vise_ditr-yn := v-ditr-obYN &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

vise_ditr-yn-refl := v-ditr-obYN_iobRefl &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

vise_ditr-wh := v-ditr-obWH &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

vise_ditr-wh-refl := v-ditr-obWH_iobRefl &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

fortelle_ditr-wh := v-ditr-obWH &
  [ STEM < "fortelle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel"]].

fortelle_ditr-yn := v-ditr-obYN &
  [ STEM < "fortelle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel"]].

;; test-v
håpe_subord := v-tr-obDECL &
  [ STEM < "håpe" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_håpe_v-tr_rel"]].

vedde_tr-2obl := v-trObl2 &
  [ INFLECTION nonfstr-et,
    STEM < "vedde" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vedde_v-trObl2_rel",
    SYNSEM.LOCAL.KEY-SPEC med-k,
    SYNSEM.LOCAL.ALT-SPEC på-assoc ].

; INFLECTION v103
;; test-v
spørre_interr := v-intrComp-compINTERR &
  [ STEM < "spørre" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_spørre_v-intrComp_rel"]].


avsløre_subord := v-tr-obDECL &
  [ STEM < "avsløre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_avsløre_v-tr_rel"]].

avsløre_interr := v-intrComp-compINTERR &
  [ STEM < "avsløre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_avsløre_v-intrComp_rel"]].

; ; test-v   "se ham komme"
se_bareinf := v-trScpr-scObNrg_scBareinf &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-trScpr_rel"]].

se_intr-dir := v-intr-suDir &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intr_rel"]].

se_tr-dir := v-tr-suDir &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-tr_rel"]].

gjøre_secpred-adj := v-trScpr-scObNrg_scAdj &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause_rel" ].

gjøre_secpred-pp := v-trScpr-scObNrg_scPP &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause_rel" ].

;gjøre_secpred := v-trScpr-scObNrg &
; [ INFLECTION nonfstr-strong,
;   STEM < "gjøre" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_cause_rel" ].

gjøre_secpred-refl := v-trScpr-obRefl_scObNrg &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause_rel" ].

forutsette_acc-cum-å-inf := v-trScpr-scObNrg_scInf &
 [ INFLECTION nonfstr-strong,
   STEM < "forutsette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forutsette_v-trScpr_rel" ].

forutsette_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION nonfstr-strong,
   STEM < "forutsette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forutsette_v-trScpr_rel" ].

frykte_acc-cum-å-inf := v-trScpr-scObNrg_scInf &
 [ INFLECTION nonfstr-et,
   STEM < "frykte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frykte_v-trScpr_rel" ].

frykte_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION nonfstr-et,
   STEM < "frykte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frykte_v-trScpr_rel" ].

forsøke_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION nonfstr-te,
   STEM < "forsøke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forsøke_v-trScpr_rel" ].

;forutsette_complx-pass := v-trScpr-scObNrg_scPcp &
; [ INFLECTION nonfstr-strong,
;   STEM < "forutsette" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_forutsette_v-tr_rel" ].

søke_intr-obl-om := v-intrObl-oblN &
 [ INFLECTION nonfstr,
   STEM < "søke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_søke_v-intrObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

søke_intr-obl-om_å := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr,
   STEM < "søke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_søke_v-intrObl_rel",
            LOCAL.KEY-SPEC om-rais ] ].

formode_acc-cum-å-inf := v-trScpr-scObNrg_scInf &
 [ INFLECTION nonfstr-et,
   STEM < "formode" >,
   SYNSEM.LKEYS.KEYREL.PRED "_formode_v-trScpr_rel" ].

anta__acc-cum-å-inf := v-trScpr-scObNrg_scInf &
 [ INFLECTION finstr-tt,
   STEM < "anta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_anta_v-trScpr_rel" ].

anta_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION finstr-tt,
   STEM < "anta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_anta_v-trScpr_rel" ].




;; test-v
føle_rais-refl := v-trScpr-scObNrg_obRefl_scBareinf &
  [ STEM < "føle" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_føle_v-trScpr_rel"]].

kjenne_rais-refl := v-trScpr-scObNrg_obRefl_scBareinf &
  [ STEM < "kjenne" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_kjenne_v-trScpr_rel"]].


; "se syk ut"
se_syk-ut := v-intrScprPrtcl-scSuNrg_scAdj_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrScprPrtcl_rel"]].

;se_ut-som-np := v-intrPrtclScpr-scSuNrg_scPredprtclSom_prtclUt &
;  [ STEM < "se" >,
;    INFLECTION finstr-tt,
;    SYNSEM [LKEYS.KEYREL.PRED "_se_v_rel"]].

;; test-v  - høres syk ut
høres_syk-ut := v-intrScprPrtcl-scSuNrg_scAdj_prtclUt &
  [ STEM < "høres" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høres_v-intrScprPrtcl_rel"]].

høres_ut-som-np := v-intrPrtclScpr-scSuNrg_prtclUt &
  [ STEM < "høres" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høres_v-intrPrtclScpr_rel"]].


; ; test-v;  "se ut til å komme" (til-rais), 
; "det ser ut til at han kommer" (til-expl
se_ut-til := v-intrPrtclOblRais-oblTil_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrPrtclOblRais_rel"]].

; "det ser ut som at han kommer" (til-expl
; "det ser ut som om han kommer" (til-expl
; "det ser ut som han kommer" (til-expl
se_ut-som := v-intrPrtclOblRais-oblSom_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrPrtclOblRais_rel"]].

#|
; "det ser ut som han kommer"
se_ut-som-clse := v-ALTraisORfin-se_ut_som &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY ut-pcl ]], 
                                 [LOCAL.CAT.HEAD [KEYS.KEY som-pred-adj ]]>].

se_ut-som-om-clse := v-ALTraisORfin-se_ut_som_om &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY ut-pcl ]], 
                                 [LOCAL.CAT.HEAD [KEYS.KEY som-om-pred-adj ]]>].


|#
#|
;these two are replaced by the one below:
; "det ser ut til at han kommer" (til-expl
;intrans-secpred-prtcl3-rais-from-nonverbal-arg1-verb-lexeme
se_ut-som-clse := v-ALTraisORfin-se_ut_som &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY ut-pcl ]], 
                                 [LOCAL.CAT.HEAD [KEYS.KEY som-pred-adj ]]>].

se_ut-som-om-clse := v-ALTraisORfin-se_ut_som &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY ut-pcl ]], 
                                 [LOCAL.CAT.HEAD [KEYS.KEY som-om-pred-adj ]]>].
|#
; not clear if needed
se_ut-som-or-som-om := v-intrPrtclScpr-scSuNrg_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrPrtclScpr_rel"]].

;; test-v
stille_intr-secpred := v-intrLghtScpr-scSuNrg_scPredprtcl &
  [ STEM < "stille" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_stille_v-intrLghtScpr_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY predcomp-som ]]>].

fremstå_intr-secpred := v-intrLghtScpr-scSuNrg_scPredprtcl &
  [ STEM < "fremstå" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_fremstå_v-intrLghtScpr_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY predcomp-som ]]>].

framstå_intr-secpred := v-intrLghtScpr-scSuNrg_scPredprtcl &
  [ STEM < "framstå" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_fremstå_v-intrLghtScpr_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY predcomp-som ]]>].

; how annotate the "som" or "for"?
; could be this way, for "anse ham som syk", and similarly for
; "anse ham for å være syk", "ansem ham syk", "anse ham som en fiende";
; but this gives a lot of entries, therefore we stick to the sloppier
; solution underneath

; anse_adj-rais := v-trScpr-scObNrg_scAdjOrPredprtcl &
;  [ STEM < "anse" >,
;    INFLECTION v32,
;    SYNSEM [LKEYS.KEYREL.PRED "_anse_v_rel"],
;    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY som-pred-adj ]]>].
; LH 300711: have switched to the many-entries approach, since the sloppy aproach gave too much parseforest

anse_adj-rais := v-trScpr-scObNrg_scAdj &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_for-rais := v-trScpr-scObNrg_scPredprtclForInf &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_som-rais := v-trScpr-scObNrg_scPredprtclSom &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_refl-adj-rais := v-trScpr-scObNrg_obRefl_scAdj &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_refl-for-rais := v-trScpr-scObNrg_obRefl_scPredprtclFor &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_refl-som-rais := v-trScpr-scObNrg_obRefl_scPredprtclSom &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

kalle_rais := v-trScpr-scObNrg_scN &
  [ STEM < "kalle" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_kalle_v-trScpr_rel"]].

; doesn't work with "hun kaller seg en venn" - INDEX mismatch. One
; should use the 'instantiate'-analysis here. Meanwhile, ditrans - below
kalle_refl-rais := v-trScpr-scObNrg_obRefl_scN &
  [ STEM < "kalle" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_kalle_v-trScpr_rel"]].

;kalle_ditr := v-ditr &
;  [ INFLECTION nonfstr,
;    STEM < "kalle" >,
;    SYNSEM.LKEYS.KEYREL.PRED "kalle-rel" ].

;kalle_secpred := v-trScpr-scObArgCsd &
;  [ INFLECTION nonfstr,
;    STEM < "kalle" >,
;    SYNSEM.LKEYS.KEYREL.PRED "kalle-rel" ].

kalle_trdir := v-tr-obDir &
  [ INFLECTION nonfstr-te,
    STEM < "kalle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kalle_v-tr_rel" ].

rette_trPath := v-trPath-obDir-ORIENTING &
 [ INFLECTION nonfstr-et,
   STEM < "rette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rette_v-trPath_rel" ].



;; test-v
vise_refl-rais := v-trScpr-scObNrg_obRefl_scPredprtclSom &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trScpr_rel"]].

vise_refl-rais-to-subj := v-trNrfScpr-obReflExpl_scSuNrg_scInf &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trNrfScpr_rel"]].

fortone_secpred-refl := v-trNrfScpr-obReflExpl_scSuNrg &
  [ STEM < "fortone" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_fortone_v-trNrfScpr_rel"]].


opphøye_refl-rais := v-trScpr-scObNrg_obRefl_scPredprtclTil &
  [ STEM < "opphøye" >,
    INFLECTION nonfstr-de,
    SYNSEM [LKEYS.KEYREL.PRED "_opphøye_v-trScpr_rel"]].

opphøye_rais := v-trScpr-scObNrg_scPredprtclTil &
  [ STEM < "opphøye" >,
    INFLECTION nonfstr-de,
    SYNSEM [LKEYS.KEYREL.PRED "_opphøye_v-trScpr_rel"]].

opphøye_tr-dir := v-tr-obDir &
  [ STEM < "opphøye" >,
    INFLECTION nonfstr-de,
    SYNSEM [LKEYS.KEYREL.PRED "_opphøye_v-tr_rel"]].

famle_tr-refl-dir := v-trPath-obRefl_obDir &
 [ INFLECTION nonfstr-et,
   STEM < "famle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_famle_v-trPath_rel" ].

forvente_rais := v-trScpr-scObNrg_scAdj &
  [ STEM < "forvente" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_forvente_v-trScpr_rel"]].

;; test-v
forefalle_rais := v-intrScpr-scSuNrg_scBareinf &
  [ STEM < "forefalle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forefalle_v-intrScpr_rel"]].

;; test-v
synes_å-gå := v-intrScpr-scSuNrg_scInf &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

synes_meg-som := v-trScpr-scSuNrg_scPredprtclSomN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_meg-syk := v-trScpr-scSuNrg_scAdj &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_intr-secpr-rais-adj := v-intrScpr-scSuNrg_scAdj &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

synes_tr-secpr-rais-pp := v-trScpr-scSuNrg_scPP &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_intr-secpr-rais-pp := v-intrScpr-scSuNrg_scPP &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

synes_intrScprExpnAdj := v-intrScprExpn-scAdj &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScprExpn_rel"]].



;not working yet TODO
;synes_intrScprExpnPredprtcl := v-intrScprExpn-scPredprtcl &
;  [ STEM < "synes" >,
;    INFLECTION nonfstr-te,
;    SYNSEM [LKEYS.KEYREL.PRED "_synes_v_rel"]].

synes_tr-secpr-raistosubj-n := v-trScpr-scSuNrg_scN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_intr-secpr-rais-som-np := v-intrScpr-scSuNrg_scPredprtcl_scSomN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].
#|
synes_intr-secpr-raistosubj-nonv-som-om := v-intrScpr-scSuNrg_scPredprtcl_scSomOmClse &
  [ STEM < "synes" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v_rel"]].
|#
; shouldn't have a variant just underspecified relative to the others,
; "som" is here som-adj-pred-clse-comp, not prep-clause-word so should turn into smth else, e.g. 'scN':

; temporarily commented out, to be replaced by something more specific - TODO
;synes_intr-secpr-rais-som-om := v-intrScpr-scSuNrg_scSomOmClse &
;  [ STEM < "synes" >,
;    INFLECTION nonfstr-te,
;    SYNSEM [LKEYS.KEYREL.PRED "_synes_v_rel"]].


synes_intr-secpr-n := v-intrScpr-scSuNrg_scN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

; not necessary, given the above - unless selection concerns enforce using the more specific ones
;han synes som han kommer, det synes som han kommer
;synes_intr-secpr-raistosubj-nonv-som := v-intrScpr-scSuNrg_scPredprtcl_scSomCls;e &
;  [ STEM < "synes" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_synes_v_rel"]].


;; test-v
;ville_root := v-intrAuxmodComp-compEqBareinf &
;  [ STEM < "ville" >,
;    INFLECTION nonfstr,
;    SYNSEM.LKEYS.KEYREL.PRED "_ville_v_rel"].


ville_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "ville" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_ville_v-intrAuxmodScpr_rel"]].


burde_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "burde" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_burde_v-intrAuxmodScpr_rel"]].

;burde_root := v-intrAuxmodComp-compEqBareinf &
;  [ INFLECTION nonfstr,
;    STEM < "burde" >,
;    SYNSEM.LKEYS.KEYREL.PRED "burde-rel" ].

;skulle_root := v-intrAuxmodComp-compEqBareinf &
;  [ INFLECTION nonfstr,
;    STEM < "skulle" >,
;    SYNSEM.LKEYS.KEYREL.PRED "skulle-rel" ].

skulle_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "skulle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_skulle_v-intrAuxmodScpr_rel"]].

;kunne_root := v-intrAuxmodComp-compEqBareinf &
;  [ STEM < "kunne" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_kunne_v_rel"]].

;; test-v
kunne_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "kunne" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_kunne_v-intrAuxmodScpr_rel"]].

; INFLECTION v149
måtte_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "måtte" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_måtte_v-intrAuxmodScpr_rel"]].

;måtte_root := v-intrAuxmodComp-compEqBareinf &
;  [ STEM < "måtte" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_måtte_v_rel"]].


kunne__intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "kunne" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_kunne_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

måtte_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "måtte" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_måtte_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

skulle_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "skulle" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_skulle_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

ville_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "ville" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_ville_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

burde_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "burde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_burde_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

;virke_secpred := v-intrScpr-scSuNrg &
;  [ STEM < "virke" >,
;    INFLECTION nonfstr-et,
;    SYNSEM [LKEYS.KEYREL.PRED "_virke_v_rel"]].


;han virker som om han kommer, det virker som om han kommer
;; test-v
;virke_intr-secpr-rais-som-om := v-intrScpr-scSuNrg &
;  [ STEM < "virke" >,
;    INFLECTION nonfstr-et,
;    SYNSEM [LKEYS.KEYREL.PRED "_virke_v_rel",
;            LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT [HEAD.KEYS.KEY som-pred-adj,
;                                             QVAL.DOBJECT [LOCAL.CAT.HEAD.KEYS.KEY om-clse,
;                                                               LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD verb-all,
 ;                                                              LOCAL.CAT.QVAL.DOBJECT.LOCAL.CONT.HOOK.INDEX.E.TENSE finite]]]].

virke_intr-secpr-rais-adj := v-intrScpr-scSuNrg_scAdj &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

virke_intr-secpr-rais-som-np := v-intrScpr-scSuNrg_scPredprtcl_scSomN &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

; "som" is here som-adj-pred-clse-comp, not prep-clause-word
virke_intr-secpr-rais-som-om := v-intrScpr-scSuNrg_scPredprtcl_scSomOmClse &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

synes_intr-secpr-rais-som-om := v-intrScpr-scSuNrg_scPredprtcl_scSomOmClse &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

; "som" is here som-adj-pred-clse-comp, not prep-clause-word
virke_intr-secpr-rais-som := v-intrScpr-scSuNrg_scPredprtcl_scSomClse &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

synes_intr-secpr-rais-som := v-intrScpr-scSuNrg_scPredprtcl_scSomClse &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].


; not necessary, given the above - unless selection concerns enforce using the more specific ones


;virke_intr-secpr-raistosubj-nonv-som-om-clse := v-intrScpr-scSuNrg_scPredprtcl_;scSomOmClse &
;  [ STEM < "virke" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_virke_v_rel"]].


;han virker som han kommer, det virker som han kommer
;virke_intr-secpr-raistosubj-nonv-som-clse := v-intrScpr-scSuNrg_scPredprtcl_scS;omClse &
;  [ STEM < "virke" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_virke_v_rel"]].


; these are now analyzed as obliques
;; "han later til å komme", "det later til at han kommer", "det later til
; å rusle en gutt
;late_intr-secpr-raistosubj-nonv := v-intrScpr-scSuNrg &
;  [ STEM < "late" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_late_v_rel",
;            LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT [HEAD.KEYS.KEY til-rais,
;                                             QVAL.DOBJECT.LOCAL.CAT.HEAD glob-comp]]].

; Maybe this is now redundant
;NEW_CODE_TO_OLD_CODE
;v-ALTraisORfin-late_til-v-intrOblRais-suNrg_oblRaisInf-OR-v-intrOblExlnk-suExpl_oblExlnkDECL
;intrans-rais-from-pp-arg1-verb-lexeme
late_intrObl-rais := v-intrOblRais-oblTil &
  [ STEM < "late" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_late_v-intrOblRais_rel"]].

haste_intrObl-Exlnk := v-intrOblExlnk-oblExlnkDECL &
  [ STEM < "haste" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_haste_v-intrOblExlnk_rel"]].

; late som
late_intr-obl := v-intrObl-oblDECL-oblSom &
  [ STEM < "late" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_late_v-intrObl_rel"]].

; see semlab
bo_intr-locobl := v-intrObl-oblLoc &
 [ INFLECTION finstr-dd,
   STEM < "bo" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bo_v-intrObl_rel" ].

bo_pres-locobl := v-intrPresntLoc &
 [ INFLECTION finstr-dd,
   STEM < "bo" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bo_v-intrPresntLoc_rel" ].

oppholde_tr-refl-locobl := v-trObl-obRefl-oblLoc &
 [ INFLECTION nonfstr-te,
   STEM < "oppholde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_oppholde_v-trObl_rel" ].

oppholde_pres-refl-locobl := v-trPresntLoc-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "oppholde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_oppholde_v-trPresntLoc_rel" ].

trenge_pres-secpr-dir-refl := v-trNrfPresntPathShft-obRefl_presDir &
 [ INFLECTION nonfstr-te,
   STEM < "trenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_trenge_v-trNrfPresntPathShft_rel" ].

utfolde_tr-obl-refl := v-trObl-obRefl_oblINTERR &
 [ INFLECTION nonfstr-et,
   STEM < "utfolde" >,
   SYNSEM.LOCAL.KEY-SPEC om-k,
   SYNSEM.LKEYS.KEYREL.PRED "_utfolde_v-trObl_rel" ].

smette_intrPresnt := v-intrPresntPath-presDir &
 [ INFLECTION nonfstr-strong,
   STEM < "smette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_smette_v-intrPresntPath_rel" ].

smette_intrPresntShft := v-intrPresntPathShft-presDir &
 [ INFLECTION nonfstr-strong,
   STEM < "smette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_smette_v-intrPresntPathShft_rel" ].


ta_tr-obl := v-trObl &
  [ INFLECTION finstr-tt,
    STEM < "ta" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS <[LOCAL.CAT.HEAD.KEYS.KEY på-assoc]>  ].

; han kommer til å sove
komme_intrObl-rais_Fut := v-intrOblRais-oblTil &
  [ INFLECTION nonfstr-strong,
    STEM < "komme" >,
    SYNSEM.LKEYS.KEYREL.PRED "_komme_v-intrOblRais_rel"].

; for NoW, better leave out
gå_intr-secpred_adj := v-intrScpr-scSuNrgCsd_scAdj &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v_rel" ].

; too rearely used
;gå_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
; [ INFLECTION finstr-tt,
;   STEM < "gå" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_gå_v_rel" ].

; little used
;gå_intr-secpred_pp := v-intrScpr-scSuNrgCsd_scPP &
; [ INFLECTION finstr-tt,
;   STEM < "gå" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_gå_v_rel" ].

gå_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v_rel" ].

renne_intr-secpred_adj := v-intrScpr-scSuNrgCsd_scAdj &
 [ INFLECTION nonfstr-strong,
   STEM < "renne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_renne_v-intrScpr_rel" ].

renne_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
 [ INFLECTION nonfstr-strong,
   STEM < "renne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_renne_v-intrScpr_rel" ].

koke_intr-secpred_adj := v-intrScpr-scSuNrgCsd_scAdj &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-intrScpr_rel" ].

koke_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-intrScpr_rel" ].

snø_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
 [ INFLECTION finstr,
   STEM < "snø" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snø_v-intrScpr_rel" ].

regne_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-intrScpr_rel" ].

koke_intr-arg-secpred := v-intrScpr-scSuArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-intrScpr_rel" ].

henge_intr-arg-secpred := v-intrScpr-scSuArgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "henge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_henge_v-intrScpr_rel" ].




; the 'lightness' in these verbs is reflected in the PRED value, which is like the PRED for the copula:
ligge_lightv  := v-intrLghtScpr-scAdj &
  [ INFLECTION nonfstr-strong,
    STEM < "ligge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_condition_rel" ].

stå_lightv  := v-intrLghtScpr-scAdj &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_condition_rel" ].


; den er fin
;; test-v
være_copstand := v-copAdj &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_property_rel"]].

være_present := v-intrPresnt &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_location_rel"]].

være_coplocpp := v-copPP &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_location_rel"]].

;være_copdirpp := v-copPPdir &
;  [ STEM < "være" >,
;    INFLECTION nonfstr-strong,
;    SYNSEM [LKEYS.KEYREL.PRED "_location_rel"]].

være_coplocppDecl := v-copPP-suDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_location_rel"]].

; currently only in the way
;være_copPredprtcDecl := v-copPredprtcl-suDECL &
;  [ STEM < "være" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_property_rel"]].

være_copPredprtc := v-copPredprtcl &
  [ STEM < "være" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_property_rel"]].

være_coplocadv := v-copAdv &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_location_rel"]].

; TODO. LH 23jun-11: emergency, for "Gud er", and "her er boken", where "er" should be a case of v-copAdv, but that would require more reworking of the extraction apparatus than at the moment possible. (Lots of such cases in the NoW test-suite.) Some rework done, so the absolute being is abandoned
;være_intr := v-intr &
;  [ STEM < "være" >,
;    INFLECTION nonfstr-strong,
;    SYNSEM [LKEYS.KEYREL.PRED "_exist_rel"]].

; det er fint i Finnmark
;; test-v
være_abs := v-copImpersAdjLoc &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiated_rel"]].

være_tough := v-copToughAdj &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiated_rel"]].


;; test-v
være_abs-nonepon-decl := v-copAdj-suDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiated_rel"]].

;; test-v
være_abs-nonepon-quest := v-copAdj-suINTERR &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiated_rel"]].

;; test-v
være_copnom := v-copN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copnomDecl := v-copN-suDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copnomYN := v-copN-suYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copnomWH := v-copN-suWH &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copnomAbsinf := v-copN-suAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

; være med
være_atelpartcl := v-intrPrtcl-SUSTAINEDACTIVITY &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC med-pcl,
    SYNSEM [LKEYS.KEYREL.PRED "_være_v-intrPrtcl_rel"]].

være_copclause := v-copIdDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copIdN := v-copIdN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copabsinf := v-copIdAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copIdAbsinf-absinf := v-copIdAbsinf-suAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_indirwhquest := v-copIdWH &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_indir-y-n-quest := v-copIdYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copExpnNYN := v-copExpnN-expnYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copExpnNDECL := v-copExpnN-expnDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copExpnNWH := v-copExpnN-expnWH &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copExpnNAbsinf := v-copExpnN-expnAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copExpnPPYN := v-copExpnPP-expnYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copExpnPPDECL := v-copExpnPP-expnDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

være_copExpnAdj := v-copExpnAdj &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].

; not factually correct:
;være_pass := v-intrAuxpassScpr-scSuNrg_scPass &
;  [ STEM < "være" >,
;    INFLECTION nonfstr-strong,
;    SYNSEM [LKEYS.KEYREL.PRED "_perfect-inchoation_rel"]].


;være_6 := v-intrPresnt &
;  [ STEM < "være" >,
;    INFLECTION v1,
;    SYNSEM [LKEYS.KEYREL.PRED "_instantiated_rel"]].



bli_copstand := v-copAdj &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_inchoation_rel"]].

bli_copnom := v-copN &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_incho-instantiate_rel"]].

bli_copExpnAdj := v-copExpnAdj &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_incho-instantiate_rel"]].

bli_abs := v-copImpersAdjLoc &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_incho-instantiated_rel"]].

bli_pres := v-intrPresnt &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_incho-instantiated_rel"]].

bli_copclause := v-copIdDECL &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_instantiate_rel"]].


bli_pass := v-intrAuxpassScpr-scSuNrg_scPass &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_inchoation_rel"]].

;; test-v
ha_perf := v-intrAuxperfScpr-scSuNrg_scPerf &
  [ STEM < "ha" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_perfective_rel"]].

;this applies only to ergatives, a distinction not expressed yet. But adjectival derivation combining with standard copula is possible, therefore commenting this out, for so long.
være_perf := v-intrAuxperfScpr-scSuNrg_scPerf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.CAT.VAL.COMPS <intrans-arg1-synsem-super & [LOCAL.CONT.HOOK.XARG.ROLE non-initiator]>,
    SYNSEM [LKEYS.KEYREL.PRED "_perfective_rel"]].

få_perf := v-intrAuxperfScpr-scSuNrg_scPerf &
  [ STEM < "få" >,
    INFLECTION finstr-tt,
    SYNSEM [LOCAL.CONT.HOOK.INDEX.SIT-TYPE.COMPLETED +,
            LKEYS.KEYREL.PRED "_achievement_rel"]].

få_equi := v-intrAuxmodComp-compEqBareinf &
  [ STEM < "få" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_få_v-intrAuxmodComp_rel"]].

ha_secpr := v-trScpr-scObArgCsd_scLoc &
  [ STEM < "ha" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_ha_v-trScpr_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS <[], [ LOCAL.CAT.HEAD.KEYS.KEY index-sit]>].

ha_pp-shft := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
 [ INFLECTION finstr-tt,
   STEM < "ha" >,
   SYNSEM.LOCAL.KEY-SPEC på-indxsit,
   SYNSEM.LKEYS.KEYREL.PRED "_ha_v-trScprShft_rel" ].

ha_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "ha" >,
   SYNSEM.LOCAL.KEY-SPEC med-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_ha_v-trScprShft_rel" ].

ta_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LOCAL.KEY-SPEC med-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trScprShft_rel" ].

få_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM.LOCAL.KEY-SPEC med-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-trScprShft_rel" ].


få_secpr := v-trScpr-scObArgCsd_scEndpt &
  [ STEM < "få" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_få_v-trScpr_rel"]].

invitere_tr-obl-til_å := v-trObl-oblEqObInf &
 [ INFLECTION nonfstr,
   STEM < "invitere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invitere_v-trObl_rel",
            LOCAL.KEY-SPEC til-k ] ].



;bli_intr := v-intr &
;  [ STEM < "bli" >,
;    INFLECTION finstr-tt,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mainvb-nofreepred,
;    SYNSEM [LKEYS.KEYREL.PRED "_remain_rel"]].

;; test-v
;now semlab
;koke_intr-sec := v-intrScpr-scSuNrgCsd &
;  [ STEM < "koke" >,
;    INFLECTION nonfstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_koke_v_rel"]].

koke_intr := v-intr &
  [ STEM < "koke" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_koke_v-intr_rel"]].

;; test-v - but gives wrong semantics. Intrans + adv-mod-vp goes better
;fungere_intr-obladv := v-intrAdv &
;  [ INFLECTION v2,
;    STEM < "fungere" >,
;    SYNSEM.LKEYS.KEYREL.PRED "fungere-rel" ].

;; test-v
vise_ditr-decl := v-ditr-obDECL &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_vise_v-ditr_rel" ].

;; test-v
forestille_ditr-decl-refl := v-ditr-iobRefl_obDECL &
  [ STEM < "forestille" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_forestille_v-ditr_rel" ].

foresette_ditr-decl-refl := v-ditr-iobRefl_obDECL &
  [ STEM < "foresette" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_foresette_v-ditr_rel" ].

foresette_ditr-equi-refl := v-ditr-iobRefl_obEqIobInf &
  [ STEM < "foresette" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_foresette_v-ditr_rel" ].

forespeile_ditr-DECL := v-ditr-obDECL &
  [ STEM < "forespeile" >,
    INFLECTION nonfstr-et_or_te,
    SYNSEM.LKEYS.KEYREL.PRED "_forespeile_v-ditr_rel" ].

forespeile_ditr-equi := v-ditr-obEqIobInf &
  [ STEM < "forespeile" >,
    INFLECTION nonfstr-et_or_te,
    SYNSEM.LKEYS.KEYREL.PRED "_forespeile_v-ditr_rel" ].

;; test-v
overlate_ditr := v-ditr &
  [ STEM < "overlate" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_overlate_v-ditr_rel" ].

overlate_trOblExpnObInf := v-trOblExpnOb-expnAbsinf &
  [ STEM < "overlate" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_overlate_v-ditr_rel" ].

vise_ditr := v-ditr &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_vise_v-ditr_rel" ].

; equivalent with less verbose type
;vise_io-refl-epon := v-trNrfExpnSu-obReflExpl_expnDECL &
;  [ STEM < "vise" >,
;    INFLECTION nonfstr-te,
;    SYNSEM.LKEYS.KEYREL.PRED "_vise_v_rel" ].

;; test-v
unne_ditr-refl := v-ditr-iobRefl &
  [ STEM < "unne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_unne_v-ditr_rel" ].

unne_obj-equi := v-ditr-obEqIobInf &
  [ STEM < "unne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_unne_v-ditr_rel" ].

unne_obj-equi-refl := v-ditr-iobRefl_obEqIobInf &
  [ STEM < "unne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_unne_v-ditr_rel" ].

;; test-v
vente_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "vente" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vente_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

gå_intr-obl-av := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-intrObl_rel",
   SYNSEM.LOCAL.KEY-SPEC av-k  ].

bero__intr-obl-np := v-intrObl-oblN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-basis-of ] ].

stole_intr-obl-np := v-intrObl-oblN &
  [ STEM < "stole" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_stole_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-basis-of ]]>].

avhenge_intr-obl-np := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-obl-clause := v-intrObl-oblDECL &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

stole_intr-obl-clause := v-intrObl-oblDECL &
  [ STEM < "stole" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_stole_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-clse ]]>].

avhenge_intr-obl-clause := v-intrObl-oblDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

bønnfalle_obj-eq-pp := v-trObl-oblEqObInf &
 [ INFLECTION nonfstr-strong,
   STEM < "bønnfalle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bønnfalle_v-trObl_rel" ].

;fortelle_eq := v-trObl-oblEqObInf &
; [ STEM < "fortelle" >,
;   INFLECTION nonfstr-strong,
;   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v_rel" ].

fortelle_obl-decl := v-trObl-oblDECL &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LOCAL.KEY-SPEC om-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].

fortelle_obl-interr := v-trObl-oblINTERR &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LOCAL.KEY-SPEC om-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].

fortelle_obl-absinf := v-trObl-oblAbsinf &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LOCAL.KEY-SPEC om-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].

;SYNSEM.LOCAL.KEY-SPEC om-concumm,
 fortelle_obl := v-trObl &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].


;bero_test := epon-decl-and-yn-pp-verb-lexeme &
; [ INFLECTION finstr,
;   STEM < "bero" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v_rel",
;            LOCAL.KEY-SPEC på-k ] ].


bero_intr-pp-yn-clause := v-intrOblExpn-expnYN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC på-k ] ].

bero_intr-pp-wh-clause := v-intrOblExpn-expnWH &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC på-k ] ].

; mock entry
stra_intr-pp-wh-clause := v-intrOblExpn-expnWH &
 [ INFLECTION finstr,
   STEM < "stra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC på-k ] ].

; mock entry
;stro_expl := explet-pron-word &
;  [ STEM < "stro" > ].


avhenge_intr-pp-wh-clause := v-intrOblExpn-expnWH &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-pp-decl-clause := v-intrOblExpn-expnDECL &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC på-k ] ].

avhenge_intr-pp-yn-clause := v-intrOblExpn-expnYN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intr-pp-decl-clause := v-intrOblExpn-expnDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblWH_expnWH := v-intrOblExpn-oblWH_expnWH &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblYN_expnYN := v-intrOblExpn-oblYN_expnYN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblYN_expnWH := v-intrOblExpn-oblYN_expnWH &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblWH_expnYN := v-intrOblExpn-oblWH_expnYN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].



overlate_tr-obl := v-trObl &
 [ INFLECTION nonfstr-strong,
   STEM < "overlate" >,
   SYNSEM.LKEYS.KEYREL.PRED "_overlate_v-trObl_rel" ].


; "lure på hva/hvorvidt"
lure_intr-obl-interr-på := v-intrObl-oblINTERR &
  [ INFLECTION nonfstr-te,
    STEM < "lure" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lure_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-clse ]]> ].

; "lure på svaret"
lure_intr-obl-n-på := v-intrObl-oblN &
  [ INFLECTION nonfstr-te,
    STEM < "lure" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lure_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-assoc ]]> ].

; se alvorlig på
se_intr-adv-obl := v-intrOblAdv &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM.LKEYS.KEYREL.PRED "_se_v-intrOblAdv_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-topic-of ]]>].

starte_intr-obl := v-intrObl-oblN-activity &
  [ INFLECTION nonfstr-et,
    STEM < "starte" >,
    SYNSEM.LKEYS.KEYREL.PRED "_starte_v_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-atelop ]]> ].

;; test-v
snakke_intr-obl-med := v-intrObl-oblN &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-concumm ]]> ].


snakke_intr-obl-n-om := v-intrObl-oblN &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-k ]]> ].

snakke_intr-obl-decl-om := v-intrObl-oblDECL &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-k ]]> ].

snakke_intr-obl-interr-om := v-intrObl-oblINTERR &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-k ]]> ].

snakke_intr-obl-til := v-intrObl-oblN &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY til-fct-spec ]]> ].

snakke_intr-2obl-med := v-intrObl2 &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl2_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-concumm ]],
                                 [LOCAL.CAT.HEAD [KEYS.KEY om-fct-spec ]]> ].

snakke_equi := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr-et,
   STEM < "snakke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel" ].

; reactivate only when obj is specified as 'tull' or 'snikksnakk'. Hm, 'snakke et språk ...'
snakke_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "snakke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-tr_rel" ].

røre_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "røre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_røre_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

røre_oblrefl := v-intrObl-oblRefl &
  [ STEM < "røre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_røre_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k]].

;; test-v
lee_oblrefl := v-intrObl-oblRefl &
  [ STEM < "lee" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_lee_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-atelop ]]>].

bre_tr-ppshift := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
 [ INFLECTION finstr-dd,
   STEM < "bre" >,
   SYNSEM.LOCAL.KEY-SPEC på-indxsit,
   SYNSEM.LKEYS.KEYREL.PRED "_bre_v-trScprShft_rel" ].

bre_tr-ppshift-nonrefl := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION finstr-dd,
   STEM < "bre" >,
   SYNSEM.LOCAL.KEY-SPEC på-indxsit,
   SYNSEM.LKEYS.KEYREL.PRED "_bre_v-trScprShft_rel" ].

kle_secpr := v-trScpr-scObArgCsd_scLoc &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-trScpr_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [], [LOCAL.CAT.HEAD [KEYS.KEY på-indxsit ]] >].

kle_ppshift := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-trScprShft_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-indxsit ]], []>].

; these two have replica in lex2.semlab, with shorter labels, but less telling
kle_impl-obj := v-intrScpr-scObimplNrgRes_scPP-PLACEMENT &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY index-sit ]]> ].

kle_impl-obj-refl := v-intrScpr-scObimplNrgRes_scPPrefl-PLACEMENT &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY index-sit ]]> ].

;; test-v
jafse_ppshift := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
  [ STEM < "jafse" >,
    INFLECTION nonfstr-et,
    SYNSEM.LOCAL.KEY-SPEC i-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_jafse_v-trScprShft_rel"].

spise_tr-secpred-arg1 := v-trScpr-scObNrgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "spise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spise_v-trScpr_rel" ].

spise-ppshift := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
 [ INFLECTION nonfstr-te,
   STEM < "spise" >,
   SYNSEM.LOCAL.KEY-SPEC i-indxsit,
   SYNSEM.LKEYS.KEYREL.PRED "_spise_v-trScprShft_rel" ].

jafse_secpr := v-trScpr-scObArgCsd_scLoc &
  [ STEM < "jafse" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_jafse_v-trScpr_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [], [LOCAL.CAT.HEAD [KEYS.KEY i-indxsit ],
                                      LOCAL.CONT.HOOK.INDEX.ROLE xdim-to-xdim-spatial]>].


;; test-v
kvekke_impers-pres-obl := v-intrImpersObl &
  [ INFLECTION nonfstr-strong,
    STEM < "kvekke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kvekke_v-intrImpersObl_rel" ].

sprekke_impers-pres-obl := v-intrImpersObl &
  [ INFLECTION nonfstr-strong,
    STEM < "sprekke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sprekke_v-intrImpersObl_rel" ].

synge_impers-pres-obl := v-intrImpersObl &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synge_v-intrImpersObl_rel" ] ].


;; test-v
tilkomme_io-pres := v-trPresnt &
  [ STEM < "tilkomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_tilkomme_v-trPresnt_rel"]].

;; test-v
vente_io-pres := v-trPresnt &
  [ STEM < "vente" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_vente_v-trPresnt_rel"]].

vente_intr := v-intr &
  [ STEM < "vente" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_vente_v-intr_rel"]].

forekomme_io-epon := v-trExpnSu-expnDECL &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trExpnSu_rel"]].

; han forekommer meg syk
forekomme_io-rais-adj := v-trScpr-scSuNrg_scAdj &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].

forekomme_tr-secpr-rais-pp := v-trScpr-scSuNrg_scPP &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].

forekomme_io-rais-som := v-trScpr-scSuNrg_scPredprtclSomN &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].

ane_io-epon := v-trExpnSu-expnDECL &
  [ STEM < "ane" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_ane_v-trExpnSu_rel"]].

beklage_trExpnOb := v-trExpnOb-expnDECL &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-trExpnOb_rel" ].

beklage_trExpnObCond := v-trExpnOb-expnCOND &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-trExpnOb_rel" ].

muliggjøre_trExpnObDecl := v-trExpnOb-expnDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "muliggjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause-possible_rel" ].

muliggjøre_trExpnObInf := v-trExpnOb-expnAbsinf &
 [ INFLECTION nonfstr-strong,
   STEM < "muliggjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause-possible_rel" ].

umuliggjøre_trExpnOb := v-trExpnOb-expnDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "umuliggjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause-impossible_rel" ].

umuliggjøre_trExpnObInf := v-trExpnOb-expnAbsinf &
 [ INFLECTION nonfstr-strong,
   STEM < "umuliggjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause-impossible_rel" ].

ane_intr := v-intr &
  [ STEM < "ane" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_ane_v-intr_rel"]].

utvide_intr := v-intr &
  [ STEM < "utvide" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_utvide_v-intr_rel"]].

foresveve_io-som-adj := v-trScpr-scSuNrg_scPredprtclSom &
  [ STEM < "foresveve" >,
    INFLECTION nonfstr-de,
    SYNSEM [LKEYS.KEYREL.PRED "_foresveve_v-trScpr_rel"]].

foresveve_io-som-N := v-trScpr-scSuNrg_scPredprtclSomN &
  [ STEM < "foresveve" >,
    INFLECTION nonfstr-de,
    SYNSEM [LKEYS.KEYREL.PRED "_foresveve_v-trScpr_rel"]].

;; test-v
foresveve_io-epon := v-trExpnSu-expnDECL &
  [ STEM < "foresveve" >,
    INFLECTION nonfstr-de,
    SYNSEM [LKEYS.KEYREL.PRED "_foresveve_v-trExpnSu_rel"]].

ta_meas-epon := v-trExpnSu-obMeas_expnInfabs &
  [ STEM < "ta" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_ta_v-trExpnSu_rel"]].

koste_meas-epon := v-trExpnSu-obMeas_expnInfabs &
  [ STEM < "koste" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_koste_v-trExpnSu_rel"]].

ta_meas-io-epon := v-ditrExpnSu-obMeas_expnEqInf &
  [ STEM < "ta" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_ta_v-ditrExpnSu_rel"]].

koste_meas-io-epon := v-ditrExpnSu-obMeas_expnEqInf &
  [ STEM < "koste" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_koste_v-ditrExpnSu_rel"]].

;; test-v
hende_epon := v-intrExpn-expnDECL &
  [ STEM < "hende" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_hende_v-intrExpn_rel"]].

virke_epon := v-intrExpn-expnDECL &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrExpn_rel"]].

synes_epon := v-intrExpn-expnDECL &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

hjelpe_epon := v-intrExpn-expnAbsinf &
  [ STEM < "hjelpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_hjelpe_v-intrExpn_rel"]].

høre_expn-prtcl-fin := v-intrPrtclExpn-expnDECL &
  [ STEM < "høre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høre_v-intrPrtclExpn_rel"]].

høre_expn-prtcl-infin := v-intrPrtclExpn-expnAbsinf &
  [ STEM < "høre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høre_v-intrPrtclExpn_rel"]].



;; test-v
spørs_epon := v-intrExpn-expnINTERR &
  [ STEM < "spørs" >,
    SYNSEM [LKEYS.KEYREL.PRED "_spørs_v-intrExpn_rel"]].

spørs_suINTERR := v-intr-suINTERR &
  [ STEM < "spørs" >,
    SYNSEM [LKEYS.KEYREL.PRED "_spørs_v-intr_rel"]].

;; test-v
forekomme_io-rais := v-trScpr-scSuNrg_scInf &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].

;; test-v
spise_atelobl-på := v-intrObl-oblN-activity &
  [ STEM < "spise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL [ PRED "_spise_v_rel" ] ],
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-atelop ]]> ].

; unclear how these go with coordinated nouns; leave out for now
;ta_trinh := v-tr-obEventunit &
;  [ STEM < "ta" >,
;    INFLECTION finstr,
;    SYNSEM [LKEYS.KEYREL.PRED "_ta_v-tr_rel"],
;    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY død-inhcmp ],;
;				  LOCAL.BND-RESP < [ANAPH-TYPE [BOUND +;,
;								REFL-I +]]>]>].

;ta_particleshift := v-trScprShft-obDir_scObArgCsd &
; [ INFLECTION finstr-tt,
;   STEM < "ta" >,
;   SYNSEM.LOCAL.KEY-SPEC med-pcl,
;   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trScprShft_rel" ].



;slå_trinh := v-tr-obEventunit &
;  [ INFLECTION finstr-tt,
;    STEM < "slå" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_slå_v-tr_rel",
;    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY leir-inhcmp ]]>  ].


;gå_trinh := v-tr-obEventunit &
;  [ INFLECTION finstr-tt,
;    STEM < "gå" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_gå_v-tr_rel",
;    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY rundtur-inhcmp ]]>  ].

;gå_intr-atel := v-intrSubcoord &
;  [ INFLECTION finstr,
;    STEM < "gå" >,
;    SYNSEM.LKEYS.KEYREL.PRED "gå-rel" ].

slå_tr := v-tr &
  [ INFLECTION finstr-tt,
    STEM < "slå" >,
    SYNSEM.LKEYS.KEYREL.PRED "_slå_v-tr_rel" ].

kjenne_tv-exp := v-tr &
	[STEM <"kjenne">,
	INFLECTION nonfstr-te,
	MORPH-SPLIT <"=kjenn=e">,
	SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-tr_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE experiencer,
	SYNSEM.LOCAL.CONT.HOOK.VARG.ROLE non-initiator,
	SYNSEM.DERIV-POT.CAN-OBJ-DEL -].

;øse_tv-reg-opt := v-tr &;
;	[STEM <"øse">;,
;	INFLECTION nonfstr-te,
;	MORPH-SPLIT <"=øs=e">,
;	SYNSEM.LKEYS.KEYREL.PRED "_øse_v-tr_rel",
;	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator,
;	SYNSEM.LOCAL.CONT.HOOK.VARG.ROLE non-initiator,
;	SYNSEM.DERIV-POT.CAN-OBJ-DEL +].

overraske_intr := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "overraske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overraske_v-intr_rel",
            LOCAL.KEY-SPEC med-k ] ].

forekomme_intr-suDecl := v-intr-suDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "forekomme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forekomme_v-intr_rel" ].

hende_intr-suDecl := v-intr-suDECL &
 [ INFLECTION nonfstr-te,
   STEM < "hende" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hende_v-intr_rel" ] ].

koste_intr-suAbsinf := v-intr-suAbsinf &
 [ INFLECTION nonfstr-et,
   STEM < "koste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_koste_v-intr_rel" ] ].

bero_intr-suDecl-obl := v-intrObl-suDECL_oblN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

; intermediate use
;bero_intr-epon-obl := epon-oblique-verb-lexeme &
; [ INFLECTION finstr,
;   STEM < "bero" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v_rel",
;            LOCAL.KEY-SPEC på-k ] ].

; intermediate use
;bero_intr-epon-pp := epon-pp-verb-lexeme &
; [ INFLECTION finstr,
;   STEM < "bero" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v_rel",
;            LOCAL.KEY-SPEC på-k ] ].

avhenge_intr-suInterr-obl := v-intrObl-suINTERR_oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intr-suDecl-obl := v-intrObl-suDECL_oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

minne_intr-suAbsinf-obl := v-intrObl-suAbsinf &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "minne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minne_v-intrObl_rel" ] ].

; left out ,
;   SYNSEM.LOCAL.KEY-SPEC ut-pcl, since the synsem type misses this part.TODO
regne_tr-prtcl-clause := v-trPrtclShft-obCLAUSE &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-trPrtclShft_rel" ].

; left out ,
;   SYNSEM.LOCAL.KEY-SPEC ut-pcl, since the synsem type misses this part.TODO
finne_tr-prtcl-clause := v-trPrtclShft-obCLAUSE &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trPrtclShft_rel" ].

finne_tr-prtcl-eq := v-trPrtcl-obEqInf &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LOCAL.ALT-SPEC på-k,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trPrtcl_rel" ].

tyde_intr-eventarg1decl-eventargobldecl := v-intrObl-suDECL_oblDECL &
 [ INFLECTION nonfstr-et,
   STEM < "tyde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tyde_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

;avhenge_intr-eventarg1decl-eventoblinterr := v-intrObl-suDECL_oblINTERR &
; [ INFLECTION nonfstr-strong,
;   STEM < "avhenge" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v_rel",
;            LOCAL.KEY-SPEC av-k ] ].

avhenge_intr-eventarg1interr-eventoblinterr := v-intrObl-suINTERR_oblINTERR &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-eventarg1interr-eventoblinterr := v-intrObl-suINTERR_oblINTERR &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

avhenge_intr-eventarg1decl-eventobldecl := v-intrObl-suDECL_oblDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-eventarg1decl-eventobldecl := v-intrObl-suDECL_oblDECL &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

bero_intr-eventarg1decl-obln := v-intrObl-suDECL_oblN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

ane_tr-decl := v-tr-suDECL & 
  [ STEM < "ane" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_ane_v-tr_rel"]].

; at han kommer antyder svik
antyde_tr-decl := v-tr-suDECL & 
  [ STEM < "antyde" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_antyde_v-tr_rel"]].

forundre_tr-decl := v-tr-suDECL &
 [ INFLECTION nonfstr-et,
   STEM < "forundre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forundre_v-tr_rel" ].

undre_tr-decl := v-tr-suDECL &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-tr_rel" ].

undre_trExpnDECL := v-trExpnSu-expnDECL &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-trExpnSu_rel" ].

undre_ditr-wh-refl := v-ditr-obWH_iobRefl &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-ditr_rel" ].

undre_ditr-yn-refl := v-ditr-obYN_iobRefl &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-ditr_rel" ].

plage_trExpnDECL := v-trExpnSu-expnDECL &
 [ INFLECTION nonfstr-et,
   STEM < "plage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_plage_v-trExpnSu_rel" ].

;undre_trReflCompInterr := v-trNrfComp-obReflExpl_compYN &
; [ INFLECTION nonfstr,
;   STEM < "undre" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_undre_v_rel" ].

interessere_trExpnYN := v-trExpnSu-expnYN & 
  [ STEM < "interessere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_interessere_v-trExpnSu_rel"]].

overraske_trExpnWH := v-trExpnSu-expnWH &
 [ INFLECTION nonfstr-et,
   STEM < "overraske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overraske_v-trExpnSu_rel",
            LOCAL.KEY-SPEC med-k ] ].


;det viser seg at
vise_trExpnDECLrefl := v-trExpnSu-expnDECL_obRefl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trExpnSu_rel"]].

;det viser seg hvorvidt
vise_trExpnYNrefl := v-trExpnSu-expnYN_obRefl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trExpnSu_rel"]].

;det viser seg hvem som
vise_trExpnWFrefl := v-trExpnSu-expnWH_obRefl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trExpnSu_rel"]].

forundre_trExpnCond := v-trExpnSu-expnCOND &
 [ INFLECTION nonfstr-et,
   STEM < "forundre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forundre_v-trExpnSu_rel" ].

behage_trExpnInfEq := v-trExpnSu-expnEqInf &
 [ INFLECTION nonfstr-de,
   STEM < "behage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_behage_v-trExpnSu_rel" ].



interessere_tr-suInterr := v-tr-suINTERR & 
  [ STEM < "interessere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_interessere_v-tr_rel"]].

interessere_tr_suAbsinf := v-tr-suAbsinf & 
  [ STEM < "interessere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_interessere_v-tr_rel"]].

koste_tr-tr-suAbsinf := v-tr-suAbsinf &
 [ INFLECTION nonfstr-et,
   STEM < "koste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_koste_v-tr_rel" ] ].

; at han kom overbeviste meg om løsningen
overbevise_tr-decl-obl := v-trObl-suDECL & 
  [ STEM < "overbevise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_overbevise_v-trObl_rel",
            LOCAL.KEY-SPEC om-k]].

; at han kom overbeviste meg om at hun kom
overbevise_tr-suDECL_oblDECL := v-trObl-suDECL_oblDECL & 
  [ STEM < "overbevise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_overbevise_v-trObl_rel",
            LOCAL.KEY-SPEC om-k]].

; at han kom overbeviste meg om hvorvidt hun kom
overbevise_tr-suDECL_oblINTERR := v-trObl-suDECL_oblINTERR & 
  [ STEM < "overbevise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_overbevise_v-trObl_rel",
            LOCAL.KEY-SPEC om-k]].

; hardly possible
; om han kommer overbeviser meg om at hun kommer
;overbevise_tr-suINTERR_oblDECL := v-trObl-suINTERR_oblDECL & 
;  [ STEM < "overbevise" >,
;    INFLECTION nonfstr-te,
;    SYNSEM [LKEYS.KEYREL.PRED "_overbevise_v_rel",
;            LOCAL.KEY-SPEC om-k]].

; at han kommer antyder at hun kommer
antyde_tr-suDecl-obDecl := v-tr-suDECL_obDECL & 
  [ STEM < "antyde" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_antyde_v-tr_rel"]].

; at han kommer indikerer hvorvidt hun kommer
indikere_tr-suDecl-obInterr := v-tr-suDECL_obINTERR & 
  [ STEM < "indikere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_indikere_v-tr_rel"]].

; om han kommer indikerer hvorvidt hun kommer
indikere_tr-suINTERR_obINTERR := v-tr-suINTERR_obINTERR & 
  [ STEM < "indikere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_indikere_v-tr_rel"]].

; at han kom påførte meg et sjokk
påføre_ditr-eventarg1-decl := v-ditr-suDECL & 
  [ STEM < "påføre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_påføre_v-ditr_rel"]].

gi_ditr-suDecl := v-ditr-suDECL &
  [ INFLECTION finstr-tt,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gi_v-ditr_rel" ].

gi_ditr-suAbsinf := v-ditr-suAbsinf &
  [ INFLECTION finstr-tt,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gi_v-ditr_rel" ].

; hvorvidt han kommer viser meg løsningen
vise_ditr-suInterr := v-ditr-suINTERR & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

; at han kommer viser oss at han er skyldig
vise_ditr-suDECL_obDECL := v-ditr-suDECL_obDECL & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

; at han kommer viser oss om han er skyldig
vise_ditr-suDECL_obINTERR := v-ditr-suDECL_obINTERR & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

; hvem som kommer forteller oss hvem som er skyldig
fortelle_ditr-suINTERR_obINTERR := v-ditr-suINTERR_obINTERR & 
  [ STEM < "fortelle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel"]].

stinke_iv_absinf := v-intr-suAbsinf &
 [ INFLECTION nonfstr-et,
   STEM < "stinke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stinke_v-intr_rel" ].

;; det, pos i norsource: []
selveste_title := title-word & 
 [ STEM < "selveste" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_selveste_det_rel" ].

sjølveste_title := title-word & 
 [ STEM < "sjølveste" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_sjølveste_det_rel" ].



;;; overview of types involving propositional (i.e., event type, expressed by clause) subjects, and possibly other event constituents:
 
#|
; TODO: ARGobl missing
;v-intr-suDECL
;v-intrObl-suDECL_oblN
;v-intrObl-suINTERR_oblN
;v-intrObl-suDECL_oblDECL
;v-intrObl-suDECL_oblINTERR
;v-intrObl-suINTERR_oblDECL 
;v-intrObl-suINTERR_oblINTERR

; only subject as event
;v-tr-suDECL
;v-tr-suINTERR
;v-trObl-suDECL
;v-trObl-suINTERR (not yet instantiated)
; crossing with the two obj types, four more types - remain

; subject and object as event
;v-tr-suDECL_obDECL
;v-tr-suDECL_obINTERR
;v-tr-suINTERR_obDECL (not yet instantiated)
;v-tr-suINTERR_obINTERR

; subject and oblique object as event
;v-tr-suDECL_oblDECL
;v-tr-suDECL_oblINTERR
;v-tr-suINTERR_oblDECL (not yet instantiated) 
;v-tr-suINTERR_oblDECL 

; only subject as event
;v-ditr-suDECL
;v-ditr-suINTERR

; subject and direct object as event
;v-ditr-suDECL_obDECL
;v-ditr-suDECL_obINTERR
;v-ditr-suINTERR_obDECL (not yet instantiated)
;v-ditr-suINTERR_obINTERR
|#

#|
Pos Rest
Disse (156) fikk ikke PoS:
unknown, all_defquant-sg, lex1.close
unknown, all_defquant-sg-poss, lex1.close
unknown, alle_defquant-pl, lex1.close
unknown, alle_defquant-pl-poss, lex1.close
unknown, alt_defquant-sg, lex1.close
unknown, alt_defquant-sg-poss, lex1.close
unknown, anno_det, lex1.close
unknown, av_measure, lex1.close
unknown, av_part-adj, lex1.close
unknown, av_part-adj2, lex1.close
unknown, av_part-measure, lex1.close
unknown, av_part-spec-card, lex1.close
unknown, av_part-spec-mass, lex1.close
unknown, av_part-spec-q, lex1.close
unknown, bare_cardspec, lex1.close
unknown, bare_focqualadv, lex1.close
unknown, bare_indefspec, lex1.close
unknown, begge_defquant-pl, lex1.close
unknown, begge_defquant-pl-poss, lex1.close
unknown, blåse_impers, lex2.open
unknown, bortimot_cardspec, lex1.close
unknown, både_corrconnect, lex1.close
unknown, ca_cardspec, lex1.close
unknown, ca-dot_cardspec, lex1.close
unknown, cirka_cardspec, lex1.close
unknown, colon, lex1.close
unknown, deretter_connect, lex1.close
unknown, enn_cmpardep-close, lex1.close
unknown, enn_cmpardep-reg, lex1.close
unknown, enn_cmpardiff-n, lex1.close
unknown, enten_corrconnect, lex1.close
unknown, etter_rais-vmod, lex1.close
unknown, exclam-adj-or-adv, lex1.close
unknown, exclam-mark, lex1.close
unknown, exclam-noun, lex1.close
unknown, exclam-prep, lex1.close
unknown, fem-over_cardspec, lex1.close
unknown, fem-over-halv_cardspec, lex1.close
unknown, fem-på_cardspec, lex1.close
unknown, fem-på-halv_cardspec, lex1.close
unknown, flest_superlat-post-count, lex1.close
unknown, flest_superlat-str-count, lex1.close
unknown, fleste_superlat-wk-count, lex1.close
unknown, for_arg1prop-epon_p, lex1.close
unknown, for_rais-vmod, lex1.close
unknown, færrest_superlat-str-count, lex1.close
unknown, færreste_superlat-wk-count, lex1.close
unknown, gedankenstrech, lex1.close
unknown, halv_cardspec, lex1.close
unknown, hele_defquant-sg, lex1.close
unknown, hele_defquant-sg-poss, lex1.close
unknown, hinsides_arg1prop-epon_p, lex1.close
unknown, hverken_corrconnect, lex1.close
unknown, hvilket_fillerrelpron, lex1.close
unknown, hvilket_subjrelpron, lex1.close
unknown, høre_expn-prtcl-fin, lex1.close
unknown, høre_expn-prtcl-infin, lex1.close
unknown, kl_det, lex1.close
unknown, kl_period_det, lex1.close
unknown, klarne_impers, lex2.open
unknown, klarne_telicpart, lex1.close
unknown, klokka_det, lex1.close
unknown, klokken_det, lex1.close
unknown, kvart-over_cardspec, lex1.close
unknown, kvart-på_cardspec, lex1.close
unknown, langtfra_cardspec, lex1.close
unknown, likedan-som_equalzr, lex1.close
unknown, lite_modble, lex1.close
unknown, med_expl-dep, lex1.close
unknown, med_measure, lex1.close
unknown, mer_cmpar-close, lex1.close
unknown, mer_cmpar-close-with-cmpar, lex1.close
unknown, mer_cmpar-mass, lex1.close
unknown, mer_cmpar-mass3, lex1.close
unknown, mer_vp-mod-cmpar-reg, lex1.close
unknown, mere_cmpar-close, lex1.close
unknown, mere_cmpar-close-with-cmpar, lex1.close
unknown, mest_superlat, lex1.close
unknown, mest_superlat-str-mass, lex1.close
unknown, mest_vp-mod-superlat, lex1.close
unknown, meste_superlat-wk-mass, lex1.close
unknown, mindre_cmpar-close, lex1.close
unknown, mindre_cmpar-close-with-cmpar, lex1.close
unknown, mindre_cmpar-mass, lex1.close

unknown, mindre_vp-mod-cmpar-reg, lex1.close
unknown, minst_superlat, lex1.close
unknown, minst_superlat-str-mass, lex1.close
unknown, minst_vp-mod-superlat, lex1.close
unknown, minste_superlat-wk-mass, lex1.close
unknown, mye_modble, lex1.close
unknown, mye_modble-abs, lex1.close
unknown, nesten_cardspec, lex1.close
unknown, nr_det, lex1.close
unknown, nr-dot_det, lex1.close
unknown, nummer_det, lex1.close
unknown, nøyaktig_cardspec, lex1.close
unknown, omtrent_cardspec, lex1.close
unknown, opp_for_arg1prop-epon_p, lex1.close
unknown, over_cardspec, lex1.close
unknown, period, lex1.close
unknown, period-adj-or-adv, lex1.close
unknown, period-interjct, lex1.close
unknown, period-n, lex1.close
unknown, period-prep, lex1.close
unknown, presis_cardspec, lex1.close
unknown, quest-adj-or-adv, lex1.close
unknown, quest-interjct, lex1.close
unknown, quest-mark, lex1.close
unknown, quest-noun, lex1.close
unknown, quest-prep, lex1.close
unknown, quote_possparticle, lex1.close
unknown, regne_impers-pres, lex1.close
unknown, s_possparticle, lex1.close

unknown, samme_adj, lex1.close
unknown, samme_def-q, lex1.close
unknown, selv_focqualadv, lex1.close
unknown, selv_refl, lex1.close
unknown, semicolon, lex1.close

unknown, si_possparticle, lex1.close
unknown, sin_possparticle, lex1.close
unknown, sine_possparticle, lex1.close
unknown, sitt_possparticle, lex1.close
unknown, slik-som_equalzr, lex1.close
unknown, snø_impers, lex2.open

unknown, som_adj-pred-clse, lex1.close
unknown, som_arg1prop-epon_p, lex1.close
unknown, som_cmpardep-reg, lex1.close
unknown, som_cmpareq-n, lex1.close
unknown, som_fillerrelpron, lex1.close
unknown, som_prep-expl-dep, lex1.close
unknown, som_prep-s, lex1.close
unknown, som_stille-som-n, lex1.close
unknown, som_subjgap, lex1.close
unknown, som_subjrelpron, lex1.close
unknown, som_synes-som-a, lex1.close
unknown, som-om_adj-pred-clse, lex1.close

unknown, spise_atelobl-på, lex1.close
unknown, starte_intr-obl, lex1.close
unknown, suse_impers-pres, lex2.open
unknown, så_connect, lex1.close
unknown, til_expl-dep, lex1.close
unknown, til_opphøye-til, lex1.close
unknown, tilkomme_io-pres, lex1.close
unknown, til-og-med_focqualadv, lex1.close
unknown, ti-over_cardspec, lex1.close
unknown, ti-over-halv_cardspec, lex1.close
unknown, ti-på_cardspec, lex1.close
unknown, ti-på-halv_cardspec, lex1.close
unknown, tjue-over_cardspec, lex1.close
unknown, tjue-på_cardspec, lex1.close
unknown, tykne_impers, lex2.open
unknown, under_arg1prop-epon_p, lex1.close
unknown, uten_rais-vmod, lex1.close
unknown, vente_io-pres, lex1.close
unknown, videre_connect, lex1.close
unknown, være_copExpnNAbsinf, lex1.close
|#
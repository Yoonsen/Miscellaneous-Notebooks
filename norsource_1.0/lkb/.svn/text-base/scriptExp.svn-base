;; set character encoding
(if (lkb-version-after-p "2005/10/28 00:00:00")
    (set-coding-system utf-8)
  #+:allegro
  (setf excl:*locale* (excl::find-locale ".utf8")))

  
;;;
;;; First, load a number of LKB-specific settings; typically no need to look
;;; too closely here
;;;
(lkb-load-lisp (parent-directory) "Version.lsp" t)
(setf *grammar-directory* (parent-directory))
(lkb-load-lisp (this-directory) "globals.lsp")
(lkb-load-lisp (this-directory) "user-fns.lsp")
  (lkb-load-lisp (this-directory) "checkpaths.lsp" t)
(load-lkb-preferences (this-directory) "user-prefs.lsp")

;;;
;;; Load a set of irregular morphological patterns
;;;
(load-irregular-spellings
 (list
;  (lkb-pathname (parent-directory) "irregs.tab")
;  (lkb-pathname (parent-directory) "sg_def_m_subst.irreg") 
;  (lkb-pathname (parent-directory) "pl_ind_m_subst.irreg")
;  (lkb-pathname (parent-directory) "pl_def_m_subst.irreg")
;  (lkb-pathname (parent-directory) "sg_def_f_subst.irreg") ;; f
;  (lkb-pathname (parent-directory) "pl_ind_f_subst.irreg")
;  (lkb-pathname (parent-directory) "pl_def_f_subst.irreg")
;  (lkb-pathname (parent-directory) "sg_def_n_subst.irreg") ;; n  
;  (lkb-pathname (parent-directory) "pl_ind_n_subst.irreg")
;  (lkb-pathname (parent-directory) "pl_def_n_subst.irreg")
  ))

;;;
;;; Now the core grammar
;;;
(read-tdl-type-files-aux
 (list 
  (lkb-pathname (parent-directory) "matrix.tdl")
  ;;(lkb-pathname (parent-directory) "transfer.tdl")
;  (lkb-pathname (parent-directory) "norsk.tdl")
  (lkb-pathname (parent-directory) "predsort.tdl")
  (lkb-pathname (parent-directory) "norskpredsort.tdl")
  ;;(lkb-pathname (parent-directory) "infl-codes.tdl")
  ;;(lkb-pathname (parent-directory) "inflections.uniq")
  ;;(lkb-pathname (parent-directory) "out.txt")
;  (lkb-pathname (parent-directory) "out.txt.new")
  ))



;;;
;;; Next, the lexicon itself, instantiating (lexical) types of the grammar

;; first, deal with the large lexicons (optionally in LexDB)
(cond
 (*lexdb-params*
  (load-lexdb-from-script))
 (t
  (read-cached-lex-if-available (list (lkb-pathname (parent-directory) "dummy-lex.tdl")))
;  (read-cached-sublex-if-available "lex4.na-lrg.tdl" (list (lkb-pathname (parent-directory) "BigLex/lex4.na-lrg.tdl")))
;  (read-cached-sublex-if-available "lex4.v-lrg.tdl" (list (lkb-pathname (parent-directory) "BigLex/lex4.v-lrg.tdl")))
  ;;(read-cached-sublex-if-available "lex4.propn1.tdl" (list (lkb-pathname (parent-directory) "lex4.propn1.tdl")))
;;(read-cached-sublex-if-available "lex3.v-troll.tdl" (list (lkb-pathname (parent-directory) "BigLex/lex3.v-troll.tdl")))
;;(read-cached-sublex-if-available "troll-verbs.tdl" (list (lkb-pathname (parent-directory) "BigLex/troll-verbs.tdl")))
;; (read-cached-sublex-if-available "troll-adj.tdl" (list (lkb-pathname (parent-directory) "BigLex/troll-adj.tdl")))
;; (read-cached-sublex-if-available "troll-nom.tdl" (list (lkb-pathname (parent-directory) "BigLex/troll-nom.tdl")))
  ))

;; next, load the small lexicons
;(read-cached-sublex-if-available "lex1.close.tdl" (list (lkb-pathname (parent-directory) "lex1.close.tdl")))	
;(read-cached-sublex-if-available "lex2.open.tdl" (list (lkb-pathname (parent-directory) "lex2.open.tdl")))	
;;(read-cached-sublex-if-available "lex2.semlab.tdl" (list (lkb-pathname (parent-directory) "lex2.semlab.tdl")))
;;(read-cached-sublex-if-available "lex3.p-adv-lean.tdl" (list (lkb-pathname (parent-directory) "lex3.p-adv-lean.tdl")))
;;(read-cached-sublex-if-available "lex3.p-adv-prepsort.tdl" (list (lkb-pathname (parent-directory) "lex3.p-adv-prepsort.tdl")))
;;(read-cached-sublex-if-available "lex3.p-adv-trail.tdl" (list (lkb-pathname (parent-directory) "lex3.p-adv-trail.tdl")))
;;(read-cached-sublex-if-available "lex3.p-adv-decmp.tdl" (list (lkb-pathname (parent-directory) "lex3.p-adv-decmp.tdl"
;(read-cached-sublex-if-available "lex3.p-adv-full.tdl" (list (lkb-pathname (parent-directory) "lex3.p-adv-full.tdl")))
;(read-cached-sublex-if-available "lex4.propn1.tdl" (list (lkb-pathname
;(parent-directory) "lex4.propn1.tdl")))
;(read-cached-sublex-if-available "lex4.propn2.tdl" (list (lkb-pathname (parent-directory) "lex4.propn2.tdl")))


;;;
;;; Finally, the grammar rules, lexical rules (given special treatment in the
;;; parser in that they can apply _prior_ to `inflectional' rules), and the
;;; `inflectional' rules themselves (rules with an associated orthographemic
;;; alternation of the surface string).
;;;
;(read-tdl-grammar-file-aux (lkb-pathname (parent-directory) "rules.tdl"))
;;(read-tdl-grammar-file-aux (lkb-pathname (parent-directory) "rules-norsk2.tdl"))
;(read-tdl-lex-rule-file-aux (lkb-pathname (parent-directory) "lrules.tdl"))
;;(read-tdl-lex-rule-file-aux (lkb-pathname (parent-directory) "lrules-syntax.tdl"))
;;(read-morph-file-aux (lkb-pathname (parent-directory) "irules.tdl"))
;(read-morph-file-aux (lkb-pathname (parent-directory) "irules-v.tdl"))
;(read-morph-file-aux (lkb-pathname (parent-directory) "irules-n.tdl"))
;(read-morph-file-aux (lkb-pathname (parent-directory) "irules-a.tdl"))
;(read-morph-file-aux (lkb-pathname (parent-directory) "irules-deriv.tdl"))

;;;
;;; The `start symbol(s)' of the grammar.
;;;
;(read-tdl-psort-file-aux (lkb-pathname (parent-directory) "roots.tdl"))

;;;

;;; Types providing labels for nodes in parse trees
;;;
(read-tdl-parse-node-file-aux (lkb-pathname (parent-directory) "labels.tdl"))


;;; preprocessor (fspp) rules
(read-preprocessor (lkb-pathname (parent-directory) "preprocessor.no.fsr"))



;;; semi mapping
(mt:read-vpm (lkb-pathname (parent-directory) "semi.vpm") :semi)

;;;
;;; A few more LKB-specific settings, this time for MRS post-processing and
;;; generation;
;;;
(lkb-load-lisp (this-directory) "mrsglobals.lisp" t)
